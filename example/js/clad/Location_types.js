//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

if (typeof clad === 'undefined') {
  clad = {};
}
clad.CXSourceLocation = function(args) {
  this.ptr_data = null;
  this.int_data = null;
  if (args) {
    if (args.ptr_data !== undefined) {
      this.ptr_data = args.ptr_data;
    }
    if (args.int_data !== undefined) {
      this.int_data = args.int_data;
    }
  }
};
clad.CXSourceLocation.prototype = {};
clad.CXSourceLocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.ptr_data = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI64().value;
          this.ptr_data.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.int_data = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.CXSourceLocation.prototype.write = function(output) {
  output.writeStructBegin('CXSourceLocation');
  if (this.ptr_data !== null && this.ptr_data !== undefined) {
    output.writeFieldBegin('ptr_data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.ptr_data.length);
    for (var iter7 in this.ptr_data)
    {
      if (this.ptr_data.hasOwnProperty(iter7))
      {
        iter7 = this.ptr_data[iter7];
        output.writeI64(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int_data !== null && this.int_data !== undefined) {
    output.writeFieldBegin('int_data', Thrift.Type.I32, 2);
    output.writeI32(this.int_data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.CXSourceRange = function(args) {
  this.ptr_data = null;
  this.begin_int_data = null;
  this.end_int_data = null;
  if (args) {
    if (args.ptr_data !== undefined) {
      this.ptr_data = args.ptr_data;
    }
    if (args.begin_int_data !== undefined) {
      this.begin_int_data = args.begin_int_data;
    }
    if (args.end_int_data !== undefined) {
      this.end_int_data = args.end_int_data;
    }
  }
};
clad.CXSourceRange.prototype = {};
clad.CXSourceRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.ptr_data = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readI64().value;
          this.ptr_data.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.begin_int_data = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.end_int_data = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.CXSourceRange.prototype.write = function(output) {
  output.writeStructBegin('CXSourceRange');
  if (this.ptr_data !== null && this.ptr_data !== undefined) {
    output.writeFieldBegin('ptr_data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.ptr_data.length);
    for (var iter15 in this.ptr_data)
    {
      if (this.ptr_data.hasOwnProperty(iter15))
      {
        iter15 = this.ptr_data[iter15];
        output.writeI64(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.begin_int_data !== null && this.begin_int_data !== undefined) {
    output.writeFieldBegin('begin_int_data', Thrift.Type.I32, 2);
    output.writeI32(this.begin_int_data);
    output.writeFieldEnd();
  }
  if (this.end_int_data !== null && this.end_int_data !== undefined) {
    output.writeFieldBegin('end_int_data', Thrift.Type.I32, 3);
    output.writeI32(this.end_int_data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.CXSourcePosition = function(args) {
  this.file = null;
  this.filename = null;
  this.line = null;
  this.column = null;
  this.offset = null;
  if (args) {
    if (args.file !== undefined) {
      this.file = args.file;
    }
    if (args.filename !== undefined) {
      this.filename = args.filename;
    }
    if (args.line !== undefined) {
      this.line = args.line;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
  }
};
clad.CXSourcePosition.prototype = {};
clad.CXSourcePosition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.file = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.line = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.column = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.CXSourcePosition.prototype.write = function(output) {
  output.writeStructBegin('CXSourcePosition');
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.I64, 1);
    output.writeI64(this.file);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 2);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.line !== null && this.line !== undefined) {
    output.writeFieldBegin('line', Thrift.Type.I32, 3);
    output.writeI32(this.line);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.I32, 4);
    output.writeI32(this.column);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 5);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

