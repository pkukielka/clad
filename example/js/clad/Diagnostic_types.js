//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

if (typeof clad === 'undefined') {
  clad = {};
}
clad.CXDiagnosticSeverity = {
'CXDiagnostic_Ignored' : 0,
'CXDiagnostic_Note' : 1,
'CXDiagnostic_Warning' : 2,
'CXDiagnostic_Error' : 3,
'CXDiagnostic_Fatal' : 4
};
clad.CXLoadDiag_Error = {
'CXLoadDiag_None' : 0,
'CXLoadDiag_Unknown' : 1,
'CXLoadDiag_CannotLoad' : 2,
'CXLoadDiag_InvalidFile' : 3
};
clad.CXDiagnosticDisplayOptions = {
'CXDiagnostic_DisplaySourceLocation' : 1,
'CXDiagnostic_DisplayColumn' : 2,
'CXDiagnostic_DisplaySourceRanges' : 4,
'CXDiagnostic_DisplayOption' : 8,
'CXDiagnostic_DisplayCategoryId' : 16,
'CXDiagnostic_DisplayCategoryName' : 32
};
clad.CXLoadDiagException = function(args) {
  this.Error = null;
  this.ErrorString = null;
  if (args) {
    if (args.Error !== undefined) {
      this.Error = args.Error;
    }
    if (args.ErrorString !== undefined) {
      this.ErrorString = args.ErrorString;
    }
  }
};
Thrift.inherits(clad.CXLoadDiagException, Thrift.TException);
clad.CXLoadDiagException.prototype.name = 'CXLoadDiagException';
clad.CXLoadDiagException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.Error = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ErrorString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.CXLoadDiagException.prototype.write = function(output) {
  output.writeStructBegin('CXLoadDiagException');
  if (this.Error !== null && this.Error !== undefined) {
    output.writeFieldBegin('Error', Thrift.Type.I32, 1);
    output.writeI32(this.Error);
    output.writeFieldEnd();
  }
  if (this.ErrorString !== null && this.ErrorString !== undefined) {
    output.writeFieldBegin('ErrorString', Thrift.Type.STRING, 2);
    output.writeString(this.ErrorString);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.CXDiagnosticOption = function(args) {
  this.Enable = null;
  this.Disable = null;
  if (args) {
    if (args.Enable !== undefined) {
      this.Enable = args.Enable;
    }
    if (args.Disable !== undefined) {
      this.Disable = args.Disable;
    }
  }
};
clad.CXDiagnosticOption.prototype = {};
clad.CXDiagnosticOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Enable = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Disable = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.CXDiagnosticOption.prototype.write = function(output) {
  output.writeStructBegin('CXDiagnosticOption');
  if (this.Enable !== null && this.Enable !== undefined) {
    output.writeFieldBegin('Enable', Thrift.Type.STRING, 1);
    output.writeString(this.Enable);
    output.writeFieldEnd();
  }
  if (this.Disable !== null && this.Disable !== undefined) {
    output.writeFieldBegin('Disable', Thrift.Type.STRING, 2);
    output.writeString(this.Disable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.CXDiagnosticFixIt = function(args) {
  this.ReplacementRange = null;
  this.ReplacementText = null;
  if (args) {
    if (args.ReplacementRange !== undefined) {
      this.ReplacementRange = args.ReplacementRange;
    }
    if (args.ReplacementText !== undefined) {
      this.ReplacementText = args.ReplacementText;
    }
  }
};
clad.CXDiagnosticFixIt.prototype = {};
clad.CXDiagnosticFixIt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ReplacementRange = new clad.CXSourceRange();
        this.ReplacementRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ReplacementText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.CXDiagnosticFixIt.prototype.write = function(output) {
  output.writeStructBegin('CXDiagnosticFixIt');
  if (this.ReplacementRange !== null && this.ReplacementRange !== undefined) {
    output.writeFieldBegin('ReplacementRange', Thrift.Type.STRUCT, 1);
    this.ReplacementRange.write(output);
    output.writeFieldEnd();
  }
  if (this.ReplacementText !== null && this.ReplacementText !== undefined) {
    output.writeFieldBegin('ReplacementText', Thrift.Type.STRING, 2);
    output.writeString(this.ReplacementText);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

