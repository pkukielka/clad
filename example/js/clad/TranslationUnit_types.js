//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

if (typeof clad === 'undefined') {
  clad = {};
}
clad.CXTranslationUnit_Flags = {
'CXTranslationUnit_None' : 0,
'CXTranslationUnit_DetailedPreprocessingRecord' : 1,
'CXTranslationUnit_Incomplete' : 2,
'CXTranslationUnit_PrecompiledPreamble' : 4,
'CXTranslationUnit_CacheCompletionResults' : 8,
'CXTranslationUnit_ForSerialization' : 16,
'CXTranslationUnit_CXXChainedPCH' : 32,
'CXTranslationUnit_SkipFunctionBodies' : 64,
'CXTranslationUnit_IncludeBriefCommentsInCodeCompletion' : 128
};
clad.CXSaveTranslationUnit_Flags = {
'CXSaveTranslationUnit_None' : 0
};
clad.CXSaveError = {
'CXSaveError_None' : 0,
'CXSaveError_Unknown' : 1,
'CXSaveError_TranslationErrors' : 2,
'CXSaveError_InvalidTU' : 3
};
clad.CXReparse_Flags = {
'CXReparse_None' : 0
};
clad.CXTUResourceUsageKind = {
'CXTUResourceUsage_AST' : 1,
'CXTUResourceUsage_Identifiers' : 2,
'CXTUResourceUsage_Selectors' : 3,
'CXTUResourceUsage_GlobalCompletionResults' : 4,
'CXTUResourceUsage_SourceManagerContentCache' : 5,
'CXTUResourceUsage_AST_SideTables' : 6,
'CXTUResourceUsage_SourceManager_Membuffer_Malloc' : 7,
'CXTUResourceUsage_SourceManager_Membuffer_MMap' : 8,
'CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc' : 9,
'CXTUResourceUsage_ExternalASTSource_Membuffer_MMap' : 10,
'CXTUResourceUsage_Preprocessor' : 11,
'CXTUResourceUsage_PreprocessingRecord' : 12,
'CXTUResourceUsage_SourceManager_DataStructures' : 13,
'CXTUResourceUsage_Preprocessor_HeaderSearch' : 14,
'CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN' : 1,
'CXTUResourceUsage_MEMORY_IN_BYTES_END' : 14,
'CXTUResourceUsage_First' : 1,
'CXTUResourceUsage_Last' : 14
};
clad.CXUnsavedFile = function(args) {
  this.Filename = null;
  this.Contents = null;
  if (args) {
    if (args.Filename !== undefined) {
      this.Filename = args.Filename;
    }
    if (args.Contents !== undefined) {
      this.Contents = args.Contents;
    }
  }
};
clad.CXUnsavedFile.prototype = {};
clad.CXUnsavedFile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Contents = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.CXUnsavedFile.prototype.write = function(output) {
  output.writeStructBegin('CXUnsavedFile');
  if (this.Filename !== null && this.Filename !== undefined) {
    output.writeFieldBegin('Filename', Thrift.Type.STRING, 1);
    output.writeString(this.Filename);
    output.writeFieldEnd();
  }
  if (this.Contents !== null && this.Contents !== undefined) {
    output.writeFieldBegin('Contents', Thrift.Type.STRING, 2);
    output.writeString(this.Contents);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.CXTUResourceUsageEntry = function(args) {
  this.kind = null;
  this.amount = null;
  if (args) {
    if (args.kind !== undefined) {
      this.kind = args.kind;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
  }
};
clad.CXTUResourceUsageEntry.prototype = {};
clad.CXTUResourceUsageEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.kind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.amount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.CXTUResourceUsageEntry.prototype.write = function(output) {
  output.writeStructBegin('CXTUResourceUsageEntry');
  if (this.kind !== null && this.kind !== undefined) {
    output.writeFieldBegin('kind', Thrift.Type.I32, 1);
    output.writeI32(this.kind);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I64, 2);
    output.writeI64(this.amount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.CXTUResourceUsage = function(args) {
  this.entries = null;
  if (args) {
    if (args.entries !== undefined) {
      this.entries = args.entries;
    }
  }
};
clad.CXTUResourceUsage.prototype = {};
clad.CXTUResourceUsage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.entries = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new clad.CXTUResourceUsageEntry();
          elem6.read(input);
          this.entries.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.CXTUResourceUsage.prototype.write = function(output) {
  output.writeStructBegin('CXTUResourceUsage');
  if (this.entries !== null && this.entries !== undefined) {
    output.writeFieldBegin('entries', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.entries.length);
    for (var iter7 in this.entries)
    {
      if (this.entries.hasOwnProperty(iter7))
      {
        iter7 = this.entries[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

