//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

clad.Clang_createIndex_args = function(args) {
  this.excludeDeclarationsFromPCH = null;
  this.displayDiagnostics = null;
  if (args) {
    if (args.excludeDeclarationsFromPCH !== undefined) {
      this.excludeDeclarationsFromPCH = args.excludeDeclarationsFromPCH;
    }
    if (args.displayDiagnostics !== undefined) {
      this.displayDiagnostics = args.displayDiagnostics;
    }
  }
};
clad.Clang_createIndex_args.prototype = {};
clad.Clang_createIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.excludeDeclarationsFromPCH = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.displayDiagnostics = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_createIndex_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_createIndex_args');
  if (this.excludeDeclarationsFromPCH !== null && this.excludeDeclarationsFromPCH !== undefined) {
    output.writeFieldBegin('excludeDeclarationsFromPCH', Thrift.Type.I32, 1);
    output.writeI32(this.excludeDeclarationsFromPCH);
    output.writeFieldEnd();
  }
  if (this.displayDiagnostics !== null && this.displayDiagnostics !== undefined) {
    output.writeFieldBegin('displayDiagnostics', Thrift.Type.I32, 2);
    output.writeI32(this.displayDiagnostics);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_createIndex_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_createIndex_result.prototype = {};
clad.Clang_createIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_createIndex_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_createIndex_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_disposeIndex_args = function(args) {
  this.index = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
  }
};
clad.Clang_disposeIndex_args.prototype = {};
clad.Clang_disposeIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_disposeIndex_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_disposeIndex_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 1);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_disposeIndex_result = function(args) {
};
clad.Clang_disposeIndex_result.prototype = {};
clad.Clang_disposeIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_disposeIndex_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_disposeIndex_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_CXIndex_setGlobalOptions_args = function(args) {
  this.index = null;
  this.options = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
clad.Clang_CXIndex_setGlobalOptions_args.prototype = {};
clad.Clang_CXIndex_setGlobalOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.options = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_CXIndex_setGlobalOptions_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_CXIndex_setGlobalOptions_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 1);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.I32, 2);
    output.writeI32(this.options);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_CXIndex_setGlobalOptions_result = function(args) {
};
clad.Clang_CXIndex_setGlobalOptions_result.prototype = {};
clad.Clang_CXIndex_setGlobalOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_CXIndex_setGlobalOptions_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_CXIndex_setGlobalOptions_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_CXIndex_getGlobalOptions_args = function(args) {
  this.index = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
  }
};
clad.Clang_CXIndex_getGlobalOptions_args.prototype = {};
clad.Clang_CXIndex_getGlobalOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_CXIndex_getGlobalOptions_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_CXIndex_getGlobalOptions_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 1);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_CXIndex_getGlobalOptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_CXIndex_getGlobalOptions_result.prototype = {};
clad.Clang_CXIndex_getGlobalOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_CXIndex_getGlobalOptions_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_CXIndex_getGlobalOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getTranslationUnitSpelling_args = function(args) {
  this.unit = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
  }
};
clad.Clang_getTranslationUnitSpelling_args.prototype = {};
clad.Clang_getTranslationUnitSpelling_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getTranslationUnitSpelling_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getTranslationUnitSpelling_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getTranslationUnitSpelling_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getTranslationUnitSpelling_result.prototype = {};
clad.Clang_getTranslationUnitSpelling_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getTranslationUnitSpelling_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getTranslationUnitSpelling_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_createTranslationUnitFromSourceFile_args = function(args) {
  this.idx = null;
  this.source_filename = null;
  this.command_line_args = null;
  this.unsaved_files = null;
  if (args) {
    if (args.idx !== undefined) {
      this.idx = args.idx;
    }
    if (args.source_filename !== undefined) {
      this.source_filename = args.source_filename;
    }
    if (args.command_line_args !== undefined) {
      this.command_line_args = args.command_line_args;
    }
    if (args.unsaved_files !== undefined) {
      this.unsaved_files = args.unsaved_files;
    }
  }
};
clad.Clang_createTranslationUnitFromSourceFile_args.prototype = {};
clad.Clang_createTranslationUnitFromSourceFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.idx = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.source_filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.command_line_args = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.command_line_args.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.unsaved_files = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new clad.CXUnsavedFile();
          elem13.read(input);
          this.unsaved_files.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_createTranslationUnitFromSourceFile_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_createTranslationUnitFromSourceFile_args');
  if (this.idx !== null && this.idx !== undefined) {
    output.writeFieldBegin('idx', Thrift.Type.I64, 1);
    output.writeI64(this.idx);
    output.writeFieldEnd();
  }
  if (this.source_filename !== null && this.source_filename !== undefined) {
    output.writeFieldBegin('source_filename', Thrift.Type.STRING, 2);
    output.writeString(this.source_filename);
    output.writeFieldEnd();
  }
  if (this.command_line_args !== null && this.command_line_args !== undefined) {
    output.writeFieldBegin('command_line_args', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.command_line_args.length);
    for (var iter14 in this.command_line_args)
    {
      if (this.command_line_args.hasOwnProperty(iter14))
      {
        iter14 = this.command_line_args[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.unsaved_files !== null && this.unsaved_files !== undefined) {
    output.writeFieldBegin('unsaved_files', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.unsaved_files.length);
    for (var iter15 in this.unsaved_files)
    {
      if (this.unsaved_files.hasOwnProperty(iter15))
      {
        iter15 = this.unsaved_files[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_createTranslationUnitFromSourceFile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_createTranslationUnitFromSourceFile_result.prototype = {};
clad.Clang_createTranslationUnitFromSourceFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_createTranslationUnitFromSourceFile_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_createTranslationUnitFromSourceFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_createTranslationUnit_args = function(args) {
  this.idx = null;
  this.ast_filename = null;
  if (args) {
    if (args.idx !== undefined) {
      this.idx = args.idx;
    }
    if (args.ast_filename !== undefined) {
      this.ast_filename = args.ast_filename;
    }
  }
};
clad.Clang_createTranslationUnit_args.prototype = {};
clad.Clang_createTranslationUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.idx = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ast_filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_createTranslationUnit_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_createTranslationUnit_args');
  if (this.idx !== null && this.idx !== undefined) {
    output.writeFieldBegin('idx', Thrift.Type.I64, 1);
    output.writeI64(this.idx);
    output.writeFieldEnd();
  }
  if (this.ast_filename !== null && this.ast_filename !== undefined) {
    output.writeFieldBegin('ast_filename', Thrift.Type.STRING, 2);
    output.writeString(this.ast_filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_createTranslationUnit_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_createTranslationUnit_result.prototype = {};
clad.Clang_createTranslationUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_createTranslationUnit_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_createTranslationUnit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_defaultEditingTranslationUnitOptions_args = function(args) {
};
clad.Clang_defaultEditingTranslationUnitOptions_args.prototype = {};
clad.Clang_defaultEditingTranslationUnitOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_defaultEditingTranslationUnitOptions_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_defaultEditingTranslationUnitOptions_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_defaultEditingTranslationUnitOptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_defaultEditingTranslationUnitOptions_result.prototype = {};
clad.Clang_defaultEditingTranslationUnitOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_defaultEditingTranslationUnitOptions_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_defaultEditingTranslationUnitOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_parseTranslationUnit_args = function(args) {
  this.idx = null;
  this.source_filename = null;
  this.command_line_args = null;
  this.unsaved_files = null;
  this.options = null;
  if (args) {
    if (args.idx !== undefined) {
      this.idx = args.idx;
    }
    if (args.source_filename !== undefined) {
      this.source_filename = args.source_filename;
    }
    if (args.command_line_args !== undefined) {
      this.command_line_args = args.command_line_args;
    }
    if (args.unsaved_files !== undefined) {
      this.unsaved_files = args.unsaved_files;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
clad.Clang_parseTranslationUnit_args.prototype = {};
clad.Clang_parseTranslationUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.idx = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.source_filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.command_line_args = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString().value;
          this.command_line_args.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.unsaved_files = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = new clad.CXUnsavedFile();
          elem29.read(input);
          this.unsaved_files.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.options = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_parseTranslationUnit_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_parseTranslationUnit_args');
  if (this.idx !== null && this.idx !== undefined) {
    output.writeFieldBegin('idx', Thrift.Type.I64, 1);
    output.writeI64(this.idx);
    output.writeFieldEnd();
  }
  if (this.source_filename !== null && this.source_filename !== undefined) {
    output.writeFieldBegin('source_filename', Thrift.Type.STRING, 2);
    output.writeString(this.source_filename);
    output.writeFieldEnd();
  }
  if (this.command_line_args !== null && this.command_line_args !== undefined) {
    output.writeFieldBegin('command_line_args', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.command_line_args.length);
    for (var iter30 in this.command_line_args)
    {
      if (this.command_line_args.hasOwnProperty(iter30))
      {
        iter30 = this.command_line_args[iter30];
        output.writeString(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.unsaved_files !== null && this.unsaved_files !== undefined) {
    output.writeFieldBegin('unsaved_files', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.unsaved_files.length);
    for (var iter31 in this.unsaved_files)
    {
      if (this.unsaved_files.hasOwnProperty(iter31))
      {
        iter31 = this.unsaved_files[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.I32, 5);
    output.writeI32(this.options);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_parseTranslationUnit_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_parseTranslationUnit_result.prototype = {};
clad.Clang_parseTranslationUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_parseTranslationUnit_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_parseTranslationUnit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_defaultSaveOptions_args = function(args) {
  this.unit = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
  }
};
clad.Clang_defaultSaveOptions_args.prototype = {};
clad.Clang_defaultSaveOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_defaultSaveOptions_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_defaultSaveOptions_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_defaultSaveOptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_defaultSaveOptions_result.prototype = {};
clad.Clang_defaultSaveOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_defaultSaveOptions_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_defaultSaveOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_saveTranslationUnit_args = function(args) {
  this.unit = null;
  this.filename = null;
  this.options = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
    if (args.filename !== undefined) {
      this.filename = args.filename;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
clad.Clang_saveTranslationUnit_args.prototype = {};
clad.Clang_saveTranslationUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.options = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_saveTranslationUnit_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_saveTranslationUnit_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 2);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.I32, 3);
    output.writeI32(this.options);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_saveTranslationUnit_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_saveTranslationUnit_result.prototype = {};
clad.Clang_saveTranslationUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_saveTranslationUnit_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_saveTranslationUnit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_disposeTranslationUnit_args = function(args) {
  this.unit = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
  }
};
clad.Clang_disposeTranslationUnit_args.prototype = {};
clad.Clang_disposeTranslationUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_disposeTranslationUnit_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_disposeTranslationUnit_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_disposeTranslationUnit_result = function(args) {
};
clad.Clang_disposeTranslationUnit_result.prototype = {};
clad.Clang_disposeTranslationUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_disposeTranslationUnit_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_disposeTranslationUnit_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_defaultReparseOptions_args = function(args) {
  this.unit = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
  }
};
clad.Clang_defaultReparseOptions_args.prototype = {};
clad.Clang_defaultReparseOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_defaultReparseOptions_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_defaultReparseOptions_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_defaultReparseOptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_defaultReparseOptions_result.prototype = {};
clad.Clang_defaultReparseOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_defaultReparseOptions_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_defaultReparseOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_reparseTranslationUnit_args = function(args) {
  this.unit = null;
  this.unsaved_files = null;
  this.options = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
    if (args.unsaved_files !== undefined) {
      this.unsaved_files = args.unsaved_files;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
clad.Clang_reparseTranslationUnit_args.prototype = {};
clad.Clang_reparseTranslationUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.unsaved_files = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new clad.CXUnsavedFile();
          elem38.read(input);
          this.unsaved_files.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.options = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_reparseTranslationUnit_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_reparseTranslationUnit_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  if (this.unsaved_files !== null && this.unsaved_files !== undefined) {
    output.writeFieldBegin('unsaved_files', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.unsaved_files.length);
    for (var iter39 in this.unsaved_files)
    {
      if (this.unsaved_files.hasOwnProperty(iter39))
      {
        iter39 = this.unsaved_files[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.I32, 3);
    output.writeI32(this.options);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_reparseTranslationUnit_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_reparseTranslationUnit_result.prototype = {};
clad.Clang_reparseTranslationUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_reparseTranslationUnit_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_reparseTranslationUnit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getTUResourceUsageName_args = function(args) {
  this.kind = null;
  if (args) {
    if (args.kind !== undefined) {
      this.kind = args.kind;
    }
  }
};
clad.Clang_getTUResourceUsageName_args.prototype = {};
clad.Clang_getTUResourceUsageName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.kind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getTUResourceUsageName_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getTUResourceUsageName_args');
  if (this.kind !== null && this.kind !== undefined) {
    output.writeFieldBegin('kind', Thrift.Type.I32, 1);
    output.writeI32(this.kind);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getTUResourceUsageName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getTUResourceUsageName_result.prototype = {};
clad.Clang_getTUResourceUsageName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getTUResourceUsageName_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getTUResourceUsageName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getCXTUResourceUsage_args = function(args) {
  this.unit = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
  }
};
clad.Clang_getCXTUResourceUsage_args.prototype = {};
clad.Clang_getCXTUResourceUsage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getCXTUResourceUsage_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getCXTUResourceUsage_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getCXTUResourceUsage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getCXTUResourceUsage_result.prototype = {};
clad.Clang_getCXTUResourceUsage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXTUResourceUsage();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getCXTUResourceUsage_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getCXTUResourceUsage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getFileName_args = function(args) {
  this.file = null;
  if (args) {
    if (args.file !== undefined) {
      this.file = args.file;
    }
  }
};
clad.Clang_getFileName_args.prototype = {};
clad.Clang_getFileName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.file = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getFileName_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getFileName_args');
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.I64, 1);
    output.writeI64(this.file);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getFileName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getFileName_result.prototype = {};
clad.Clang_getFileName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getFileName_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getFileName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getFileTime_args = function(args) {
  this.file = null;
  if (args) {
    if (args.file !== undefined) {
      this.file = args.file;
    }
  }
};
clad.Clang_getFileTime_args.prototype = {};
clad.Clang_getFileTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.file = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getFileTime_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getFileTime_args');
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.I64, 1);
    output.writeI64(this.file);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getFileTime_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getFileTime_result.prototype = {};
clad.Clang_getFileTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getFileTime_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getFileTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_isFileMultipleIncludeGuarded_args = function(args) {
  this.unit = null;
  this.file = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
    if (args.file !== undefined) {
      this.file = args.file;
    }
  }
};
clad.Clang_isFileMultipleIncludeGuarded_args.prototype = {};
clad.Clang_isFileMultipleIncludeGuarded_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.file = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_isFileMultipleIncludeGuarded_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_isFileMultipleIncludeGuarded_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.I64, 2);
    output.writeI64(this.file);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_isFileMultipleIncludeGuarded_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_isFileMultipleIncludeGuarded_result.prototype = {};
clad.Clang_isFileMultipleIncludeGuarded_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_isFileMultipleIncludeGuarded_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_isFileMultipleIncludeGuarded_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getFile_args = function(args) {
  this.unit = null;
  this.filename = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
    if (args.filename !== undefined) {
      this.filename = args.filename;
    }
  }
};
clad.Clang_getFile_args.prototype = {};
clad.Clang_getFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getFile_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getFile_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 2);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getFile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getFile_result.prototype = {};
clad.Clang_getFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getFile_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getNullLocation_args = function(args) {
};
clad.Clang_getNullLocation_args.prototype = {};
clad.Clang_getNullLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getNullLocation_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getNullLocation_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getNullLocation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getNullLocation_result.prototype = {};
clad.Clang_getNullLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourceLocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getNullLocation_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getNullLocation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_equalLocations_args = function(args) {
  this.loc1 = null;
  this.loc2 = null;
  if (args) {
    if (args.loc1 !== undefined) {
      this.loc1 = args.loc1;
    }
    if (args.loc2 !== undefined) {
      this.loc2 = args.loc2;
    }
  }
};
clad.Clang_equalLocations_args.prototype = {};
clad.Clang_equalLocations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loc1 = new clad.CXSourceLocation();
        this.loc1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loc2 = new clad.CXSourceLocation();
        this.loc2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_equalLocations_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_equalLocations_args');
  if (this.loc1 !== null && this.loc1 !== undefined) {
    output.writeFieldBegin('loc1', Thrift.Type.STRUCT, 1);
    this.loc1.write(output);
    output.writeFieldEnd();
  }
  if (this.loc2 !== null && this.loc2 !== undefined) {
    output.writeFieldBegin('loc2', Thrift.Type.STRUCT, 2);
    this.loc2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_equalLocations_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_equalLocations_result.prototype = {};
clad.Clang_equalLocations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_equalLocations_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_equalLocations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getLocation_args = function(args) {
  this.unit = null;
  this.file = null;
  this.line = null;
  this.column = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
    if (args.file !== undefined) {
      this.file = args.file;
    }
    if (args.line !== undefined) {
      this.line = args.line;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
  }
};
clad.Clang_getLocation_args.prototype = {};
clad.Clang_getLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.file = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.line = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.column = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getLocation_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getLocation_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.I64, 2);
    output.writeI64(this.file);
    output.writeFieldEnd();
  }
  if (this.line !== null && this.line !== undefined) {
    output.writeFieldBegin('line', Thrift.Type.I32, 3);
    output.writeI32(this.line);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.I32, 4);
    output.writeI32(this.column);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getLocation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getLocation_result.prototype = {};
clad.Clang_getLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourceLocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getLocation_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getLocation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getLocationForOffset_args = function(args) {
  this.unit = null;
  this.file = null;
  this.offset = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
    if (args.file !== undefined) {
      this.file = args.file;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
  }
};
clad.Clang_getLocationForOffset_args.prototype = {};
clad.Clang_getLocationForOffset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.file = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getLocationForOffset_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getLocationForOffset_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.I64, 2);
    output.writeI64(this.file);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getLocationForOffset_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getLocationForOffset_result.prototype = {};
clad.Clang_getLocationForOffset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourceLocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getLocationForOffset_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getLocationForOffset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getNullRange_args = function(args) {
};
clad.Clang_getNullRange_args.prototype = {};
clad.Clang_getNullRange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getNullRange_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getNullRange_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getNullRange_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getNullRange_result.prototype = {};
clad.Clang_getNullRange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourceRange();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getNullRange_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getNullRange_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getRange_args = function(args) {
  this.sourceBegin = null;
  this.sourceEnd = null;
  if (args) {
    if (args.sourceBegin !== undefined) {
      this.sourceBegin = args.sourceBegin;
    }
    if (args.sourceEnd !== undefined) {
      this.sourceEnd = args.sourceEnd;
    }
  }
};
clad.Clang_getRange_args.prototype = {};
clad.Clang_getRange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sourceBegin = new clad.CXSourceLocation();
        this.sourceBegin.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sourceEnd = new clad.CXSourceLocation();
        this.sourceEnd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getRange_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getRange_args');
  if (this.sourceBegin !== null && this.sourceBegin !== undefined) {
    output.writeFieldBegin('sourceBegin', Thrift.Type.STRUCT, 1);
    this.sourceBegin.write(output);
    output.writeFieldEnd();
  }
  if (this.sourceEnd !== null && this.sourceEnd !== undefined) {
    output.writeFieldBegin('sourceEnd', Thrift.Type.STRUCT, 2);
    this.sourceEnd.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getRange_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getRange_result.prototype = {};
clad.Clang_getRange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourceRange();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getRange_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getRange_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_equalRanges_args = function(args) {
  this.range1 = null;
  this.range2 = null;
  if (args) {
    if (args.range1 !== undefined) {
      this.range1 = args.range1;
    }
    if (args.range2 !== undefined) {
      this.range2 = args.range2;
    }
  }
};
clad.Clang_equalRanges_args.prototype = {};
clad.Clang_equalRanges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.range1 = new clad.CXSourceRange();
        this.range1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.range2 = new clad.CXSourceRange();
        this.range2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_equalRanges_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_equalRanges_args');
  if (this.range1 !== null && this.range1 !== undefined) {
    output.writeFieldBegin('range1', Thrift.Type.STRUCT, 1);
    this.range1.write(output);
    output.writeFieldEnd();
  }
  if (this.range2 !== null && this.range2 !== undefined) {
    output.writeFieldBegin('range2', Thrift.Type.STRUCT, 2);
    this.range2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_equalRanges_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_equalRanges_result.prototype = {};
clad.Clang_equalRanges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_equalRanges_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_equalRanges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_isRangeNull_args = function(args) {
  this.range = null;
  if (args) {
    if (args.range !== undefined) {
      this.range = args.range;
    }
  }
};
clad.Clang_isRangeNull_args.prototype = {};
clad.Clang_isRangeNull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new clad.CXSourceRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_isRangeNull_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_isRangeNull_args');
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 1);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_isRangeNull_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_isRangeNull_result.prototype = {};
clad.Clang_isRangeNull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_isRangeNull_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_isRangeNull_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getExpansionLocation_args = function(args) {
  this.location = null;
  if (args) {
    if (args.location !== undefined) {
      this.location = args.location;
    }
  }
};
clad.Clang_getExpansionLocation_args.prototype = {};
clad.Clang_getExpansionLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new clad.CXSourceLocation();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getExpansionLocation_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getExpansionLocation_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getExpansionLocation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getExpansionLocation_result.prototype = {};
clad.Clang_getExpansionLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourcePosition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getExpansionLocation_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getExpansionLocation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getPresumedLocation_args = function(args) {
  this.location = null;
  if (args) {
    if (args.location !== undefined) {
      this.location = args.location;
    }
  }
};
clad.Clang_getPresumedLocation_args.prototype = {};
clad.Clang_getPresumedLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new clad.CXSourceLocation();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getPresumedLocation_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getPresumedLocation_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getPresumedLocation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getPresumedLocation_result.prototype = {};
clad.Clang_getPresumedLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourcePosition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getPresumedLocation_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getPresumedLocation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getInstantiationLocation_args = function(args) {
  this.location = null;
  if (args) {
    if (args.location !== undefined) {
      this.location = args.location;
    }
  }
};
clad.Clang_getInstantiationLocation_args.prototype = {};
clad.Clang_getInstantiationLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new clad.CXSourceLocation();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getInstantiationLocation_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getInstantiationLocation_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getInstantiationLocation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getInstantiationLocation_result.prototype = {};
clad.Clang_getInstantiationLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourcePosition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getInstantiationLocation_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getInstantiationLocation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getSpellingLocation_args = function(args) {
  this.location = null;
  if (args) {
    if (args.location !== undefined) {
      this.location = args.location;
    }
  }
};
clad.Clang_getSpellingLocation_args.prototype = {};
clad.Clang_getSpellingLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new clad.CXSourceLocation();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getSpellingLocation_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getSpellingLocation_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getSpellingLocation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getSpellingLocation_result.prototype = {};
clad.Clang_getSpellingLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourcePosition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getSpellingLocation_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getSpellingLocation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getRangeStart_args = function(args) {
  this.range = null;
  if (args) {
    if (args.range !== undefined) {
      this.range = args.range;
    }
  }
};
clad.Clang_getRangeStart_args.prototype = {};
clad.Clang_getRangeStart_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new clad.CXSourceRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getRangeStart_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getRangeStart_args');
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 1);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getRangeStart_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getRangeStart_result.prototype = {};
clad.Clang_getRangeStart_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourceLocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getRangeStart_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getRangeStart_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getRangeEnd_args = function(args) {
  this.range = null;
  if (args) {
    if (args.range !== undefined) {
      this.range = args.range;
    }
  }
};
clad.Clang_getRangeEnd_args.prototype = {};
clad.Clang_getRangeEnd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new clad.CXSourceRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getRangeEnd_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getRangeEnd_args');
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 1);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getRangeEnd_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getRangeEnd_result.prototype = {};
clad.Clang_getRangeEnd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourceLocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getRangeEnd_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getRangeEnd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getNumDiagnosticsInSet_args = function(args) {
  this.diags = null;
  if (args) {
    if (args.diags !== undefined) {
      this.diags = args.diags;
    }
  }
};
clad.Clang_getNumDiagnosticsInSet_args.prototype = {};
clad.Clang_getNumDiagnosticsInSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diags = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getNumDiagnosticsInSet_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getNumDiagnosticsInSet_args');
  if (this.diags !== null && this.diags !== undefined) {
    output.writeFieldBegin('diags', Thrift.Type.I64, 1);
    output.writeI64(this.diags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getNumDiagnosticsInSet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getNumDiagnosticsInSet_result.prototype = {};
clad.Clang_getNumDiagnosticsInSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getNumDiagnosticsInSet_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getNumDiagnosticsInSet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticInSet_args = function(args) {
  this.diags = null;
  this.index = null;
  if (args) {
    if (args.diags !== undefined) {
      this.diags = args.diags;
    }
    if (args.index !== undefined) {
      this.index = args.index;
    }
  }
};
clad.Clang_getDiagnosticInSet_args.prototype = {};
clad.Clang_getDiagnosticInSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diags = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticInSet_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticInSet_args');
  if (this.diags !== null && this.diags !== undefined) {
    output.writeFieldBegin('diags', Thrift.Type.I64, 1);
    output.writeI64(this.diags);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 2);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticInSet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticInSet_result.prototype = {};
clad.Clang_getDiagnosticInSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticInSet_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticInSet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_loadDiagnostics_args = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined) {
      this.filename = args.filename;
    }
  }
};
clad.Clang_loadDiagnostics_args.prototype = {};
clad.Clang_loadDiagnostics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_loadDiagnostics_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_loadDiagnostics_args');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_loadDiagnostics_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof clad.CXLoadDiagException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
clad.Clang_loadDiagnostics_result.prototype = {};
clad.Clang_loadDiagnostics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new clad.CXLoadDiagException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_loadDiagnostics_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_loadDiagnostics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_disposeDiagnosticSet_args = function(args) {
  this.diagnosticSet = null;
  if (args) {
    if (args.diagnosticSet !== undefined) {
      this.diagnosticSet = args.diagnosticSet;
    }
  }
};
clad.Clang_disposeDiagnosticSet_args.prototype = {};
clad.Clang_disposeDiagnosticSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnosticSet = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_disposeDiagnosticSet_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_disposeDiagnosticSet_args');
  if (this.diagnosticSet !== null && this.diagnosticSet !== undefined) {
    output.writeFieldBegin('diagnosticSet', Thrift.Type.I64, 1);
    output.writeI64(this.diagnosticSet);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_disposeDiagnosticSet_result = function(args) {
};
clad.Clang_disposeDiagnosticSet_result.prototype = {};
clad.Clang_disposeDiagnosticSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_disposeDiagnosticSet_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_disposeDiagnosticSet_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getChildDiagnostics_args = function(args) {
  this.diagnostic = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
  }
};
clad.Clang_getChildDiagnostics_args.prototype = {};
clad.Clang_getChildDiagnostics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getChildDiagnostics_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getChildDiagnostics_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getChildDiagnostics_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getChildDiagnostics_result.prototype = {};
clad.Clang_getChildDiagnostics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getChildDiagnostics_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getChildDiagnostics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getNumDiagnostics_args = function(args) {
  this.unit = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
  }
};
clad.Clang_getNumDiagnostics_args.prototype = {};
clad.Clang_getNumDiagnostics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getNumDiagnostics_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getNumDiagnostics_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getNumDiagnostics_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getNumDiagnostics_result.prototype = {};
clad.Clang_getNumDiagnostics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getNumDiagnostics_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getNumDiagnostics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnostic_args = function(args) {
  this.unit = null;
  this.index = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
    if (args.index !== undefined) {
      this.index = args.index;
    }
  }
};
clad.Clang_getDiagnostic_args.prototype = {};
clad.Clang_getDiagnostic_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnostic_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnostic_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 2);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnostic_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnostic_result.prototype = {};
clad.Clang_getDiagnostic_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnostic_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnostic_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticSetFromTU_args = function(args) {
  this.unit = null;
  if (args) {
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
  }
};
clad.Clang_getDiagnosticSetFromTU_args.prototype = {};
clad.Clang_getDiagnosticSetFromTU_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticSetFromTU_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticSetFromTU_args');
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I64, 1);
    output.writeI64(this.unit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticSetFromTU_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticSetFromTU_result.prototype = {};
clad.Clang_getDiagnosticSetFromTU_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticSetFromTU_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticSetFromTU_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_disposeDiagnostic_args = function(args) {
  this.diagnostic = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
  }
};
clad.Clang_disposeDiagnostic_args.prototype = {};
clad.Clang_disposeDiagnostic_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_disposeDiagnostic_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_disposeDiagnostic_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_disposeDiagnostic_result = function(args) {
};
clad.Clang_disposeDiagnostic_result.prototype = {};
clad.Clang_disposeDiagnostic_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_disposeDiagnostic_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_disposeDiagnostic_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_formatDiagnostic_args = function(args) {
  this.diagnostic = null;
  this.options = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
clad.Clang_formatDiagnostic_args.prototype = {};
clad.Clang_formatDiagnostic_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.options = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_formatDiagnostic_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_formatDiagnostic_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.I32, 2);
    output.writeI32(this.options);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_formatDiagnostic_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_formatDiagnostic_result.prototype = {};
clad.Clang_formatDiagnostic_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_formatDiagnostic_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_formatDiagnostic_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_defaultDiagnosticDisplayOptions_args = function(args) {
};
clad.Clang_defaultDiagnosticDisplayOptions_args.prototype = {};
clad.Clang_defaultDiagnosticDisplayOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_defaultDiagnosticDisplayOptions_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_defaultDiagnosticDisplayOptions_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_defaultDiagnosticDisplayOptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_defaultDiagnosticDisplayOptions_result.prototype = {};
clad.Clang_defaultDiagnosticDisplayOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_defaultDiagnosticDisplayOptions_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_defaultDiagnosticDisplayOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticSeverity_args = function(args) {
  this.diagnostic = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
  }
};
clad.Clang_getDiagnosticSeverity_args.prototype = {};
clad.Clang_getDiagnosticSeverity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticSeverity_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticSeverity_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticSeverity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticSeverity_result.prototype = {};
clad.Clang_getDiagnosticSeverity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticSeverity_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticSeverity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticLocation_args = function(args) {
  this.diagnostic = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
  }
};
clad.Clang_getDiagnosticLocation_args.prototype = {};
clad.Clang_getDiagnosticLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticLocation_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticLocation_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticLocation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticLocation_result.prototype = {};
clad.Clang_getDiagnosticLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourceLocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticLocation_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticLocation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticSpelling_args = function(args) {
  this.diagnostic = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
  }
};
clad.Clang_getDiagnosticSpelling_args.prototype = {};
clad.Clang_getDiagnosticSpelling_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticSpelling_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticSpelling_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticSpelling_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticSpelling_result.prototype = {};
clad.Clang_getDiagnosticSpelling_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticSpelling_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticSpelling_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticOption_args = function(args) {
  this.diagnostic = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
  }
};
clad.Clang_getDiagnosticOption_args.prototype = {};
clad.Clang_getDiagnosticOption_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticOption_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticOption_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticOption_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticOption_result.prototype = {};
clad.Clang_getDiagnosticOption_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXDiagnosticOption();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticOption_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticOption_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticCategory_args = function(args) {
  this.diagnostic = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
  }
};
clad.Clang_getDiagnosticCategory_args.prototype = {};
clad.Clang_getDiagnosticCategory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticCategory_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticCategory_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticCategory_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticCategory_result.prototype = {};
clad.Clang_getDiagnosticCategory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticCategory_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticCategory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticCategoryText_args = function(args) {
  this.diagnostic = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
  }
};
clad.Clang_getDiagnosticCategoryText_args.prototype = {};
clad.Clang_getDiagnosticCategoryText_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticCategoryText_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticCategoryText_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticCategoryText_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticCategoryText_result.prototype = {};
clad.Clang_getDiagnosticCategoryText_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticCategoryText_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticCategoryText_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticNumRanges_args = function(args) {
  this.diagnostic = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
  }
};
clad.Clang_getDiagnosticNumRanges_args.prototype = {};
clad.Clang_getDiagnosticNumRanges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticNumRanges_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticNumRanges_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticNumRanges_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticNumRanges_result.prototype = {};
clad.Clang_getDiagnosticNumRanges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticNumRanges_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticNumRanges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticRange_args = function(args) {
  this.diagnostic = null;
  this.range = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
    if (args.range !== undefined) {
      this.range = args.range;
    }
  }
};
clad.Clang_getDiagnosticRange_args.prototype = {};
clad.Clang_getDiagnosticRange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.range = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticRange_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticRange_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.I32, 2);
    output.writeI32(this.range);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticRange_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticRange_result.prototype = {};
clad.Clang_getDiagnosticRange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXSourceRange();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticRange_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticRange_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticNumFixIts_args = function(args) {
  this.diagnostic = null;
  if (args) {
    if (args.diagnostic !== undefined) {
      this.diagnostic = args.diagnostic;
    }
  }
};
clad.Clang_getDiagnosticNumFixIts_args.prototype = {};
clad.Clang_getDiagnosticNumFixIts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.diagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticNumFixIts_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticNumFixIts_args');
  if (this.diagnostic !== null && this.diagnostic !== undefined) {
    output.writeFieldBegin('diagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.diagnostic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticNumFixIts_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticNumFixIts_result.prototype = {};
clad.Clang_getDiagnosticNumFixIts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticNumFixIts_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticNumFixIts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticFixIt_args = function(args) {
  this.siagnostic = null;
  this.fix_it = null;
  if (args) {
    if (args.siagnostic !== undefined) {
      this.siagnostic = args.siagnostic;
    }
    if (args.fix_it !== undefined) {
      this.fix_it = args.fix_it;
    }
  }
};
clad.Clang_getDiagnosticFixIt_args.prototype = {};
clad.Clang_getDiagnosticFixIt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.siagnostic = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.fix_it = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticFixIt_args.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticFixIt_args');
  if (this.siagnostic !== null && this.siagnostic !== undefined) {
    output.writeFieldBegin('siagnostic', Thrift.Type.I64, 1);
    output.writeI64(this.siagnostic);
    output.writeFieldEnd();
  }
  if (this.fix_it !== null && this.fix_it !== undefined) {
    output.writeFieldBegin('fix_it', Thrift.Type.I32, 2);
    output.writeI32(this.fix_it);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.Clang_getDiagnosticFixIt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
clad.Clang_getDiagnosticFixIt_result.prototype = {};
clad.Clang_getDiagnosticFixIt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new clad.CXDiagnosticFixIt();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.Clang_getDiagnosticFixIt_result.prototype.write = function(output) {
  output.writeStructBegin('Clang_getDiagnosticFixIt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

clad.ClangClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
clad.ClangClient.prototype = {};
clad.ClangClient.prototype.createIndex = function(excludeDeclarationsFromPCH, displayDiagnostics) {
  this.send_createIndex(excludeDeclarationsFromPCH, displayDiagnostics);
  return this.recv_createIndex();
};

clad.ClangClient.prototype.send_createIndex = function(excludeDeclarationsFromPCH, displayDiagnostics) {
  this.output.writeMessageBegin('createIndex', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_createIndex_args();
  args.excludeDeclarationsFromPCH = excludeDeclarationsFromPCH;
  args.displayDiagnostics = displayDiagnostics;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_createIndex = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_createIndex_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createIndex failed: unknown result';
};
clad.ClangClient.prototype.disposeIndex = function(index) {
  this.send_disposeIndex(index);
  this.recv_disposeIndex();
};

clad.ClangClient.prototype.send_disposeIndex = function(index) {
  this.output.writeMessageBegin('disposeIndex', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_disposeIndex_args();
  args.index = index;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_disposeIndex = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_disposeIndex_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
clad.ClangClient.prototype.CXIndex_setGlobalOptions = function(index, options) {
  this.send_CXIndex_setGlobalOptions(index, options);
  this.recv_CXIndex_setGlobalOptions();
};

clad.ClangClient.prototype.send_CXIndex_setGlobalOptions = function(index, options) {
  this.output.writeMessageBegin('CXIndex_setGlobalOptions', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_CXIndex_setGlobalOptions_args();
  args.index = index;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_CXIndex_setGlobalOptions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_CXIndex_setGlobalOptions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
clad.ClangClient.prototype.CXIndex_getGlobalOptions = function(index) {
  this.send_CXIndex_getGlobalOptions(index);
  return this.recv_CXIndex_getGlobalOptions();
};

clad.ClangClient.prototype.send_CXIndex_getGlobalOptions = function(index) {
  this.output.writeMessageBegin('CXIndex_getGlobalOptions', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_CXIndex_getGlobalOptions_args();
  args.index = index;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_CXIndex_getGlobalOptions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_CXIndex_getGlobalOptions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'CXIndex_getGlobalOptions failed: unknown result';
};
clad.ClangClient.prototype.getTranslationUnitSpelling = function(unit) {
  this.send_getTranslationUnitSpelling(unit);
  return this.recv_getTranslationUnitSpelling();
};

clad.ClangClient.prototype.send_getTranslationUnitSpelling = function(unit) {
  this.output.writeMessageBegin('getTranslationUnitSpelling', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getTranslationUnitSpelling_args();
  args.unit = unit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getTranslationUnitSpelling = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getTranslationUnitSpelling_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTranslationUnitSpelling failed: unknown result';
};
clad.ClangClient.prototype.createTranslationUnitFromSourceFile = function(idx, source_filename, command_line_args, unsaved_files) {
  this.send_createTranslationUnitFromSourceFile(idx, source_filename, command_line_args, unsaved_files);
  return this.recv_createTranslationUnitFromSourceFile();
};

clad.ClangClient.prototype.send_createTranslationUnitFromSourceFile = function(idx, source_filename, command_line_args, unsaved_files) {
  this.output.writeMessageBegin('createTranslationUnitFromSourceFile', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_createTranslationUnitFromSourceFile_args();
  args.idx = idx;
  args.source_filename = source_filename;
  args.command_line_args = command_line_args;
  args.unsaved_files = unsaved_files;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_createTranslationUnitFromSourceFile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_createTranslationUnitFromSourceFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createTranslationUnitFromSourceFile failed: unknown result';
};
clad.ClangClient.prototype.createTranslationUnit = function(idx, ast_filename) {
  this.send_createTranslationUnit(idx, ast_filename);
  return this.recv_createTranslationUnit();
};

clad.ClangClient.prototype.send_createTranslationUnit = function(idx, ast_filename) {
  this.output.writeMessageBegin('createTranslationUnit', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_createTranslationUnit_args();
  args.idx = idx;
  args.ast_filename = ast_filename;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_createTranslationUnit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_createTranslationUnit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createTranslationUnit failed: unknown result';
};
clad.ClangClient.prototype.defaultEditingTranslationUnitOptions = function() {
  this.send_defaultEditingTranslationUnitOptions();
  return this.recv_defaultEditingTranslationUnitOptions();
};

clad.ClangClient.prototype.send_defaultEditingTranslationUnitOptions = function() {
  this.output.writeMessageBegin('defaultEditingTranslationUnitOptions', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_defaultEditingTranslationUnitOptions_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_defaultEditingTranslationUnitOptions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_defaultEditingTranslationUnitOptions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'defaultEditingTranslationUnitOptions failed: unknown result';
};
clad.ClangClient.prototype.parseTranslationUnit = function(idx, source_filename, command_line_args, unsaved_files, options) {
  this.send_parseTranslationUnit(idx, source_filename, command_line_args, unsaved_files, options);
  return this.recv_parseTranslationUnit();
};

clad.ClangClient.prototype.send_parseTranslationUnit = function(idx, source_filename, command_line_args, unsaved_files, options) {
  this.output.writeMessageBegin('parseTranslationUnit', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_parseTranslationUnit_args();
  args.idx = idx;
  args.source_filename = source_filename;
  args.command_line_args = command_line_args;
  args.unsaved_files = unsaved_files;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_parseTranslationUnit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_parseTranslationUnit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'parseTranslationUnit failed: unknown result';
};
clad.ClangClient.prototype.defaultSaveOptions = function(unit) {
  this.send_defaultSaveOptions(unit);
  return this.recv_defaultSaveOptions();
};

clad.ClangClient.prototype.send_defaultSaveOptions = function(unit) {
  this.output.writeMessageBegin('defaultSaveOptions', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_defaultSaveOptions_args();
  args.unit = unit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_defaultSaveOptions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_defaultSaveOptions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'defaultSaveOptions failed: unknown result';
};
clad.ClangClient.prototype.saveTranslationUnit = function(unit, filename, options) {
  this.send_saveTranslationUnit(unit, filename, options);
  return this.recv_saveTranslationUnit();
};

clad.ClangClient.prototype.send_saveTranslationUnit = function(unit, filename, options) {
  this.output.writeMessageBegin('saveTranslationUnit', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_saveTranslationUnit_args();
  args.unit = unit;
  args.filename = filename;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_saveTranslationUnit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_saveTranslationUnit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'saveTranslationUnit failed: unknown result';
};
clad.ClangClient.prototype.disposeTranslationUnit = function(unit) {
  this.send_disposeTranslationUnit(unit);
  this.recv_disposeTranslationUnit();
};

clad.ClangClient.prototype.send_disposeTranslationUnit = function(unit) {
  this.output.writeMessageBegin('disposeTranslationUnit', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_disposeTranslationUnit_args();
  args.unit = unit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_disposeTranslationUnit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_disposeTranslationUnit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
clad.ClangClient.prototype.defaultReparseOptions = function(unit) {
  this.send_defaultReparseOptions(unit);
  return this.recv_defaultReparseOptions();
};

clad.ClangClient.prototype.send_defaultReparseOptions = function(unit) {
  this.output.writeMessageBegin('defaultReparseOptions', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_defaultReparseOptions_args();
  args.unit = unit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_defaultReparseOptions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_defaultReparseOptions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'defaultReparseOptions failed: unknown result';
};
clad.ClangClient.prototype.reparseTranslationUnit = function(unit, unsaved_files, options) {
  this.send_reparseTranslationUnit(unit, unsaved_files, options);
  return this.recv_reparseTranslationUnit();
};

clad.ClangClient.prototype.send_reparseTranslationUnit = function(unit, unsaved_files, options) {
  this.output.writeMessageBegin('reparseTranslationUnit', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_reparseTranslationUnit_args();
  args.unit = unit;
  args.unsaved_files = unsaved_files;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_reparseTranslationUnit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_reparseTranslationUnit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'reparseTranslationUnit failed: unknown result';
};
clad.ClangClient.prototype.getTUResourceUsageName = function(kind) {
  this.send_getTUResourceUsageName(kind);
  return this.recv_getTUResourceUsageName();
};

clad.ClangClient.prototype.send_getTUResourceUsageName = function(kind) {
  this.output.writeMessageBegin('getTUResourceUsageName', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getTUResourceUsageName_args();
  args.kind = kind;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getTUResourceUsageName = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getTUResourceUsageName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTUResourceUsageName failed: unknown result';
};
clad.ClangClient.prototype.getCXTUResourceUsage = function(unit) {
  this.send_getCXTUResourceUsage(unit);
  return this.recv_getCXTUResourceUsage();
};

clad.ClangClient.prototype.send_getCXTUResourceUsage = function(unit) {
  this.output.writeMessageBegin('getCXTUResourceUsage', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getCXTUResourceUsage_args();
  args.unit = unit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getCXTUResourceUsage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getCXTUResourceUsage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getCXTUResourceUsage failed: unknown result';
};
clad.ClangClient.prototype.getFileName = function(file) {
  this.send_getFileName(file);
  return this.recv_getFileName();
};

clad.ClangClient.prototype.send_getFileName = function(file) {
  this.output.writeMessageBegin('getFileName', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getFileName_args();
  args.file = file;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getFileName = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getFileName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getFileName failed: unknown result';
};
clad.ClangClient.prototype.getFileTime = function(file) {
  this.send_getFileTime(file);
  return this.recv_getFileTime();
};

clad.ClangClient.prototype.send_getFileTime = function(file) {
  this.output.writeMessageBegin('getFileTime', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getFileTime_args();
  args.file = file;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getFileTime = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getFileTime_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getFileTime failed: unknown result';
};
clad.ClangClient.prototype.isFileMultipleIncludeGuarded = function(unit, file) {
  this.send_isFileMultipleIncludeGuarded(unit, file);
  return this.recv_isFileMultipleIncludeGuarded();
};

clad.ClangClient.prototype.send_isFileMultipleIncludeGuarded = function(unit, file) {
  this.output.writeMessageBegin('isFileMultipleIncludeGuarded', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_isFileMultipleIncludeGuarded_args();
  args.unit = unit;
  args.file = file;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_isFileMultipleIncludeGuarded = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_isFileMultipleIncludeGuarded_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'isFileMultipleIncludeGuarded failed: unknown result';
};
clad.ClangClient.prototype.getFile = function(unit, filename) {
  this.send_getFile(unit, filename);
  return this.recv_getFile();
};

clad.ClangClient.prototype.send_getFile = function(unit, filename) {
  this.output.writeMessageBegin('getFile', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getFile_args();
  args.unit = unit;
  args.filename = filename;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getFile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getFile failed: unknown result';
};
clad.ClangClient.prototype.getNullLocation = function() {
  this.send_getNullLocation();
  return this.recv_getNullLocation();
};

clad.ClangClient.prototype.send_getNullLocation = function() {
  this.output.writeMessageBegin('getNullLocation', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getNullLocation_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getNullLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getNullLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getNullLocation failed: unknown result';
};
clad.ClangClient.prototype.equalLocations = function(loc1, loc2) {
  this.send_equalLocations(loc1, loc2);
  return this.recv_equalLocations();
};

clad.ClangClient.prototype.send_equalLocations = function(loc1, loc2) {
  this.output.writeMessageBegin('equalLocations', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_equalLocations_args();
  args.loc1 = loc1;
  args.loc2 = loc2;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_equalLocations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_equalLocations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'equalLocations failed: unknown result';
};
clad.ClangClient.prototype.getLocation = function(unit, file, line, column) {
  this.send_getLocation(unit, file, line, column);
  return this.recv_getLocation();
};

clad.ClangClient.prototype.send_getLocation = function(unit, file, line, column) {
  this.output.writeMessageBegin('getLocation', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getLocation_args();
  args.unit = unit;
  args.file = file;
  args.line = line;
  args.column = column;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getLocation failed: unknown result';
};
clad.ClangClient.prototype.getLocationForOffset = function(unit, file, offset) {
  this.send_getLocationForOffset(unit, file, offset);
  return this.recv_getLocationForOffset();
};

clad.ClangClient.prototype.send_getLocationForOffset = function(unit, file, offset) {
  this.output.writeMessageBegin('getLocationForOffset', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getLocationForOffset_args();
  args.unit = unit;
  args.file = file;
  args.offset = offset;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getLocationForOffset = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getLocationForOffset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getLocationForOffset failed: unknown result';
};
clad.ClangClient.prototype.getNullRange = function() {
  this.send_getNullRange();
  return this.recv_getNullRange();
};

clad.ClangClient.prototype.send_getNullRange = function() {
  this.output.writeMessageBegin('getNullRange', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getNullRange_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getNullRange = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getNullRange_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getNullRange failed: unknown result';
};
clad.ClangClient.prototype.getRange = function(sourceBegin, sourceEnd) {
  this.send_getRange(sourceBegin, sourceEnd);
  return this.recv_getRange();
};

clad.ClangClient.prototype.send_getRange = function(sourceBegin, sourceEnd) {
  this.output.writeMessageBegin('getRange', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getRange_args();
  args.sourceBegin = sourceBegin;
  args.sourceEnd = sourceEnd;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getRange = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getRange_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRange failed: unknown result';
};
clad.ClangClient.prototype.equalRanges = function(range1, range2) {
  this.send_equalRanges(range1, range2);
  return this.recv_equalRanges();
};

clad.ClangClient.prototype.send_equalRanges = function(range1, range2) {
  this.output.writeMessageBegin('equalRanges', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_equalRanges_args();
  args.range1 = range1;
  args.range2 = range2;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_equalRanges = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_equalRanges_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'equalRanges failed: unknown result';
};
clad.ClangClient.prototype.isRangeNull = function(range) {
  this.send_isRangeNull(range);
  return this.recv_isRangeNull();
};

clad.ClangClient.prototype.send_isRangeNull = function(range) {
  this.output.writeMessageBegin('isRangeNull', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_isRangeNull_args();
  args.range = range;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_isRangeNull = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_isRangeNull_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'isRangeNull failed: unknown result';
};
clad.ClangClient.prototype.getExpansionLocation = function(location) {
  this.send_getExpansionLocation(location);
  return this.recv_getExpansionLocation();
};

clad.ClangClient.prototype.send_getExpansionLocation = function(location) {
  this.output.writeMessageBegin('getExpansionLocation', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getExpansionLocation_args();
  args.location = location;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getExpansionLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getExpansionLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getExpansionLocation failed: unknown result';
};
clad.ClangClient.prototype.getPresumedLocation = function(location) {
  this.send_getPresumedLocation(location);
  return this.recv_getPresumedLocation();
};

clad.ClangClient.prototype.send_getPresumedLocation = function(location) {
  this.output.writeMessageBegin('getPresumedLocation', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getPresumedLocation_args();
  args.location = location;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getPresumedLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getPresumedLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPresumedLocation failed: unknown result';
};
clad.ClangClient.prototype.getInstantiationLocation = function(location) {
  this.send_getInstantiationLocation(location);
  return this.recv_getInstantiationLocation();
};

clad.ClangClient.prototype.send_getInstantiationLocation = function(location) {
  this.output.writeMessageBegin('getInstantiationLocation', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getInstantiationLocation_args();
  args.location = location;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getInstantiationLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getInstantiationLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getInstantiationLocation failed: unknown result';
};
clad.ClangClient.prototype.getSpellingLocation = function(location) {
  this.send_getSpellingLocation(location);
  return this.recv_getSpellingLocation();
};

clad.ClangClient.prototype.send_getSpellingLocation = function(location) {
  this.output.writeMessageBegin('getSpellingLocation', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getSpellingLocation_args();
  args.location = location;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getSpellingLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getSpellingLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSpellingLocation failed: unknown result';
};
clad.ClangClient.prototype.getRangeStart = function(range) {
  this.send_getRangeStart(range);
  return this.recv_getRangeStart();
};

clad.ClangClient.prototype.send_getRangeStart = function(range) {
  this.output.writeMessageBegin('getRangeStart', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getRangeStart_args();
  args.range = range;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getRangeStart = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getRangeStart_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRangeStart failed: unknown result';
};
clad.ClangClient.prototype.getRangeEnd = function(range) {
  this.send_getRangeEnd(range);
  return this.recv_getRangeEnd();
};

clad.ClangClient.prototype.send_getRangeEnd = function(range) {
  this.output.writeMessageBegin('getRangeEnd', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getRangeEnd_args();
  args.range = range;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getRangeEnd = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getRangeEnd_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRangeEnd failed: unknown result';
};
clad.ClangClient.prototype.getNumDiagnosticsInSet = function(diags) {
  this.send_getNumDiagnosticsInSet(diags);
  return this.recv_getNumDiagnosticsInSet();
};

clad.ClangClient.prototype.send_getNumDiagnosticsInSet = function(diags) {
  this.output.writeMessageBegin('getNumDiagnosticsInSet', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getNumDiagnosticsInSet_args();
  args.diags = diags;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getNumDiagnosticsInSet = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getNumDiagnosticsInSet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getNumDiagnosticsInSet failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticInSet = function(diags, index) {
  this.send_getDiagnosticInSet(diags, index);
  return this.recv_getDiagnosticInSet();
};

clad.ClangClient.prototype.send_getDiagnosticInSet = function(diags, index) {
  this.output.writeMessageBegin('getDiagnosticInSet', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticInSet_args();
  args.diags = diags;
  args.index = index;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticInSet = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticInSet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticInSet failed: unknown result';
};
clad.ClangClient.prototype.loadDiagnostics = function(filename) {
  this.send_loadDiagnostics(filename);
  return this.recv_loadDiagnostics();
};

clad.ClangClient.prototype.send_loadDiagnostics = function(filename) {
  this.output.writeMessageBegin('loadDiagnostics', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_loadDiagnostics_args();
  args.filename = filename;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_loadDiagnostics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_loadDiagnostics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadDiagnostics failed: unknown result';
};
clad.ClangClient.prototype.disposeDiagnosticSet = function(diagnosticSet) {
  this.send_disposeDiagnosticSet(diagnosticSet);
  this.recv_disposeDiagnosticSet();
};

clad.ClangClient.prototype.send_disposeDiagnosticSet = function(diagnosticSet) {
  this.output.writeMessageBegin('disposeDiagnosticSet', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_disposeDiagnosticSet_args();
  args.diagnosticSet = diagnosticSet;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_disposeDiagnosticSet = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_disposeDiagnosticSet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
clad.ClangClient.prototype.getChildDiagnostics = function(diagnostic) {
  this.send_getChildDiagnostics(diagnostic);
  return this.recv_getChildDiagnostics();
};

clad.ClangClient.prototype.send_getChildDiagnostics = function(diagnostic) {
  this.output.writeMessageBegin('getChildDiagnostics', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getChildDiagnostics_args();
  args.diagnostic = diagnostic;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getChildDiagnostics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getChildDiagnostics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getChildDiagnostics failed: unknown result';
};
clad.ClangClient.prototype.getNumDiagnostics = function(unit) {
  this.send_getNumDiagnostics(unit);
  return this.recv_getNumDiagnostics();
};

clad.ClangClient.prototype.send_getNumDiagnostics = function(unit) {
  this.output.writeMessageBegin('getNumDiagnostics', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getNumDiagnostics_args();
  args.unit = unit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getNumDiagnostics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getNumDiagnostics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getNumDiagnostics failed: unknown result';
};
clad.ClangClient.prototype.getDiagnostic = function(unit, index) {
  this.send_getDiagnostic(unit, index);
  return this.recv_getDiagnostic();
};

clad.ClangClient.prototype.send_getDiagnostic = function(unit, index) {
  this.output.writeMessageBegin('getDiagnostic', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnostic_args();
  args.unit = unit;
  args.index = index;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnostic = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnostic_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnostic failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticSetFromTU = function(unit) {
  this.send_getDiagnosticSetFromTU(unit);
  return this.recv_getDiagnosticSetFromTU();
};

clad.ClangClient.prototype.send_getDiagnosticSetFromTU = function(unit) {
  this.output.writeMessageBegin('getDiagnosticSetFromTU', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticSetFromTU_args();
  args.unit = unit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticSetFromTU = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticSetFromTU_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticSetFromTU failed: unknown result';
};
clad.ClangClient.prototype.disposeDiagnostic = function(diagnostic) {
  this.send_disposeDiagnostic(diagnostic);
  this.recv_disposeDiagnostic();
};

clad.ClangClient.prototype.send_disposeDiagnostic = function(diagnostic) {
  this.output.writeMessageBegin('disposeDiagnostic', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_disposeDiagnostic_args();
  args.diagnostic = diagnostic;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_disposeDiagnostic = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_disposeDiagnostic_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
clad.ClangClient.prototype.formatDiagnostic = function(diagnostic, options) {
  this.send_formatDiagnostic(diagnostic, options);
  return this.recv_formatDiagnostic();
};

clad.ClangClient.prototype.send_formatDiagnostic = function(diagnostic, options) {
  this.output.writeMessageBegin('formatDiagnostic', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_formatDiagnostic_args();
  args.diagnostic = diagnostic;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_formatDiagnostic = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_formatDiagnostic_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'formatDiagnostic failed: unknown result';
};
clad.ClangClient.prototype.defaultDiagnosticDisplayOptions = function() {
  this.send_defaultDiagnosticDisplayOptions();
  return this.recv_defaultDiagnosticDisplayOptions();
};

clad.ClangClient.prototype.send_defaultDiagnosticDisplayOptions = function() {
  this.output.writeMessageBegin('defaultDiagnosticDisplayOptions', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_defaultDiagnosticDisplayOptions_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_defaultDiagnosticDisplayOptions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_defaultDiagnosticDisplayOptions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'defaultDiagnosticDisplayOptions failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticSeverity = function(diagnostic) {
  this.send_getDiagnosticSeverity(diagnostic);
  return this.recv_getDiagnosticSeverity();
};

clad.ClangClient.prototype.send_getDiagnosticSeverity = function(diagnostic) {
  this.output.writeMessageBegin('getDiagnosticSeverity', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticSeverity_args();
  args.diagnostic = diagnostic;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticSeverity = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticSeverity_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticSeverity failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticLocation = function(diagnostic) {
  this.send_getDiagnosticLocation(diagnostic);
  return this.recv_getDiagnosticLocation();
};

clad.ClangClient.prototype.send_getDiagnosticLocation = function(diagnostic) {
  this.output.writeMessageBegin('getDiagnosticLocation', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticLocation_args();
  args.diagnostic = diagnostic;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticLocation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticLocation failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticSpelling = function(diagnostic) {
  this.send_getDiagnosticSpelling(diagnostic);
  return this.recv_getDiagnosticSpelling();
};

clad.ClangClient.prototype.send_getDiagnosticSpelling = function(diagnostic) {
  this.output.writeMessageBegin('getDiagnosticSpelling', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticSpelling_args();
  args.diagnostic = diagnostic;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticSpelling = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticSpelling_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticSpelling failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticOption = function(diagnostic) {
  this.send_getDiagnosticOption(diagnostic);
  return this.recv_getDiagnosticOption();
};

clad.ClangClient.prototype.send_getDiagnosticOption = function(diagnostic) {
  this.output.writeMessageBegin('getDiagnosticOption', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticOption_args();
  args.diagnostic = diagnostic;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticOption = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticOption_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticOption failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticCategory = function(diagnostic) {
  this.send_getDiagnosticCategory(diagnostic);
  return this.recv_getDiagnosticCategory();
};

clad.ClangClient.prototype.send_getDiagnosticCategory = function(diagnostic) {
  this.output.writeMessageBegin('getDiagnosticCategory', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticCategory_args();
  args.diagnostic = diagnostic;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticCategory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticCategory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticCategory failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticCategoryText = function(diagnostic) {
  this.send_getDiagnosticCategoryText(diagnostic);
  return this.recv_getDiagnosticCategoryText();
};

clad.ClangClient.prototype.send_getDiagnosticCategoryText = function(diagnostic) {
  this.output.writeMessageBegin('getDiagnosticCategoryText', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticCategoryText_args();
  args.diagnostic = diagnostic;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticCategoryText = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticCategoryText_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticCategoryText failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticNumRanges = function(diagnostic) {
  this.send_getDiagnosticNumRanges(diagnostic);
  return this.recv_getDiagnosticNumRanges();
};

clad.ClangClient.prototype.send_getDiagnosticNumRanges = function(diagnostic) {
  this.output.writeMessageBegin('getDiagnosticNumRanges', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticNumRanges_args();
  args.diagnostic = diagnostic;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticNumRanges = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticNumRanges_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticNumRanges failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticRange = function(diagnostic, range) {
  this.send_getDiagnosticRange(diagnostic, range);
  return this.recv_getDiagnosticRange();
};

clad.ClangClient.prototype.send_getDiagnosticRange = function(diagnostic, range) {
  this.output.writeMessageBegin('getDiagnosticRange', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticRange_args();
  args.diagnostic = diagnostic;
  args.range = range;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticRange = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticRange_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticRange failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticNumFixIts = function(diagnostic) {
  this.send_getDiagnosticNumFixIts(diagnostic);
  return this.recv_getDiagnosticNumFixIts();
};

clad.ClangClient.prototype.send_getDiagnosticNumFixIts = function(diagnostic) {
  this.output.writeMessageBegin('getDiagnosticNumFixIts', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticNumFixIts_args();
  args.diagnostic = diagnostic;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticNumFixIts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticNumFixIts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticNumFixIts failed: unknown result';
};
clad.ClangClient.prototype.getDiagnosticFixIt = function(siagnostic, fix_it) {
  this.send_getDiagnosticFixIt(siagnostic, fix_it);
  return this.recv_getDiagnosticFixIt();
};

clad.ClangClient.prototype.send_getDiagnosticFixIt = function(siagnostic, fix_it) {
  this.output.writeMessageBegin('getDiagnosticFixIt', Thrift.MessageType.CALL, this.seqid);
  var args = new clad.Clang_getDiagnosticFixIt_args();
  args.siagnostic = siagnostic;
  args.fix_it = fix_it;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

clad.ClangClient.prototype.recv_getDiagnosticFixIt = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new clad.Clang_getDiagnosticFixIt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiagnosticFixIt failed: unknown result';
};
