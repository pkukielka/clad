//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

if (typeof clad === 'undefined') {
  clad = {};
}
clad.CXAvailabilityKind = {
'CXAvailability_Available' : 0,
'CXAvailability_Deprecated' : 1,
'CXAvailability_NotAvailable' : 2,
'CXAvailability_NotAccessible' : 3
};
clad.CXGlobalOptFlags = {
'CXGlobalOpt_None' : 0,
'CXGlobalOpt_ThreadBackgroundPriorityForIndexing' : 1,
'CXGlobalOpt_ThreadBackgroundPriorityForEditing' : 2,
'CXGlobalOpt_ThreadBackgroundPriorityForAll' : 3
};
clad.CXVersion = function(args) {
  this.Major = null;
  this.Minor = null;
  this.Subminor = null;
  if (args) {
    if (args.Major !== undefined) {
      this.Major = args.Major;
    }
    if (args.Minor !== undefined) {
      this.Minor = args.Minor;
    }
    if (args.Subminor !== undefined) {
      this.Subminor = args.Subminor;
    }
  }
};
clad.CXVersion.prototype = {};
clad.CXVersion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.Major = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.Minor = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.Subminor = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

clad.CXVersion.prototype.write = function(output) {
  output.writeStructBegin('CXVersion');
  if (this.Major !== null && this.Major !== undefined) {
    output.writeFieldBegin('Major', Thrift.Type.I32, 1);
    output.writeI32(this.Major);
    output.writeFieldEnd();
  }
  if (this.Minor !== null && this.Minor !== undefined) {
    output.writeFieldBegin('Minor', Thrift.Type.I32, 2);
    output.writeI32(this.Minor);
    output.writeFieldEnd();
  }
  if (this.Subminor !== null && this.Subminor !== undefined) {
    output.writeFieldBegin('Subminor', Thrift.Type.I32, 3);
    output.writeI32(this.Subminor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

