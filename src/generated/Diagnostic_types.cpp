/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Diagnostic_types.h"

#include <algorithm>

namespace clad {

int _kCXDiagnosticSeverityValues[] = {
  CXDiagnosticSeverity::CXDiagnostic_Ignored,
  CXDiagnosticSeverity::CXDiagnostic_Note,
  CXDiagnosticSeverity::CXDiagnostic_Warning,
  CXDiagnosticSeverity::CXDiagnostic_Error,
  CXDiagnosticSeverity::CXDiagnostic_Fatal
};
const char* _kCXDiagnosticSeverityNames[] = {
  "CXDiagnostic_Ignored",
  "CXDiagnostic_Note",
  "CXDiagnostic_Warning",
  "CXDiagnostic_Error",
  "CXDiagnostic_Fatal"
};
const std::map<int, const char*> _CXDiagnosticSeverity_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kCXDiagnosticSeverityValues, _kCXDiagnosticSeverityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCXLoadDiag_ErrorValues[] = {
  CXLoadDiag_Error::CXLoadDiag_None,
  CXLoadDiag_Error::CXLoadDiag_Unknown,
  CXLoadDiag_Error::CXLoadDiag_CannotLoad,
  CXLoadDiag_Error::CXLoadDiag_InvalidFile
};
const char* _kCXLoadDiag_ErrorNames[] = {
  "CXLoadDiag_None",
  "CXLoadDiag_Unknown",
  "CXLoadDiag_CannotLoad",
  "CXLoadDiag_InvalidFile"
};
const std::map<int, const char*> _CXLoadDiag_Error_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kCXLoadDiag_ErrorValues, _kCXLoadDiag_ErrorNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCXDiagnosticDisplayOptionsValues[] = {
  CXDiagnosticDisplayOptions::CXDiagnostic_DisplaySourceLocation,
  CXDiagnosticDisplayOptions::CXDiagnostic_DisplayColumn,
  CXDiagnosticDisplayOptions::CXDiagnostic_DisplaySourceRanges,
  CXDiagnosticDisplayOptions::CXDiagnostic_DisplayOption,
  CXDiagnosticDisplayOptions::CXDiagnostic_DisplayCategoryId,
  CXDiagnosticDisplayOptions::CXDiagnostic_DisplayCategoryName
};
const char* _kCXDiagnosticDisplayOptionsNames[] = {
  "CXDiagnostic_DisplaySourceLocation",
  "CXDiagnostic_DisplayColumn",
  "CXDiagnostic_DisplaySourceRanges",
  "CXDiagnostic_DisplayOption",
  "CXDiagnostic_DisplayCategoryId",
  "CXDiagnostic_DisplayCategoryName"
};
const std::map<int, const char*> _CXDiagnosticDisplayOptions_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kCXDiagnosticDisplayOptionsValues, _kCXDiagnosticDisplayOptionsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* CXLoadDiagException::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t CXLoadDiagException::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t CXLoadDiagException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->Error = (CXLoadDiag_Error::type)ecast0;
          this->__isset.Error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ErrorString);
          this->__isset.ErrorString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CXLoadDiagException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CXLoadDiagException");

  xfer += oprot->writeFieldBegin("Error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->Error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ErrorString", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ErrorString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CXLoadDiagException &a, CXLoadDiagException &b) {
  using ::std::swap;
  swap(a.Error, b.Error);
  swap(a.ErrorString, b.ErrorString);
  swap(a.__isset, b.__isset);
}

const char* CXDiagnosticOption::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t CXDiagnosticOption::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t CXDiagnosticOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Enable);
          this->__isset.Enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Disable);
          this->__isset.Disable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CXDiagnosticOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CXDiagnosticOption");

  xfer += oprot->writeFieldBegin("Enable", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Disable", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Disable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CXDiagnosticOption &a, CXDiagnosticOption &b) {
  using ::std::swap;
  swap(a.Enable, b.Enable);
  swap(a.Disable, b.Disable);
  swap(a.__isset, b.__isset);
}

const char* CXDiagnosticFixIt::ascii_fingerprint = "B6D5433EE95BE4D21B2A5CD1011EAD8E";
const uint8_t CXDiagnosticFixIt::binary_fingerprint[16] = {0xB6,0xD5,0x43,0x3E,0xE9,0x5B,0xE4,0xD2,0x1B,0x2A,0x5C,0xD1,0x01,0x1E,0xAD,0x8E};

uint32_t CXDiagnosticFixIt::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ReplacementRange.read(iprot);
          this->__isset.ReplacementRange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ReplacementText);
          this->__isset.ReplacementText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CXDiagnosticFixIt::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CXDiagnosticFixIt");

  xfer += oprot->writeFieldBegin("ReplacementRange", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ReplacementRange.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ReplacementText", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ReplacementText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CXDiagnosticFixIt &a, CXDiagnosticFixIt &b) {
  using ::std::swap;
  swap(a.ReplacementRange, b.ReplacementRange);
  swap(a.ReplacementText, b.ReplacementText);
  swap(a.__isset, b.__isset);
}

} // namespace
