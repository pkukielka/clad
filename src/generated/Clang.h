/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Clang_H
#define Clang_H

#include <thrift/TDispatchProcessor.h>
#include "Clang_types.h"

namespace clang { namespace thrift {

class ClangIf {
 public:
  virtual ~ClangIf() {}
  virtual  ::clang::thrift::CXIndex clang_createIndex(const int32_t excludeDeclarationsFromPCH, const int32_t displayDiagnostics) = 0;
  virtual void clang_disposeIndex(const  ::clang::thrift::CXIndex index) = 0;
  virtual void clang_CXIndex_setGlobalOptions(const  ::clang::thrift::CXIndex index, const  ::clang::thrift::CXGlobalOptFlags::type options) = 0;
  virtual  ::clang::thrift::CXGlobalOptFlags::type clang_CXIndex_getGlobalOptions(const  ::clang::thrift::CXIndex index) = 0;
  virtual void clang_getTranslationUnitSpelling(std::string& _return, const  ::clang::thrift::CXTranslationUnit unit) = 0;
  virtual  ::clang::thrift::CXTranslationUnit clang_createTranslationUnitFromSourceFile(const  ::clang::thrift::CXIndex idx, const std::string& source_filename, const std::vector<std::string> & clang_command_line_args, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files) = 0;
  virtual  ::clang::thrift::CXTranslationUnit clang_createTranslationUnit(const  ::clang::thrift::CXIndex idx, const std::string& ast_filename) = 0;
  virtual  ::clang::thrift::u32 clang_defaultEditingTranslationUnitOptions() = 0;
  virtual  ::clang::thrift::CXTranslationUnit clang_parseTranslationUnit(const  ::clang::thrift::CXIndex idx, const std::string& source_filename, const std::vector<std::string> & command_line_args, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files, const  ::clang::thrift::u32 options) = 0;
  virtual  ::clang::thrift::u32 clang_defaultSaveOptions(const  ::clang::thrift::CXTranslationUnit unit) = 0;
  virtual  ::clang::thrift::CXSaveError::type clang_saveTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit, const std::string& filename, const  ::clang::thrift::u32 options) = 0;
  virtual void clang_disposeTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit) = 0;
  virtual  ::clang::thrift::u32 clang_defaultReparseOptions(const  ::clang::thrift::CXTranslationUnit unit) = 0;
  virtual int32_t clang_reparseTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files, const  ::clang::thrift::u32 options) = 0;
  virtual void clang_getTUResourceUsageName(std::string& _return, const  ::clang::thrift::CXTUResourceUsageKind::type kind) = 0;
  virtual void clang_getCXTUResourceUsage( ::clang::thrift::CXTUResourceUsage& _return, const  ::clang::thrift::CXTranslationUnit unit) = 0;
  virtual void clang_disposeCXTUResourceUsage(const  ::clang::thrift::CXTUResourceUsage& usage) = 0;
  virtual void clang_getFileName(std::string& _return, const  ::clang::thrift::CXFile file) = 0;
  virtual  ::clang::thrift::t64 clang_getFileTime(const  ::clang::thrift::CXFile file) = 0;
  virtual  ::clang::thrift::u32 clang_isFileMultipleIncludeGuarded(const  ::clang::thrift::CXTranslationUnit unit, const  ::clang::thrift::CXFile file) = 0;
  virtual  ::clang::thrift::CXFile clang_getFile(const  ::clang::thrift::CXTranslationUnit unit, const std::string& filename) = 0;
  virtual void clang_getNullLocation( ::clang::thrift::CXSourceLocation& _return) = 0;
  virtual  ::clang::thrift::u32 clang_equalLocations(const  ::clang::thrift::CXSourceLocation& loc1, const  ::clang::thrift::CXSourceLocation& loc2) = 0;
  virtual void clang_getLocation( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXTranslationUnit tu, const  ::clang::thrift::CXFile file, const  ::clang::thrift::u32 line, const  ::clang::thrift::u32 column) = 0;
  virtual void clang_getLocationForOffset( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXTranslationUnit tu, const  ::clang::thrift::CXFile file, const  ::clang::thrift::u32 offset) = 0;
  virtual void clang_getNullRange( ::clang::thrift::CXSourceRange& _return) = 0;
  virtual void clang_getRange( ::clang::thrift::CXSourceRange& _return, const  ::clang::thrift::CXSourceLocation& sourceBegin, const  ::clang::thrift::CXSourceLocation& sourceEnd) = 0;
  virtual  ::clang::thrift::u32 clang_equalRanges(const  ::clang::thrift::CXSourceRange& range1, const  ::clang::thrift::CXSourceRange& range2) = 0;
  virtual int32_t clang_Range_isNull(const  ::clang::thrift::CXSourceRange& range) = 0;
  virtual void clang_getExpansionLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location) = 0;
  virtual void clang_getPresumedLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location) = 0;
  virtual void clang_getInstantiationLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location) = 0;
  virtual void clang_getSpellingLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location) = 0;
  virtual void clang_getRangeStart( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXSourceRange& range) = 0;
  virtual void clang_getRangeEnd( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXSourceRange& range) = 0;
  virtual  ::clang::thrift::u32 clang_getNumDiagnosticsInSet(const  ::clang::thrift::CXDiagnosticSet diags) = 0;
  virtual  ::clang::thrift::CXDiagnostic clang_getDiagnosticInSet(const  ::clang::thrift::CXDiagnosticSet diags, const  ::clang::thrift::u32 index) = 0;
  virtual  ::clang::thrift::CXDiagnosticSet clang_loadDiagnostics(const std::string& filename) = 0;
  virtual void clang_disposeDiagnosticSet(const  ::clang::thrift::CXDiagnosticSet diagnosticSet) = 0;
  virtual  ::clang::thrift::CXDiagnosticSet clang_getChildDiagnostics(const  ::clang::thrift::CXDiagnostic diagnostic) = 0;
  virtual  ::clang::thrift::u32 clang_getNumDiagnostics(const  ::clang::thrift::CXTranslationUnit unit) = 0;
  virtual  ::clang::thrift::CXDiagnostic clang_getDiagnostic(const  ::clang::thrift::CXTranslationUnit unit, const  ::clang::thrift::u32 index) = 0;
  virtual  ::clang::thrift::CXDiagnosticSet clang_getDiagnosticSetFromTU(const  ::clang::thrift::CXTranslationUnit unit) = 0;
  virtual void clang_disposeDiagnostic(const  ::clang::thrift::CXDiagnostic diagnostic) = 0;
  virtual void clang_formatDiagnostic(std::string& _return, const  ::clang::thrift::CXDiagnostic diagnostic, const  ::clang::thrift::u32 options) = 0;
  virtual  ::clang::thrift::u32 clang_defaultDiagnosticDisplayOptions() = 0;
  virtual  ::clang::thrift::CXDiagnosticSeverity::type clang_getDiagnosticSeverity(const  ::clang::thrift::CXDiagnostic diagnostic) = 0;
  virtual void clang_getDiagnosticLocation( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXDiagnostic diagnostic) = 0;
  virtual void clang_getDiagnosticSpelling(std::string& _return, const  ::clang::thrift::CXDiagnostic diagnostic) = 0;
  virtual void clang_getDiagnosticOption( ::clang::thrift::CXDiagnosticOption& _return, const  ::clang::thrift::CXDiagnostic diagnostic) = 0;
  virtual  ::clang::thrift::u32 clang_getDiagnosticCategory(const  ::clang::thrift::CXDiagnostic diagnostic) = 0;
  virtual void clang_getDiagnosticCategoryName(std::string& _return, const  ::clang::thrift::u32 category) = 0;
  virtual void clang_getDiagnosticCategoryText(std::string& _return, const  ::clang::thrift::CXDiagnostic diagnostic) = 0;
  virtual  ::clang::thrift::u32 clang_getDiagnosticNumRanges(const  ::clang::thrift::CXDiagnostic diagnostic) = 0;
  virtual void clang_getDiagnosticRange( ::clang::thrift::CXSourceRange& _return, const  ::clang::thrift::CXDiagnostic diagnostic, const  ::clang::thrift::u32 range) = 0;
  virtual  ::clang::thrift::u32 clang_getDiagnosticNumFixIts(const  ::clang::thrift::CXDiagnostic diagnostic) = 0;
  virtual void clang_getDiagnosticFixIt( ::clang::thrift::CXDiagnosticFixIt& _return, const  ::clang::thrift::CXDiagnostic Diagnostic, const  ::clang::thrift::u32 FixIt) = 0;
};

class ClangIfFactory {
 public:
  typedef ClangIf Handler;

  virtual ~ClangIfFactory() {}

  virtual ClangIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClangIf* /* handler */) = 0;
};

class ClangIfSingletonFactory : virtual public ClangIfFactory {
 public:
  ClangIfSingletonFactory(const boost::shared_ptr<ClangIf>& iface) : iface_(iface) {}
  virtual ~ClangIfSingletonFactory() {}

  virtual ClangIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClangIf* /* handler */) {}

 protected:
  boost::shared_ptr<ClangIf> iface_;
};

class ClangNull : virtual public ClangIf {
 public:
  virtual ~ClangNull() {}
   ::clang::thrift::CXIndex clang_createIndex(const int32_t /* excludeDeclarationsFromPCH */, const int32_t /* displayDiagnostics */) {
     ::clang::thrift::CXIndex _return = 0;
    return _return;
  }
  void clang_disposeIndex(const  ::clang::thrift::CXIndex /* index */) {
    return;
  }
  void clang_CXIndex_setGlobalOptions(const  ::clang::thrift::CXIndex /* index */, const  ::clang::thrift::CXGlobalOptFlags::type /* options */) {
    return;
  }
   ::clang::thrift::CXGlobalOptFlags::type clang_CXIndex_getGlobalOptions(const  ::clang::thrift::CXIndex /* index */) {
     ::clang::thrift::CXGlobalOptFlags::type _return = ( ::clang::thrift::CXGlobalOptFlags::type)0;
    return _return;
  }
  void clang_getTranslationUnitSpelling(std::string& /* _return */, const  ::clang::thrift::CXTranslationUnit /* unit */) {
    return;
  }
   ::clang::thrift::CXTranslationUnit clang_createTranslationUnitFromSourceFile(const  ::clang::thrift::CXIndex /* idx */, const std::string& /* source_filename */, const std::vector<std::string> & /* clang_command_line_args */, const std::vector< ::clang::thrift::CXUnsavedFile> & /* unsaved_files */) {
     ::clang::thrift::CXTranslationUnit _return = 0;
    return _return;
  }
   ::clang::thrift::CXTranslationUnit clang_createTranslationUnit(const  ::clang::thrift::CXIndex /* idx */, const std::string& /* ast_filename */) {
     ::clang::thrift::CXTranslationUnit _return = 0;
    return _return;
  }
   ::clang::thrift::u32 clang_defaultEditingTranslationUnitOptions() {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
   ::clang::thrift::CXTranslationUnit clang_parseTranslationUnit(const  ::clang::thrift::CXIndex /* idx */, const std::string& /* source_filename */, const std::vector<std::string> & /* command_line_args */, const std::vector< ::clang::thrift::CXUnsavedFile> & /* unsaved_files */, const  ::clang::thrift::u32 /* options */) {
     ::clang::thrift::CXTranslationUnit _return = 0;
    return _return;
  }
   ::clang::thrift::u32 clang_defaultSaveOptions(const  ::clang::thrift::CXTranslationUnit /* unit */) {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
   ::clang::thrift::CXSaveError::type clang_saveTranslationUnit(const  ::clang::thrift::CXTranslationUnit /* unit */, const std::string& /* filename */, const  ::clang::thrift::u32 /* options */) {
     ::clang::thrift::CXSaveError::type _return = ( ::clang::thrift::CXSaveError::type)0;
    return _return;
  }
  void clang_disposeTranslationUnit(const  ::clang::thrift::CXTranslationUnit /* unit */) {
    return;
  }
   ::clang::thrift::u32 clang_defaultReparseOptions(const  ::clang::thrift::CXTranslationUnit /* unit */) {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
  int32_t clang_reparseTranslationUnit(const  ::clang::thrift::CXTranslationUnit /* unit */, const std::vector< ::clang::thrift::CXUnsavedFile> & /* unsaved_files */, const  ::clang::thrift::u32 /* options */) {
    int32_t _return = 0;
    return _return;
  }
  void clang_getTUResourceUsageName(std::string& /* _return */, const  ::clang::thrift::CXTUResourceUsageKind::type /* kind */) {
    return;
  }
  void clang_getCXTUResourceUsage( ::clang::thrift::CXTUResourceUsage& /* _return */, const  ::clang::thrift::CXTranslationUnit /* unit */) {
    return;
  }
  void clang_disposeCXTUResourceUsage(const  ::clang::thrift::CXTUResourceUsage& /* usage */) {
    return;
  }
  void clang_getFileName(std::string& /* _return */, const  ::clang::thrift::CXFile /* file */) {
    return;
  }
   ::clang::thrift::t64 clang_getFileTime(const  ::clang::thrift::CXFile /* file */) {
     ::clang::thrift::t64 _return = 0;
    return _return;
  }
   ::clang::thrift::u32 clang_isFileMultipleIncludeGuarded(const  ::clang::thrift::CXTranslationUnit /* unit */, const  ::clang::thrift::CXFile /* file */) {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
   ::clang::thrift::CXFile clang_getFile(const  ::clang::thrift::CXTranslationUnit /* unit */, const std::string& /* filename */) {
     ::clang::thrift::CXFile _return = 0;
    return _return;
  }
  void clang_getNullLocation( ::clang::thrift::CXSourceLocation& /* _return */) {
    return;
  }
   ::clang::thrift::u32 clang_equalLocations(const  ::clang::thrift::CXSourceLocation& /* loc1 */, const  ::clang::thrift::CXSourceLocation& /* loc2 */) {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
  void clang_getLocation( ::clang::thrift::CXSourceLocation& /* _return */, const  ::clang::thrift::CXTranslationUnit /* tu */, const  ::clang::thrift::CXFile /* file */, const  ::clang::thrift::u32 /* line */, const  ::clang::thrift::u32 /* column */) {
    return;
  }
  void clang_getLocationForOffset( ::clang::thrift::CXSourceLocation& /* _return */, const  ::clang::thrift::CXTranslationUnit /* tu */, const  ::clang::thrift::CXFile /* file */, const  ::clang::thrift::u32 /* offset */) {
    return;
  }
  void clang_getNullRange( ::clang::thrift::CXSourceRange& /* _return */) {
    return;
  }
  void clang_getRange( ::clang::thrift::CXSourceRange& /* _return */, const  ::clang::thrift::CXSourceLocation& /* sourceBegin */, const  ::clang::thrift::CXSourceLocation& /* sourceEnd */) {
    return;
  }
   ::clang::thrift::u32 clang_equalRanges(const  ::clang::thrift::CXSourceRange& /* range1 */, const  ::clang::thrift::CXSourceRange& /* range2 */) {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
  int32_t clang_Range_isNull(const  ::clang::thrift::CXSourceRange& /* range */) {
    int32_t _return = 0;
    return _return;
  }
  void clang_getExpansionLocation( ::clang::thrift::CXSourcePosition& /* _return */, const  ::clang::thrift::CXSourceLocation& /* location */) {
    return;
  }
  void clang_getPresumedLocation( ::clang::thrift::CXSourcePosition& /* _return */, const  ::clang::thrift::CXSourceLocation& /* location */) {
    return;
  }
  void clang_getInstantiationLocation( ::clang::thrift::CXSourcePosition& /* _return */, const  ::clang::thrift::CXSourceLocation& /* location */) {
    return;
  }
  void clang_getSpellingLocation( ::clang::thrift::CXSourcePosition& /* _return */, const  ::clang::thrift::CXSourceLocation& /* location */) {
    return;
  }
  void clang_getRangeStart( ::clang::thrift::CXSourceLocation& /* _return */, const  ::clang::thrift::CXSourceRange& /* range */) {
    return;
  }
  void clang_getRangeEnd( ::clang::thrift::CXSourceLocation& /* _return */, const  ::clang::thrift::CXSourceRange& /* range */) {
    return;
  }
   ::clang::thrift::u32 clang_getNumDiagnosticsInSet(const  ::clang::thrift::CXDiagnosticSet /* diags */) {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
   ::clang::thrift::CXDiagnostic clang_getDiagnosticInSet(const  ::clang::thrift::CXDiagnosticSet /* diags */, const  ::clang::thrift::u32 /* index */) {
     ::clang::thrift::CXDiagnostic _return = 0;
    return _return;
  }
   ::clang::thrift::CXDiagnosticSet clang_loadDiagnostics(const std::string& /* filename */) {
     ::clang::thrift::CXDiagnosticSet _return = 0;
    return _return;
  }
  void clang_disposeDiagnosticSet(const  ::clang::thrift::CXDiagnosticSet /* diagnosticSet */) {
    return;
  }
   ::clang::thrift::CXDiagnosticSet clang_getChildDiagnostics(const  ::clang::thrift::CXDiagnostic /* diagnostic */) {
     ::clang::thrift::CXDiagnosticSet _return = 0;
    return _return;
  }
   ::clang::thrift::u32 clang_getNumDiagnostics(const  ::clang::thrift::CXTranslationUnit /* unit */) {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
   ::clang::thrift::CXDiagnostic clang_getDiagnostic(const  ::clang::thrift::CXTranslationUnit /* unit */, const  ::clang::thrift::u32 /* index */) {
     ::clang::thrift::CXDiagnostic _return = 0;
    return _return;
  }
   ::clang::thrift::CXDiagnosticSet clang_getDiagnosticSetFromTU(const  ::clang::thrift::CXTranslationUnit /* unit */) {
     ::clang::thrift::CXDiagnosticSet _return = 0;
    return _return;
  }
  void clang_disposeDiagnostic(const  ::clang::thrift::CXDiagnostic /* diagnostic */) {
    return;
  }
  void clang_formatDiagnostic(std::string& /* _return */, const  ::clang::thrift::CXDiagnostic /* diagnostic */, const  ::clang::thrift::u32 /* options */) {
    return;
  }
   ::clang::thrift::u32 clang_defaultDiagnosticDisplayOptions() {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
   ::clang::thrift::CXDiagnosticSeverity::type clang_getDiagnosticSeverity(const  ::clang::thrift::CXDiagnostic /* diagnostic */) {
     ::clang::thrift::CXDiagnosticSeverity::type _return = ( ::clang::thrift::CXDiagnosticSeverity::type)0;
    return _return;
  }
  void clang_getDiagnosticLocation( ::clang::thrift::CXSourceLocation& /* _return */, const  ::clang::thrift::CXDiagnostic /* diagnostic */) {
    return;
  }
  void clang_getDiagnosticSpelling(std::string& /* _return */, const  ::clang::thrift::CXDiagnostic /* diagnostic */) {
    return;
  }
  void clang_getDiagnosticOption( ::clang::thrift::CXDiagnosticOption& /* _return */, const  ::clang::thrift::CXDiagnostic /* diagnostic */) {
    return;
  }
   ::clang::thrift::u32 clang_getDiagnosticCategory(const  ::clang::thrift::CXDiagnostic /* diagnostic */) {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
  void clang_getDiagnosticCategoryName(std::string& /* _return */, const  ::clang::thrift::u32 /* category */) {
    return;
  }
  void clang_getDiagnosticCategoryText(std::string& /* _return */, const  ::clang::thrift::CXDiagnostic /* diagnostic */) {
    return;
  }
   ::clang::thrift::u32 clang_getDiagnosticNumRanges(const  ::clang::thrift::CXDiagnostic /* diagnostic */) {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
  void clang_getDiagnosticRange( ::clang::thrift::CXSourceRange& /* _return */, const  ::clang::thrift::CXDiagnostic /* diagnostic */, const  ::clang::thrift::u32 /* range */) {
    return;
  }
   ::clang::thrift::u32 clang_getDiagnosticNumFixIts(const  ::clang::thrift::CXDiagnostic /* diagnostic */) {
     ::clang::thrift::u32 _return = 0;
    return _return;
  }
  void clang_getDiagnosticFixIt( ::clang::thrift::CXDiagnosticFixIt& /* _return */, const  ::clang::thrift::CXDiagnostic /* Diagnostic */, const  ::clang::thrift::u32 /* FixIt */) {
    return;
  }
};

typedef struct _Clang_clang_createIndex_args__isset {
  _Clang_clang_createIndex_args__isset() : excludeDeclarationsFromPCH(false), displayDiagnostics(false) {}
  bool excludeDeclarationsFromPCH;
  bool displayDiagnostics;
} _Clang_clang_createIndex_args__isset;

class Clang_clang_createIndex_args {
 public:

  Clang_clang_createIndex_args() : excludeDeclarationsFromPCH(0), displayDiagnostics(0) {
  }

  virtual ~Clang_clang_createIndex_args() throw() {}

  int32_t excludeDeclarationsFromPCH;
  int32_t displayDiagnostics;

  _Clang_clang_createIndex_args__isset __isset;

  void __set_excludeDeclarationsFromPCH(const int32_t val) {
    excludeDeclarationsFromPCH = val;
  }

  void __set_displayDiagnostics(const int32_t val) {
    displayDiagnostics = val;
  }

  bool operator == (const Clang_clang_createIndex_args & rhs) const
  {
    if (!(excludeDeclarationsFromPCH == rhs.excludeDeclarationsFromPCH))
      return false;
    if (!(displayDiagnostics == rhs.displayDiagnostics))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_createIndex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_createIndex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_createIndex_pargs {
 public:


  virtual ~Clang_clang_createIndex_pargs() throw() {}

  const int32_t* excludeDeclarationsFromPCH;
  const int32_t* displayDiagnostics;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_createIndex_result__isset {
  _Clang_clang_createIndex_result__isset() : success(false) {}
  bool success;
} _Clang_clang_createIndex_result__isset;

class Clang_clang_createIndex_result {
 public:

  Clang_clang_createIndex_result() : success(0) {
  }

  virtual ~Clang_clang_createIndex_result() throw() {}

   ::clang::thrift::CXIndex success;

  _Clang_clang_createIndex_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXIndex val) {
    success = val;
  }

  bool operator == (const Clang_clang_createIndex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_createIndex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_createIndex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_createIndex_presult__isset {
  _Clang_clang_createIndex_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_createIndex_presult__isset;

class Clang_clang_createIndex_presult {
 public:


  virtual ~Clang_clang_createIndex_presult() throw() {}

   ::clang::thrift::CXIndex* success;

  _Clang_clang_createIndex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_disposeIndex_args__isset {
  _Clang_clang_disposeIndex_args__isset() : index(false) {}
  bool index;
} _Clang_clang_disposeIndex_args__isset;

class Clang_clang_disposeIndex_args {
 public:

  Clang_clang_disposeIndex_args() : index(0) {
  }

  virtual ~Clang_clang_disposeIndex_args() throw() {}

   ::clang::thrift::CXIndex index;

  _Clang_clang_disposeIndex_args__isset __isset;

  void __set_index(const  ::clang::thrift::CXIndex val) {
    index = val;
  }

  bool operator == (const Clang_clang_disposeIndex_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_disposeIndex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_disposeIndex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeIndex_pargs {
 public:


  virtual ~Clang_clang_disposeIndex_pargs() throw() {}

  const  ::clang::thrift::CXIndex* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeIndex_result {
 public:

  Clang_clang_disposeIndex_result() {
  }

  virtual ~Clang_clang_disposeIndex_result() throw() {}


  bool operator == (const Clang_clang_disposeIndex_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Clang_clang_disposeIndex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_disposeIndex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeIndex_presult {
 public:


  virtual ~Clang_clang_disposeIndex_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_CXIndex_setGlobalOptions_args__isset {
  _Clang_clang_CXIndex_setGlobalOptions_args__isset() : index(false), options(false) {}
  bool index;
  bool options;
} _Clang_clang_CXIndex_setGlobalOptions_args__isset;

class Clang_clang_CXIndex_setGlobalOptions_args {
 public:

  Clang_clang_CXIndex_setGlobalOptions_args() : index(0), options(( ::clang::thrift::CXGlobalOptFlags::type)0) {
  }

  virtual ~Clang_clang_CXIndex_setGlobalOptions_args() throw() {}

   ::clang::thrift::CXIndex index;
   ::clang::thrift::CXGlobalOptFlags::type options;

  _Clang_clang_CXIndex_setGlobalOptions_args__isset __isset;

  void __set_index(const  ::clang::thrift::CXIndex val) {
    index = val;
  }

  void __set_options(const  ::clang::thrift::CXGlobalOptFlags::type val) {
    options = val;
  }

  bool operator == (const Clang_clang_CXIndex_setGlobalOptions_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_CXIndex_setGlobalOptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_CXIndex_setGlobalOptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_CXIndex_setGlobalOptions_pargs {
 public:


  virtual ~Clang_clang_CXIndex_setGlobalOptions_pargs() throw() {}

  const  ::clang::thrift::CXIndex* index;
  const  ::clang::thrift::CXGlobalOptFlags::type* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_CXIndex_setGlobalOptions_result {
 public:

  Clang_clang_CXIndex_setGlobalOptions_result() {
  }

  virtual ~Clang_clang_CXIndex_setGlobalOptions_result() throw() {}


  bool operator == (const Clang_clang_CXIndex_setGlobalOptions_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Clang_clang_CXIndex_setGlobalOptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_CXIndex_setGlobalOptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_CXIndex_setGlobalOptions_presult {
 public:


  virtual ~Clang_clang_CXIndex_setGlobalOptions_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_CXIndex_getGlobalOptions_args__isset {
  _Clang_clang_CXIndex_getGlobalOptions_args__isset() : index(false) {}
  bool index;
} _Clang_clang_CXIndex_getGlobalOptions_args__isset;

class Clang_clang_CXIndex_getGlobalOptions_args {
 public:

  Clang_clang_CXIndex_getGlobalOptions_args() : index(0) {
  }

  virtual ~Clang_clang_CXIndex_getGlobalOptions_args() throw() {}

   ::clang::thrift::CXIndex index;

  _Clang_clang_CXIndex_getGlobalOptions_args__isset __isset;

  void __set_index(const  ::clang::thrift::CXIndex val) {
    index = val;
  }

  bool operator == (const Clang_clang_CXIndex_getGlobalOptions_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_CXIndex_getGlobalOptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_CXIndex_getGlobalOptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_CXIndex_getGlobalOptions_pargs {
 public:


  virtual ~Clang_clang_CXIndex_getGlobalOptions_pargs() throw() {}

  const  ::clang::thrift::CXIndex* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_CXIndex_getGlobalOptions_result__isset {
  _Clang_clang_CXIndex_getGlobalOptions_result__isset() : success(false) {}
  bool success;
} _Clang_clang_CXIndex_getGlobalOptions_result__isset;

class Clang_clang_CXIndex_getGlobalOptions_result {
 public:

  Clang_clang_CXIndex_getGlobalOptions_result() : success(( ::clang::thrift::CXGlobalOptFlags::type)0) {
  }

  virtual ~Clang_clang_CXIndex_getGlobalOptions_result() throw() {}

   ::clang::thrift::CXGlobalOptFlags::type success;

  _Clang_clang_CXIndex_getGlobalOptions_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXGlobalOptFlags::type val) {
    success = val;
  }

  bool operator == (const Clang_clang_CXIndex_getGlobalOptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_CXIndex_getGlobalOptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_CXIndex_getGlobalOptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_CXIndex_getGlobalOptions_presult__isset {
  _Clang_clang_CXIndex_getGlobalOptions_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_CXIndex_getGlobalOptions_presult__isset;

class Clang_clang_CXIndex_getGlobalOptions_presult {
 public:


  virtual ~Clang_clang_CXIndex_getGlobalOptions_presult() throw() {}

   ::clang::thrift::CXGlobalOptFlags::type* success;

  _Clang_clang_CXIndex_getGlobalOptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getTranslationUnitSpelling_args__isset {
  _Clang_clang_getTranslationUnitSpelling_args__isset() : unit(false) {}
  bool unit;
} _Clang_clang_getTranslationUnitSpelling_args__isset;

class Clang_clang_getTranslationUnitSpelling_args {
 public:

  Clang_clang_getTranslationUnitSpelling_args() : unit(0) {
  }

  virtual ~Clang_clang_getTranslationUnitSpelling_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;

  _Clang_clang_getTranslationUnitSpelling_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  bool operator == (const Clang_clang_getTranslationUnitSpelling_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getTranslationUnitSpelling_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getTranslationUnitSpelling_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getTranslationUnitSpelling_pargs {
 public:


  virtual ~Clang_clang_getTranslationUnitSpelling_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getTranslationUnitSpelling_result__isset {
  _Clang_clang_getTranslationUnitSpelling_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getTranslationUnitSpelling_result__isset;

class Clang_clang_getTranslationUnitSpelling_result {
 public:

  Clang_clang_getTranslationUnitSpelling_result() : success() {
  }

  virtual ~Clang_clang_getTranslationUnitSpelling_result() throw() {}

  std::string success;

  _Clang_clang_getTranslationUnitSpelling_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getTranslationUnitSpelling_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getTranslationUnitSpelling_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getTranslationUnitSpelling_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getTranslationUnitSpelling_presult__isset {
  _Clang_clang_getTranslationUnitSpelling_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getTranslationUnitSpelling_presult__isset;

class Clang_clang_getTranslationUnitSpelling_presult {
 public:


  virtual ~Clang_clang_getTranslationUnitSpelling_presult() throw() {}

  std::string* success;

  _Clang_clang_getTranslationUnitSpelling_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_createTranslationUnitFromSourceFile_args__isset {
  _Clang_clang_createTranslationUnitFromSourceFile_args__isset() : idx(false), source_filename(false), clang_command_line_args(false), unsaved_files(false) {}
  bool idx;
  bool source_filename;
  bool clang_command_line_args;
  bool unsaved_files;
} _Clang_clang_createTranslationUnitFromSourceFile_args__isset;

class Clang_clang_createTranslationUnitFromSourceFile_args {
 public:

  Clang_clang_createTranslationUnitFromSourceFile_args() : idx(0), source_filename() {
  }

  virtual ~Clang_clang_createTranslationUnitFromSourceFile_args() throw() {}

   ::clang::thrift::CXIndex idx;
  std::string source_filename;
  std::vector<std::string>  clang_command_line_args;
  std::vector< ::clang::thrift::CXUnsavedFile>  unsaved_files;

  _Clang_clang_createTranslationUnitFromSourceFile_args__isset __isset;

  void __set_idx(const  ::clang::thrift::CXIndex val) {
    idx = val;
  }

  void __set_source_filename(const std::string& val) {
    source_filename = val;
  }

  void __set_clang_command_line_args(const std::vector<std::string> & val) {
    clang_command_line_args = val;
  }

  void __set_unsaved_files(const std::vector< ::clang::thrift::CXUnsavedFile> & val) {
    unsaved_files = val;
  }

  bool operator == (const Clang_clang_createTranslationUnitFromSourceFile_args & rhs) const
  {
    if (!(idx == rhs.idx))
      return false;
    if (!(source_filename == rhs.source_filename))
      return false;
    if (!(clang_command_line_args == rhs.clang_command_line_args))
      return false;
    if (!(unsaved_files == rhs.unsaved_files))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_createTranslationUnitFromSourceFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_createTranslationUnitFromSourceFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_createTranslationUnitFromSourceFile_pargs {
 public:


  virtual ~Clang_clang_createTranslationUnitFromSourceFile_pargs() throw() {}

  const  ::clang::thrift::CXIndex* idx;
  const std::string* source_filename;
  const std::vector<std::string> * clang_command_line_args;
  const std::vector< ::clang::thrift::CXUnsavedFile> * unsaved_files;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_createTranslationUnitFromSourceFile_result__isset {
  _Clang_clang_createTranslationUnitFromSourceFile_result__isset() : success(false) {}
  bool success;
} _Clang_clang_createTranslationUnitFromSourceFile_result__isset;

class Clang_clang_createTranslationUnitFromSourceFile_result {
 public:

  Clang_clang_createTranslationUnitFromSourceFile_result() : success(0) {
  }

  virtual ~Clang_clang_createTranslationUnitFromSourceFile_result() throw() {}

   ::clang::thrift::CXTranslationUnit success;

  _Clang_clang_createTranslationUnitFromSourceFile_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXTranslationUnit val) {
    success = val;
  }

  bool operator == (const Clang_clang_createTranslationUnitFromSourceFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_createTranslationUnitFromSourceFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_createTranslationUnitFromSourceFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_createTranslationUnitFromSourceFile_presult__isset {
  _Clang_clang_createTranslationUnitFromSourceFile_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_createTranslationUnitFromSourceFile_presult__isset;

class Clang_clang_createTranslationUnitFromSourceFile_presult {
 public:


  virtual ~Clang_clang_createTranslationUnitFromSourceFile_presult() throw() {}

   ::clang::thrift::CXTranslationUnit* success;

  _Clang_clang_createTranslationUnitFromSourceFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_createTranslationUnit_args__isset {
  _Clang_clang_createTranslationUnit_args__isset() : idx(false), ast_filename(false) {}
  bool idx;
  bool ast_filename;
} _Clang_clang_createTranslationUnit_args__isset;

class Clang_clang_createTranslationUnit_args {
 public:

  Clang_clang_createTranslationUnit_args() : idx(0), ast_filename() {
  }

  virtual ~Clang_clang_createTranslationUnit_args() throw() {}

   ::clang::thrift::CXIndex idx;
  std::string ast_filename;

  _Clang_clang_createTranslationUnit_args__isset __isset;

  void __set_idx(const  ::clang::thrift::CXIndex val) {
    idx = val;
  }

  void __set_ast_filename(const std::string& val) {
    ast_filename = val;
  }

  bool operator == (const Clang_clang_createTranslationUnit_args & rhs) const
  {
    if (!(idx == rhs.idx))
      return false;
    if (!(ast_filename == rhs.ast_filename))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_createTranslationUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_createTranslationUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_createTranslationUnit_pargs {
 public:


  virtual ~Clang_clang_createTranslationUnit_pargs() throw() {}

  const  ::clang::thrift::CXIndex* idx;
  const std::string* ast_filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_createTranslationUnit_result__isset {
  _Clang_clang_createTranslationUnit_result__isset() : success(false) {}
  bool success;
} _Clang_clang_createTranslationUnit_result__isset;

class Clang_clang_createTranslationUnit_result {
 public:

  Clang_clang_createTranslationUnit_result() : success(0) {
  }

  virtual ~Clang_clang_createTranslationUnit_result() throw() {}

   ::clang::thrift::CXTranslationUnit success;

  _Clang_clang_createTranslationUnit_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXTranslationUnit val) {
    success = val;
  }

  bool operator == (const Clang_clang_createTranslationUnit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_createTranslationUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_createTranslationUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_createTranslationUnit_presult__isset {
  _Clang_clang_createTranslationUnit_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_createTranslationUnit_presult__isset;

class Clang_clang_createTranslationUnit_presult {
 public:


  virtual ~Clang_clang_createTranslationUnit_presult() throw() {}

   ::clang::thrift::CXTranslationUnit* success;

  _Clang_clang_createTranslationUnit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Clang_clang_defaultEditingTranslationUnitOptions_args {
 public:

  Clang_clang_defaultEditingTranslationUnitOptions_args() {
  }

  virtual ~Clang_clang_defaultEditingTranslationUnitOptions_args() throw() {}


  bool operator == (const Clang_clang_defaultEditingTranslationUnitOptions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Clang_clang_defaultEditingTranslationUnitOptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_defaultEditingTranslationUnitOptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_defaultEditingTranslationUnitOptions_pargs {
 public:


  virtual ~Clang_clang_defaultEditingTranslationUnitOptions_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_defaultEditingTranslationUnitOptions_result__isset {
  _Clang_clang_defaultEditingTranslationUnitOptions_result__isset() : success(false) {}
  bool success;
} _Clang_clang_defaultEditingTranslationUnitOptions_result__isset;

class Clang_clang_defaultEditingTranslationUnitOptions_result {
 public:

  Clang_clang_defaultEditingTranslationUnitOptions_result() : success(0) {
  }

  virtual ~Clang_clang_defaultEditingTranslationUnitOptions_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_defaultEditingTranslationUnitOptions_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_defaultEditingTranslationUnitOptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_defaultEditingTranslationUnitOptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_defaultEditingTranslationUnitOptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_defaultEditingTranslationUnitOptions_presult__isset {
  _Clang_clang_defaultEditingTranslationUnitOptions_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_defaultEditingTranslationUnitOptions_presult__isset;

class Clang_clang_defaultEditingTranslationUnitOptions_presult {
 public:


  virtual ~Clang_clang_defaultEditingTranslationUnitOptions_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_defaultEditingTranslationUnitOptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_parseTranslationUnit_args__isset {
  _Clang_clang_parseTranslationUnit_args__isset() : idx(false), source_filename(false), command_line_args(false), unsaved_files(false), options(false) {}
  bool idx;
  bool source_filename;
  bool command_line_args;
  bool unsaved_files;
  bool options;
} _Clang_clang_parseTranslationUnit_args__isset;

class Clang_clang_parseTranslationUnit_args {
 public:

  Clang_clang_parseTranslationUnit_args() : idx(0), source_filename(), options(0) {
  }

  virtual ~Clang_clang_parseTranslationUnit_args() throw() {}

   ::clang::thrift::CXIndex idx;
  std::string source_filename;
  std::vector<std::string>  command_line_args;
  std::vector< ::clang::thrift::CXUnsavedFile>  unsaved_files;
   ::clang::thrift::u32 options;

  _Clang_clang_parseTranslationUnit_args__isset __isset;

  void __set_idx(const  ::clang::thrift::CXIndex val) {
    idx = val;
  }

  void __set_source_filename(const std::string& val) {
    source_filename = val;
  }

  void __set_command_line_args(const std::vector<std::string> & val) {
    command_line_args = val;
  }

  void __set_unsaved_files(const std::vector< ::clang::thrift::CXUnsavedFile> & val) {
    unsaved_files = val;
  }

  void __set_options(const  ::clang::thrift::u32 val) {
    options = val;
  }

  bool operator == (const Clang_clang_parseTranslationUnit_args & rhs) const
  {
    if (!(idx == rhs.idx))
      return false;
    if (!(source_filename == rhs.source_filename))
      return false;
    if (!(command_line_args == rhs.command_line_args))
      return false;
    if (!(unsaved_files == rhs.unsaved_files))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_parseTranslationUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_parseTranslationUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_parseTranslationUnit_pargs {
 public:


  virtual ~Clang_clang_parseTranslationUnit_pargs() throw() {}

  const  ::clang::thrift::CXIndex* idx;
  const std::string* source_filename;
  const std::vector<std::string> * command_line_args;
  const std::vector< ::clang::thrift::CXUnsavedFile> * unsaved_files;
  const  ::clang::thrift::u32* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_parseTranslationUnit_result__isset {
  _Clang_clang_parseTranslationUnit_result__isset() : success(false) {}
  bool success;
} _Clang_clang_parseTranslationUnit_result__isset;

class Clang_clang_parseTranslationUnit_result {
 public:

  Clang_clang_parseTranslationUnit_result() : success(0) {
  }

  virtual ~Clang_clang_parseTranslationUnit_result() throw() {}

   ::clang::thrift::CXTranslationUnit success;

  _Clang_clang_parseTranslationUnit_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXTranslationUnit val) {
    success = val;
  }

  bool operator == (const Clang_clang_parseTranslationUnit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_parseTranslationUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_parseTranslationUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_parseTranslationUnit_presult__isset {
  _Clang_clang_parseTranslationUnit_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_parseTranslationUnit_presult__isset;

class Clang_clang_parseTranslationUnit_presult {
 public:


  virtual ~Clang_clang_parseTranslationUnit_presult() throw() {}

   ::clang::thrift::CXTranslationUnit* success;

  _Clang_clang_parseTranslationUnit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_defaultSaveOptions_args__isset {
  _Clang_clang_defaultSaveOptions_args__isset() : unit(false) {}
  bool unit;
} _Clang_clang_defaultSaveOptions_args__isset;

class Clang_clang_defaultSaveOptions_args {
 public:

  Clang_clang_defaultSaveOptions_args() : unit(0) {
  }

  virtual ~Clang_clang_defaultSaveOptions_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;

  _Clang_clang_defaultSaveOptions_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  bool operator == (const Clang_clang_defaultSaveOptions_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_defaultSaveOptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_defaultSaveOptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_defaultSaveOptions_pargs {
 public:


  virtual ~Clang_clang_defaultSaveOptions_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_defaultSaveOptions_result__isset {
  _Clang_clang_defaultSaveOptions_result__isset() : success(false) {}
  bool success;
} _Clang_clang_defaultSaveOptions_result__isset;

class Clang_clang_defaultSaveOptions_result {
 public:

  Clang_clang_defaultSaveOptions_result() : success(0) {
  }

  virtual ~Clang_clang_defaultSaveOptions_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_defaultSaveOptions_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_defaultSaveOptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_defaultSaveOptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_defaultSaveOptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_defaultSaveOptions_presult__isset {
  _Clang_clang_defaultSaveOptions_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_defaultSaveOptions_presult__isset;

class Clang_clang_defaultSaveOptions_presult {
 public:


  virtual ~Clang_clang_defaultSaveOptions_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_defaultSaveOptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_saveTranslationUnit_args__isset {
  _Clang_clang_saveTranslationUnit_args__isset() : unit(false), filename(false), options(false) {}
  bool unit;
  bool filename;
  bool options;
} _Clang_clang_saveTranslationUnit_args__isset;

class Clang_clang_saveTranslationUnit_args {
 public:

  Clang_clang_saveTranslationUnit_args() : unit(0), filename(), options(0) {
  }

  virtual ~Clang_clang_saveTranslationUnit_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;
  std::string filename;
   ::clang::thrift::u32 options;

  _Clang_clang_saveTranslationUnit_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  void __set_filename(const std::string& val) {
    filename = val;
  }

  void __set_options(const  ::clang::thrift::u32 val) {
    options = val;
  }

  bool operator == (const Clang_clang_saveTranslationUnit_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    if (!(filename == rhs.filename))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_saveTranslationUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_saveTranslationUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_saveTranslationUnit_pargs {
 public:


  virtual ~Clang_clang_saveTranslationUnit_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;
  const std::string* filename;
  const  ::clang::thrift::u32* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_saveTranslationUnit_result__isset {
  _Clang_clang_saveTranslationUnit_result__isset() : success(false) {}
  bool success;
} _Clang_clang_saveTranslationUnit_result__isset;

class Clang_clang_saveTranslationUnit_result {
 public:

  Clang_clang_saveTranslationUnit_result() : success(( ::clang::thrift::CXSaveError::type)0) {
  }

  virtual ~Clang_clang_saveTranslationUnit_result() throw() {}

   ::clang::thrift::CXSaveError::type success;

  _Clang_clang_saveTranslationUnit_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSaveError::type val) {
    success = val;
  }

  bool operator == (const Clang_clang_saveTranslationUnit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_saveTranslationUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_saveTranslationUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_saveTranslationUnit_presult__isset {
  _Clang_clang_saveTranslationUnit_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_saveTranslationUnit_presult__isset;

class Clang_clang_saveTranslationUnit_presult {
 public:


  virtual ~Clang_clang_saveTranslationUnit_presult() throw() {}

   ::clang::thrift::CXSaveError::type* success;

  _Clang_clang_saveTranslationUnit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_disposeTranslationUnit_args__isset {
  _Clang_clang_disposeTranslationUnit_args__isset() : unit(false) {}
  bool unit;
} _Clang_clang_disposeTranslationUnit_args__isset;

class Clang_clang_disposeTranslationUnit_args {
 public:

  Clang_clang_disposeTranslationUnit_args() : unit(0) {
  }

  virtual ~Clang_clang_disposeTranslationUnit_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;

  _Clang_clang_disposeTranslationUnit_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  bool operator == (const Clang_clang_disposeTranslationUnit_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_disposeTranslationUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_disposeTranslationUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeTranslationUnit_pargs {
 public:


  virtual ~Clang_clang_disposeTranslationUnit_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeTranslationUnit_result {
 public:

  Clang_clang_disposeTranslationUnit_result() {
  }

  virtual ~Clang_clang_disposeTranslationUnit_result() throw() {}


  bool operator == (const Clang_clang_disposeTranslationUnit_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Clang_clang_disposeTranslationUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_disposeTranslationUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeTranslationUnit_presult {
 public:


  virtual ~Clang_clang_disposeTranslationUnit_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_defaultReparseOptions_args__isset {
  _Clang_clang_defaultReparseOptions_args__isset() : unit(false) {}
  bool unit;
} _Clang_clang_defaultReparseOptions_args__isset;

class Clang_clang_defaultReparseOptions_args {
 public:

  Clang_clang_defaultReparseOptions_args() : unit(0) {
  }

  virtual ~Clang_clang_defaultReparseOptions_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;

  _Clang_clang_defaultReparseOptions_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  bool operator == (const Clang_clang_defaultReparseOptions_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_defaultReparseOptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_defaultReparseOptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_defaultReparseOptions_pargs {
 public:


  virtual ~Clang_clang_defaultReparseOptions_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_defaultReparseOptions_result__isset {
  _Clang_clang_defaultReparseOptions_result__isset() : success(false) {}
  bool success;
} _Clang_clang_defaultReparseOptions_result__isset;

class Clang_clang_defaultReparseOptions_result {
 public:

  Clang_clang_defaultReparseOptions_result() : success(0) {
  }

  virtual ~Clang_clang_defaultReparseOptions_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_defaultReparseOptions_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_defaultReparseOptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_defaultReparseOptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_defaultReparseOptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_defaultReparseOptions_presult__isset {
  _Clang_clang_defaultReparseOptions_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_defaultReparseOptions_presult__isset;

class Clang_clang_defaultReparseOptions_presult {
 public:


  virtual ~Clang_clang_defaultReparseOptions_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_defaultReparseOptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_reparseTranslationUnit_args__isset {
  _Clang_clang_reparseTranslationUnit_args__isset() : unit(false), unsaved_files(false), options(false) {}
  bool unit;
  bool unsaved_files;
  bool options;
} _Clang_clang_reparseTranslationUnit_args__isset;

class Clang_clang_reparseTranslationUnit_args {
 public:

  Clang_clang_reparseTranslationUnit_args() : unit(0), options(0) {
  }

  virtual ~Clang_clang_reparseTranslationUnit_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;
  std::vector< ::clang::thrift::CXUnsavedFile>  unsaved_files;
   ::clang::thrift::u32 options;

  _Clang_clang_reparseTranslationUnit_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  void __set_unsaved_files(const std::vector< ::clang::thrift::CXUnsavedFile> & val) {
    unsaved_files = val;
  }

  void __set_options(const  ::clang::thrift::u32 val) {
    options = val;
  }

  bool operator == (const Clang_clang_reparseTranslationUnit_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    if (!(unsaved_files == rhs.unsaved_files))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_reparseTranslationUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_reparseTranslationUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_reparseTranslationUnit_pargs {
 public:


  virtual ~Clang_clang_reparseTranslationUnit_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;
  const std::vector< ::clang::thrift::CXUnsavedFile> * unsaved_files;
  const  ::clang::thrift::u32* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_reparseTranslationUnit_result__isset {
  _Clang_clang_reparseTranslationUnit_result__isset() : success(false) {}
  bool success;
} _Clang_clang_reparseTranslationUnit_result__isset;

class Clang_clang_reparseTranslationUnit_result {
 public:

  Clang_clang_reparseTranslationUnit_result() : success(0) {
  }

  virtual ~Clang_clang_reparseTranslationUnit_result() throw() {}

  int32_t success;

  _Clang_clang_reparseTranslationUnit_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Clang_clang_reparseTranslationUnit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_reparseTranslationUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_reparseTranslationUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_reparseTranslationUnit_presult__isset {
  _Clang_clang_reparseTranslationUnit_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_reparseTranslationUnit_presult__isset;

class Clang_clang_reparseTranslationUnit_presult {
 public:


  virtual ~Clang_clang_reparseTranslationUnit_presult() throw() {}

  int32_t* success;

  _Clang_clang_reparseTranslationUnit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getTUResourceUsageName_args__isset {
  _Clang_clang_getTUResourceUsageName_args__isset() : kind(false) {}
  bool kind;
} _Clang_clang_getTUResourceUsageName_args__isset;

class Clang_clang_getTUResourceUsageName_args {
 public:

  Clang_clang_getTUResourceUsageName_args() : kind(( ::clang::thrift::CXTUResourceUsageKind::type)0) {
  }

  virtual ~Clang_clang_getTUResourceUsageName_args() throw() {}

   ::clang::thrift::CXTUResourceUsageKind::type kind;

  _Clang_clang_getTUResourceUsageName_args__isset __isset;

  void __set_kind(const  ::clang::thrift::CXTUResourceUsageKind::type val) {
    kind = val;
  }

  bool operator == (const Clang_clang_getTUResourceUsageName_args & rhs) const
  {
    if (!(kind == rhs.kind))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getTUResourceUsageName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getTUResourceUsageName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getTUResourceUsageName_pargs {
 public:


  virtual ~Clang_clang_getTUResourceUsageName_pargs() throw() {}

  const  ::clang::thrift::CXTUResourceUsageKind::type* kind;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getTUResourceUsageName_result__isset {
  _Clang_clang_getTUResourceUsageName_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getTUResourceUsageName_result__isset;

class Clang_clang_getTUResourceUsageName_result {
 public:

  Clang_clang_getTUResourceUsageName_result() : success() {
  }

  virtual ~Clang_clang_getTUResourceUsageName_result() throw() {}

  std::string success;

  _Clang_clang_getTUResourceUsageName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getTUResourceUsageName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getTUResourceUsageName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getTUResourceUsageName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getTUResourceUsageName_presult__isset {
  _Clang_clang_getTUResourceUsageName_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getTUResourceUsageName_presult__isset;

class Clang_clang_getTUResourceUsageName_presult {
 public:


  virtual ~Clang_clang_getTUResourceUsageName_presult() throw() {}

  std::string* success;

  _Clang_clang_getTUResourceUsageName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getCXTUResourceUsage_args__isset {
  _Clang_clang_getCXTUResourceUsage_args__isset() : unit(false) {}
  bool unit;
} _Clang_clang_getCXTUResourceUsage_args__isset;

class Clang_clang_getCXTUResourceUsage_args {
 public:

  Clang_clang_getCXTUResourceUsage_args() : unit(0) {
  }

  virtual ~Clang_clang_getCXTUResourceUsage_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;

  _Clang_clang_getCXTUResourceUsage_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  bool operator == (const Clang_clang_getCXTUResourceUsage_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getCXTUResourceUsage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getCXTUResourceUsage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getCXTUResourceUsage_pargs {
 public:


  virtual ~Clang_clang_getCXTUResourceUsage_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getCXTUResourceUsage_result__isset {
  _Clang_clang_getCXTUResourceUsage_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getCXTUResourceUsage_result__isset;

class Clang_clang_getCXTUResourceUsage_result {
 public:

  Clang_clang_getCXTUResourceUsage_result() {
  }

  virtual ~Clang_clang_getCXTUResourceUsage_result() throw() {}

   ::clang::thrift::CXTUResourceUsage success;

  _Clang_clang_getCXTUResourceUsage_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXTUResourceUsage& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getCXTUResourceUsage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getCXTUResourceUsage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getCXTUResourceUsage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getCXTUResourceUsage_presult__isset {
  _Clang_clang_getCXTUResourceUsage_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getCXTUResourceUsage_presult__isset;

class Clang_clang_getCXTUResourceUsage_presult {
 public:


  virtual ~Clang_clang_getCXTUResourceUsage_presult() throw() {}

   ::clang::thrift::CXTUResourceUsage* success;

  _Clang_clang_getCXTUResourceUsage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_disposeCXTUResourceUsage_args__isset {
  _Clang_clang_disposeCXTUResourceUsage_args__isset() : usage(false) {}
  bool usage;
} _Clang_clang_disposeCXTUResourceUsage_args__isset;

class Clang_clang_disposeCXTUResourceUsage_args {
 public:

  Clang_clang_disposeCXTUResourceUsage_args() {
  }

  virtual ~Clang_clang_disposeCXTUResourceUsage_args() throw() {}

   ::clang::thrift::CXTUResourceUsage usage;

  _Clang_clang_disposeCXTUResourceUsage_args__isset __isset;

  void __set_usage(const  ::clang::thrift::CXTUResourceUsage& val) {
    usage = val;
  }

  bool operator == (const Clang_clang_disposeCXTUResourceUsage_args & rhs) const
  {
    if (!(usage == rhs.usage))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_disposeCXTUResourceUsage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_disposeCXTUResourceUsage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeCXTUResourceUsage_pargs {
 public:


  virtual ~Clang_clang_disposeCXTUResourceUsage_pargs() throw() {}

  const  ::clang::thrift::CXTUResourceUsage* usage;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeCXTUResourceUsage_result {
 public:

  Clang_clang_disposeCXTUResourceUsage_result() {
  }

  virtual ~Clang_clang_disposeCXTUResourceUsage_result() throw() {}


  bool operator == (const Clang_clang_disposeCXTUResourceUsage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Clang_clang_disposeCXTUResourceUsage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_disposeCXTUResourceUsage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeCXTUResourceUsage_presult {
 public:


  virtual ~Clang_clang_disposeCXTUResourceUsage_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getFileName_args__isset {
  _Clang_clang_getFileName_args__isset() : file(false) {}
  bool file;
} _Clang_clang_getFileName_args__isset;

class Clang_clang_getFileName_args {
 public:

  Clang_clang_getFileName_args() : file(0) {
  }

  virtual ~Clang_clang_getFileName_args() throw() {}

   ::clang::thrift::CXFile file;

  _Clang_clang_getFileName_args__isset __isset;

  void __set_file(const  ::clang::thrift::CXFile val) {
    file = val;
  }

  bool operator == (const Clang_clang_getFileName_args & rhs) const
  {
    if (!(file == rhs.file))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getFileName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getFileName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getFileName_pargs {
 public:


  virtual ~Clang_clang_getFileName_pargs() throw() {}

  const  ::clang::thrift::CXFile* file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getFileName_result__isset {
  _Clang_clang_getFileName_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getFileName_result__isset;

class Clang_clang_getFileName_result {
 public:

  Clang_clang_getFileName_result() : success() {
  }

  virtual ~Clang_clang_getFileName_result() throw() {}

  std::string success;

  _Clang_clang_getFileName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getFileName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getFileName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getFileName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getFileName_presult__isset {
  _Clang_clang_getFileName_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getFileName_presult__isset;

class Clang_clang_getFileName_presult {
 public:


  virtual ~Clang_clang_getFileName_presult() throw() {}

  std::string* success;

  _Clang_clang_getFileName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getFileTime_args__isset {
  _Clang_clang_getFileTime_args__isset() : file(false) {}
  bool file;
} _Clang_clang_getFileTime_args__isset;

class Clang_clang_getFileTime_args {
 public:

  Clang_clang_getFileTime_args() : file(0) {
  }

  virtual ~Clang_clang_getFileTime_args() throw() {}

   ::clang::thrift::CXFile file;

  _Clang_clang_getFileTime_args__isset __isset;

  void __set_file(const  ::clang::thrift::CXFile val) {
    file = val;
  }

  bool operator == (const Clang_clang_getFileTime_args & rhs) const
  {
    if (!(file == rhs.file))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getFileTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getFileTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getFileTime_pargs {
 public:


  virtual ~Clang_clang_getFileTime_pargs() throw() {}

  const  ::clang::thrift::CXFile* file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getFileTime_result__isset {
  _Clang_clang_getFileTime_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getFileTime_result__isset;

class Clang_clang_getFileTime_result {
 public:

  Clang_clang_getFileTime_result() : success(0) {
  }

  virtual ~Clang_clang_getFileTime_result() throw() {}

   ::clang::thrift::t64 success;

  _Clang_clang_getFileTime_result__isset __isset;

  void __set_success(const  ::clang::thrift::t64 val) {
    success = val;
  }

  bool operator == (const Clang_clang_getFileTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getFileTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getFileTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getFileTime_presult__isset {
  _Clang_clang_getFileTime_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getFileTime_presult__isset;

class Clang_clang_getFileTime_presult {
 public:


  virtual ~Clang_clang_getFileTime_presult() throw() {}

   ::clang::thrift::t64* success;

  _Clang_clang_getFileTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_isFileMultipleIncludeGuarded_args__isset {
  _Clang_clang_isFileMultipleIncludeGuarded_args__isset() : unit(false), file(false) {}
  bool unit;
  bool file;
} _Clang_clang_isFileMultipleIncludeGuarded_args__isset;

class Clang_clang_isFileMultipleIncludeGuarded_args {
 public:

  Clang_clang_isFileMultipleIncludeGuarded_args() : unit(0), file(0) {
  }

  virtual ~Clang_clang_isFileMultipleIncludeGuarded_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;
   ::clang::thrift::CXFile file;

  _Clang_clang_isFileMultipleIncludeGuarded_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  void __set_file(const  ::clang::thrift::CXFile val) {
    file = val;
  }

  bool operator == (const Clang_clang_isFileMultipleIncludeGuarded_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    if (!(file == rhs.file))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_isFileMultipleIncludeGuarded_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_isFileMultipleIncludeGuarded_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_isFileMultipleIncludeGuarded_pargs {
 public:


  virtual ~Clang_clang_isFileMultipleIncludeGuarded_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;
  const  ::clang::thrift::CXFile* file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_isFileMultipleIncludeGuarded_result__isset {
  _Clang_clang_isFileMultipleIncludeGuarded_result__isset() : success(false) {}
  bool success;
} _Clang_clang_isFileMultipleIncludeGuarded_result__isset;

class Clang_clang_isFileMultipleIncludeGuarded_result {
 public:

  Clang_clang_isFileMultipleIncludeGuarded_result() : success(0) {
  }

  virtual ~Clang_clang_isFileMultipleIncludeGuarded_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_isFileMultipleIncludeGuarded_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_isFileMultipleIncludeGuarded_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_isFileMultipleIncludeGuarded_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_isFileMultipleIncludeGuarded_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_isFileMultipleIncludeGuarded_presult__isset {
  _Clang_clang_isFileMultipleIncludeGuarded_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_isFileMultipleIncludeGuarded_presult__isset;

class Clang_clang_isFileMultipleIncludeGuarded_presult {
 public:


  virtual ~Clang_clang_isFileMultipleIncludeGuarded_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_isFileMultipleIncludeGuarded_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getFile_args__isset {
  _Clang_clang_getFile_args__isset() : unit(false), filename(false) {}
  bool unit;
  bool filename;
} _Clang_clang_getFile_args__isset;

class Clang_clang_getFile_args {
 public:

  Clang_clang_getFile_args() : unit(0), filename() {
  }

  virtual ~Clang_clang_getFile_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;
  std::string filename;

  _Clang_clang_getFile_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  void __set_filename(const std::string& val) {
    filename = val;
  }

  bool operator == (const Clang_clang_getFile_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getFile_pargs {
 public:


  virtual ~Clang_clang_getFile_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;
  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getFile_result__isset {
  _Clang_clang_getFile_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getFile_result__isset;

class Clang_clang_getFile_result {
 public:

  Clang_clang_getFile_result() : success(0) {
  }

  virtual ~Clang_clang_getFile_result() throw() {}

   ::clang::thrift::CXFile success;

  _Clang_clang_getFile_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXFile val) {
    success = val;
  }

  bool operator == (const Clang_clang_getFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getFile_presult__isset {
  _Clang_clang_getFile_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getFile_presult__isset;

class Clang_clang_getFile_presult {
 public:


  virtual ~Clang_clang_getFile_presult() throw() {}

   ::clang::thrift::CXFile* success;

  _Clang_clang_getFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Clang_clang_getNullLocation_args {
 public:

  Clang_clang_getNullLocation_args() {
  }

  virtual ~Clang_clang_getNullLocation_args() throw() {}


  bool operator == (const Clang_clang_getNullLocation_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Clang_clang_getNullLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getNullLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getNullLocation_pargs {
 public:


  virtual ~Clang_clang_getNullLocation_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getNullLocation_result__isset {
  _Clang_clang_getNullLocation_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getNullLocation_result__isset;

class Clang_clang_getNullLocation_result {
 public:

  Clang_clang_getNullLocation_result() {
  }

  virtual ~Clang_clang_getNullLocation_result() throw() {}

   ::clang::thrift::CXSourceLocation success;

  _Clang_clang_getNullLocation_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourceLocation& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getNullLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getNullLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getNullLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getNullLocation_presult__isset {
  _Clang_clang_getNullLocation_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getNullLocation_presult__isset;

class Clang_clang_getNullLocation_presult {
 public:


  virtual ~Clang_clang_getNullLocation_presult() throw() {}

   ::clang::thrift::CXSourceLocation* success;

  _Clang_clang_getNullLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_equalLocations_args__isset {
  _Clang_clang_equalLocations_args__isset() : loc1(false), loc2(false) {}
  bool loc1;
  bool loc2;
} _Clang_clang_equalLocations_args__isset;

class Clang_clang_equalLocations_args {
 public:

  Clang_clang_equalLocations_args() {
  }

  virtual ~Clang_clang_equalLocations_args() throw() {}

   ::clang::thrift::CXSourceLocation loc1;
   ::clang::thrift::CXSourceLocation loc2;

  _Clang_clang_equalLocations_args__isset __isset;

  void __set_loc1(const  ::clang::thrift::CXSourceLocation& val) {
    loc1 = val;
  }

  void __set_loc2(const  ::clang::thrift::CXSourceLocation& val) {
    loc2 = val;
  }

  bool operator == (const Clang_clang_equalLocations_args & rhs) const
  {
    if (!(loc1 == rhs.loc1))
      return false;
    if (!(loc2 == rhs.loc2))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_equalLocations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_equalLocations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_equalLocations_pargs {
 public:


  virtual ~Clang_clang_equalLocations_pargs() throw() {}

  const  ::clang::thrift::CXSourceLocation* loc1;
  const  ::clang::thrift::CXSourceLocation* loc2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_equalLocations_result__isset {
  _Clang_clang_equalLocations_result__isset() : success(false) {}
  bool success;
} _Clang_clang_equalLocations_result__isset;

class Clang_clang_equalLocations_result {
 public:

  Clang_clang_equalLocations_result() : success(0) {
  }

  virtual ~Clang_clang_equalLocations_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_equalLocations_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_equalLocations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_equalLocations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_equalLocations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_equalLocations_presult__isset {
  _Clang_clang_equalLocations_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_equalLocations_presult__isset;

class Clang_clang_equalLocations_presult {
 public:


  virtual ~Clang_clang_equalLocations_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_equalLocations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getLocation_args__isset {
  _Clang_clang_getLocation_args__isset() : tu(false), file(false), line(false), column(false) {}
  bool tu;
  bool file;
  bool line;
  bool column;
} _Clang_clang_getLocation_args__isset;

class Clang_clang_getLocation_args {
 public:

  Clang_clang_getLocation_args() : tu(0), file(0), line(0), column(0) {
  }

  virtual ~Clang_clang_getLocation_args() throw() {}

   ::clang::thrift::CXTranslationUnit tu;
   ::clang::thrift::CXFile file;
   ::clang::thrift::u32 line;
   ::clang::thrift::u32 column;

  _Clang_clang_getLocation_args__isset __isset;

  void __set_tu(const  ::clang::thrift::CXTranslationUnit val) {
    tu = val;
  }

  void __set_file(const  ::clang::thrift::CXFile val) {
    file = val;
  }

  void __set_line(const  ::clang::thrift::u32 val) {
    line = val;
  }

  void __set_column(const  ::clang::thrift::u32 val) {
    column = val;
  }

  bool operator == (const Clang_clang_getLocation_args & rhs) const
  {
    if (!(tu == rhs.tu))
      return false;
    if (!(file == rhs.file))
      return false;
    if (!(line == rhs.line))
      return false;
    if (!(column == rhs.column))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getLocation_pargs {
 public:


  virtual ~Clang_clang_getLocation_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* tu;
  const  ::clang::thrift::CXFile* file;
  const  ::clang::thrift::u32* line;
  const  ::clang::thrift::u32* column;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getLocation_result__isset {
  _Clang_clang_getLocation_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getLocation_result__isset;

class Clang_clang_getLocation_result {
 public:

  Clang_clang_getLocation_result() {
  }

  virtual ~Clang_clang_getLocation_result() throw() {}

   ::clang::thrift::CXSourceLocation success;

  _Clang_clang_getLocation_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourceLocation& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getLocation_presult__isset {
  _Clang_clang_getLocation_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getLocation_presult__isset;

class Clang_clang_getLocation_presult {
 public:


  virtual ~Clang_clang_getLocation_presult() throw() {}

   ::clang::thrift::CXSourceLocation* success;

  _Clang_clang_getLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getLocationForOffset_args__isset {
  _Clang_clang_getLocationForOffset_args__isset() : tu(false), file(false), offset(false) {}
  bool tu;
  bool file;
  bool offset;
} _Clang_clang_getLocationForOffset_args__isset;

class Clang_clang_getLocationForOffset_args {
 public:

  Clang_clang_getLocationForOffset_args() : tu(0), file(0), offset(0) {
  }

  virtual ~Clang_clang_getLocationForOffset_args() throw() {}

   ::clang::thrift::CXTranslationUnit tu;
   ::clang::thrift::CXFile file;
   ::clang::thrift::u32 offset;

  _Clang_clang_getLocationForOffset_args__isset __isset;

  void __set_tu(const  ::clang::thrift::CXTranslationUnit val) {
    tu = val;
  }

  void __set_file(const  ::clang::thrift::CXFile val) {
    file = val;
  }

  void __set_offset(const  ::clang::thrift::u32 val) {
    offset = val;
  }

  bool operator == (const Clang_clang_getLocationForOffset_args & rhs) const
  {
    if (!(tu == rhs.tu))
      return false;
    if (!(file == rhs.file))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getLocationForOffset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getLocationForOffset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getLocationForOffset_pargs {
 public:


  virtual ~Clang_clang_getLocationForOffset_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* tu;
  const  ::clang::thrift::CXFile* file;
  const  ::clang::thrift::u32* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getLocationForOffset_result__isset {
  _Clang_clang_getLocationForOffset_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getLocationForOffset_result__isset;

class Clang_clang_getLocationForOffset_result {
 public:

  Clang_clang_getLocationForOffset_result() {
  }

  virtual ~Clang_clang_getLocationForOffset_result() throw() {}

   ::clang::thrift::CXSourceLocation success;

  _Clang_clang_getLocationForOffset_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourceLocation& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getLocationForOffset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getLocationForOffset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getLocationForOffset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getLocationForOffset_presult__isset {
  _Clang_clang_getLocationForOffset_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getLocationForOffset_presult__isset;

class Clang_clang_getLocationForOffset_presult {
 public:


  virtual ~Clang_clang_getLocationForOffset_presult() throw() {}

   ::clang::thrift::CXSourceLocation* success;

  _Clang_clang_getLocationForOffset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Clang_clang_getNullRange_args {
 public:

  Clang_clang_getNullRange_args() {
  }

  virtual ~Clang_clang_getNullRange_args() throw() {}


  bool operator == (const Clang_clang_getNullRange_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Clang_clang_getNullRange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getNullRange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getNullRange_pargs {
 public:


  virtual ~Clang_clang_getNullRange_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getNullRange_result__isset {
  _Clang_clang_getNullRange_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getNullRange_result__isset;

class Clang_clang_getNullRange_result {
 public:

  Clang_clang_getNullRange_result() {
  }

  virtual ~Clang_clang_getNullRange_result() throw() {}

   ::clang::thrift::CXSourceRange success;

  _Clang_clang_getNullRange_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourceRange& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getNullRange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getNullRange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getNullRange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getNullRange_presult__isset {
  _Clang_clang_getNullRange_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getNullRange_presult__isset;

class Clang_clang_getNullRange_presult {
 public:


  virtual ~Clang_clang_getNullRange_presult() throw() {}

   ::clang::thrift::CXSourceRange* success;

  _Clang_clang_getNullRange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getRange_args__isset {
  _Clang_clang_getRange_args__isset() : sourceBegin(false), sourceEnd(false) {}
  bool sourceBegin;
  bool sourceEnd;
} _Clang_clang_getRange_args__isset;

class Clang_clang_getRange_args {
 public:

  Clang_clang_getRange_args() {
  }

  virtual ~Clang_clang_getRange_args() throw() {}

   ::clang::thrift::CXSourceLocation sourceBegin;
   ::clang::thrift::CXSourceLocation sourceEnd;

  _Clang_clang_getRange_args__isset __isset;

  void __set_sourceBegin(const  ::clang::thrift::CXSourceLocation& val) {
    sourceBegin = val;
  }

  void __set_sourceEnd(const  ::clang::thrift::CXSourceLocation& val) {
    sourceEnd = val;
  }

  bool operator == (const Clang_clang_getRange_args & rhs) const
  {
    if (!(sourceBegin == rhs.sourceBegin))
      return false;
    if (!(sourceEnd == rhs.sourceEnd))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getRange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getRange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getRange_pargs {
 public:


  virtual ~Clang_clang_getRange_pargs() throw() {}

  const  ::clang::thrift::CXSourceLocation* sourceBegin;
  const  ::clang::thrift::CXSourceLocation* sourceEnd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getRange_result__isset {
  _Clang_clang_getRange_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getRange_result__isset;

class Clang_clang_getRange_result {
 public:

  Clang_clang_getRange_result() {
  }

  virtual ~Clang_clang_getRange_result() throw() {}

   ::clang::thrift::CXSourceRange success;

  _Clang_clang_getRange_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourceRange& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getRange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getRange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getRange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getRange_presult__isset {
  _Clang_clang_getRange_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getRange_presult__isset;

class Clang_clang_getRange_presult {
 public:


  virtual ~Clang_clang_getRange_presult() throw() {}

   ::clang::thrift::CXSourceRange* success;

  _Clang_clang_getRange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_equalRanges_args__isset {
  _Clang_clang_equalRanges_args__isset() : range1(false), range2(false) {}
  bool range1;
  bool range2;
} _Clang_clang_equalRanges_args__isset;

class Clang_clang_equalRanges_args {
 public:

  Clang_clang_equalRanges_args() {
  }

  virtual ~Clang_clang_equalRanges_args() throw() {}

   ::clang::thrift::CXSourceRange range1;
   ::clang::thrift::CXSourceRange range2;

  _Clang_clang_equalRanges_args__isset __isset;

  void __set_range1(const  ::clang::thrift::CXSourceRange& val) {
    range1 = val;
  }

  void __set_range2(const  ::clang::thrift::CXSourceRange& val) {
    range2 = val;
  }

  bool operator == (const Clang_clang_equalRanges_args & rhs) const
  {
    if (!(range1 == rhs.range1))
      return false;
    if (!(range2 == rhs.range2))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_equalRanges_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_equalRanges_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_equalRanges_pargs {
 public:


  virtual ~Clang_clang_equalRanges_pargs() throw() {}

  const  ::clang::thrift::CXSourceRange* range1;
  const  ::clang::thrift::CXSourceRange* range2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_equalRanges_result__isset {
  _Clang_clang_equalRanges_result__isset() : success(false) {}
  bool success;
} _Clang_clang_equalRanges_result__isset;

class Clang_clang_equalRanges_result {
 public:

  Clang_clang_equalRanges_result() : success(0) {
  }

  virtual ~Clang_clang_equalRanges_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_equalRanges_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_equalRanges_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_equalRanges_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_equalRanges_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_equalRanges_presult__isset {
  _Clang_clang_equalRanges_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_equalRanges_presult__isset;

class Clang_clang_equalRanges_presult {
 public:


  virtual ~Clang_clang_equalRanges_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_equalRanges_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_Range_isNull_args__isset {
  _Clang_clang_Range_isNull_args__isset() : range(false) {}
  bool range;
} _Clang_clang_Range_isNull_args__isset;

class Clang_clang_Range_isNull_args {
 public:

  Clang_clang_Range_isNull_args() {
  }

  virtual ~Clang_clang_Range_isNull_args() throw() {}

   ::clang::thrift::CXSourceRange range;

  _Clang_clang_Range_isNull_args__isset __isset;

  void __set_range(const  ::clang::thrift::CXSourceRange& val) {
    range = val;
  }

  bool operator == (const Clang_clang_Range_isNull_args & rhs) const
  {
    if (!(range == rhs.range))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_Range_isNull_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_Range_isNull_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_Range_isNull_pargs {
 public:


  virtual ~Clang_clang_Range_isNull_pargs() throw() {}

  const  ::clang::thrift::CXSourceRange* range;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_Range_isNull_result__isset {
  _Clang_clang_Range_isNull_result__isset() : success(false) {}
  bool success;
} _Clang_clang_Range_isNull_result__isset;

class Clang_clang_Range_isNull_result {
 public:

  Clang_clang_Range_isNull_result() : success(0) {
  }

  virtual ~Clang_clang_Range_isNull_result() throw() {}

  int32_t success;

  _Clang_clang_Range_isNull_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Clang_clang_Range_isNull_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_Range_isNull_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_Range_isNull_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_Range_isNull_presult__isset {
  _Clang_clang_Range_isNull_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_Range_isNull_presult__isset;

class Clang_clang_Range_isNull_presult {
 public:


  virtual ~Clang_clang_Range_isNull_presult() throw() {}

  int32_t* success;

  _Clang_clang_Range_isNull_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getExpansionLocation_args__isset {
  _Clang_clang_getExpansionLocation_args__isset() : location(false) {}
  bool location;
} _Clang_clang_getExpansionLocation_args__isset;

class Clang_clang_getExpansionLocation_args {
 public:

  Clang_clang_getExpansionLocation_args() {
  }

  virtual ~Clang_clang_getExpansionLocation_args() throw() {}

   ::clang::thrift::CXSourceLocation location;

  _Clang_clang_getExpansionLocation_args__isset __isset;

  void __set_location(const  ::clang::thrift::CXSourceLocation& val) {
    location = val;
  }

  bool operator == (const Clang_clang_getExpansionLocation_args & rhs) const
  {
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getExpansionLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getExpansionLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getExpansionLocation_pargs {
 public:


  virtual ~Clang_clang_getExpansionLocation_pargs() throw() {}

  const  ::clang::thrift::CXSourceLocation* location;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getExpansionLocation_result__isset {
  _Clang_clang_getExpansionLocation_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getExpansionLocation_result__isset;

class Clang_clang_getExpansionLocation_result {
 public:

  Clang_clang_getExpansionLocation_result() {
  }

  virtual ~Clang_clang_getExpansionLocation_result() throw() {}

   ::clang::thrift::CXSourcePosition success;

  _Clang_clang_getExpansionLocation_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourcePosition& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getExpansionLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getExpansionLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getExpansionLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getExpansionLocation_presult__isset {
  _Clang_clang_getExpansionLocation_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getExpansionLocation_presult__isset;

class Clang_clang_getExpansionLocation_presult {
 public:


  virtual ~Clang_clang_getExpansionLocation_presult() throw() {}

   ::clang::thrift::CXSourcePosition* success;

  _Clang_clang_getExpansionLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getPresumedLocation_args__isset {
  _Clang_clang_getPresumedLocation_args__isset() : location(false) {}
  bool location;
} _Clang_clang_getPresumedLocation_args__isset;

class Clang_clang_getPresumedLocation_args {
 public:

  Clang_clang_getPresumedLocation_args() {
  }

  virtual ~Clang_clang_getPresumedLocation_args() throw() {}

   ::clang::thrift::CXSourceLocation location;

  _Clang_clang_getPresumedLocation_args__isset __isset;

  void __set_location(const  ::clang::thrift::CXSourceLocation& val) {
    location = val;
  }

  bool operator == (const Clang_clang_getPresumedLocation_args & rhs) const
  {
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getPresumedLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getPresumedLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getPresumedLocation_pargs {
 public:


  virtual ~Clang_clang_getPresumedLocation_pargs() throw() {}

  const  ::clang::thrift::CXSourceLocation* location;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getPresumedLocation_result__isset {
  _Clang_clang_getPresumedLocation_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getPresumedLocation_result__isset;

class Clang_clang_getPresumedLocation_result {
 public:

  Clang_clang_getPresumedLocation_result() {
  }

  virtual ~Clang_clang_getPresumedLocation_result() throw() {}

   ::clang::thrift::CXSourcePosition success;

  _Clang_clang_getPresumedLocation_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourcePosition& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getPresumedLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getPresumedLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getPresumedLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getPresumedLocation_presult__isset {
  _Clang_clang_getPresumedLocation_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getPresumedLocation_presult__isset;

class Clang_clang_getPresumedLocation_presult {
 public:


  virtual ~Clang_clang_getPresumedLocation_presult() throw() {}

   ::clang::thrift::CXSourcePosition* success;

  _Clang_clang_getPresumedLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getInstantiationLocation_args__isset {
  _Clang_clang_getInstantiationLocation_args__isset() : location(false) {}
  bool location;
} _Clang_clang_getInstantiationLocation_args__isset;

class Clang_clang_getInstantiationLocation_args {
 public:

  Clang_clang_getInstantiationLocation_args() {
  }

  virtual ~Clang_clang_getInstantiationLocation_args() throw() {}

   ::clang::thrift::CXSourceLocation location;

  _Clang_clang_getInstantiationLocation_args__isset __isset;

  void __set_location(const  ::clang::thrift::CXSourceLocation& val) {
    location = val;
  }

  bool operator == (const Clang_clang_getInstantiationLocation_args & rhs) const
  {
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getInstantiationLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getInstantiationLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getInstantiationLocation_pargs {
 public:


  virtual ~Clang_clang_getInstantiationLocation_pargs() throw() {}

  const  ::clang::thrift::CXSourceLocation* location;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getInstantiationLocation_result__isset {
  _Clang_clang_getInstantiationLocation_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getInstantiationLocation_result__isset;

class Clang_clang_getInstantiationLocation_result {
 public:

  Clang_clang_getInstantiationLocation_result() {
  }

  virtual ~Clang_clang_getInstantiationLocation_result() throw() {}

   ::clang::thrift::CXSourcePosition success;

  _Clang_clang_getInstantiationLocation_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourcePosition& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getInstantiationLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getInstantiationLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getInstantiationLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getInstantiationLocation_presult__isset {
  _Clang_clang_getInstantiationLocation_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getInstantiationLocation_presult__isset;

class Clang_clang_getInstantiationLocation_presult {
 public:


  virtual ~Clang_clang_getInstantiationLocation_presult() throw() {}

   ::clang::thrift::CXSourcePosition* success;

  _Clang_clang_getInstantiationLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getSpellingLocation_args__isset {
  _Clang_clang_getSpellingLocation_args__isset() : location(false) {}
  bool location;
} _Clang_clang_getSpellingLocation_args__isset;

class Clang_clang_getSpellingLocation_args {
 public:

  Clang_clang_getSpellingLocation_args() {
  }

  virtual ~Clang_clang_getSpellingLocation_args() throw() {}

   ::clang::thrift::CXSourceLocation location;

  _Clang_clang_getSpellingLocation_args__isset __isset;

  void __set_location(const  ::clang::thrift::CXSourceLocation& val) {
    location = val;
  }

  bool operator == (const Clang_clang_getSpellingLocation_args & rhs) const
  {
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getSpellingLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getSpellingLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getSpellingLocation_pargs {
 public:


  virtual ~Clang_clang_getSpellingLocation_pargs() throw() {}

  const  ::clang::thrift::CXSourceLocation* location;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getSpellingLocation_result__isset {
  _Clang_clang_getSpellingLocation_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getSpellingLocation_result__isset;

class Clang_clang_getSpellingLocation_result {
 public:

  Clang_clang_getSpellingLocation_result() {
  }

  virtual ~Clang_clang_getSpellingLocation_result() throw() {}

   ::clang::thrift::CXSourcePosition success;

  _Clang_clang_getSpellingLocation_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourcePosition& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getSpellingLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getSpellingLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getSpellingLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getSpellingLocation_presult__isset {
  _Clang_clang_getSpellingLocation_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getSpellingLocation_presult__isset;

class Clang_clang_getSpellingLocation_presult {
 public:


  virtual ~Clang_clang_getSpellingLocation_presult() throw() {}

   ::clang::thrift::CXSourcePosition* success;

  _Clang_clang_getSpellingLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getRangeStart_args__isset {
  _Clang_clang_getRangeStart_args__isset() : range(false) {}
  bool range;
} _Clang_clang_getRangeStart_args__isset;

class Clang_clang_getRangeStart_args {
 public:

  Clang_clang_getRangeStart_args() {
  }

  virtual ~Clang_clang_getRangeStart_args() throw() {}

   ::clang::thrift::CXSourceRange range;

  _Clang_clang_getRangeStart_args__isset __isset;

  void __set_range(const  ::clang::thrift::CXSourceRange& val) {
    range = val;
  }

  bool operator == (const Clang_clang_getRangeStart_args & rhs) const
  {
    if (!(range == rhs.range))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getRangeStart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getRangeStart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getRangeStart_pargs {
 public:


  virtual ~Clang_clang_getRangeStart_pargs() throw() {}

  const  ::clang::thrift::CXSourceRange* range;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getRangeStart_result__isset {
  _Clang_clang_getRangeStart_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getRangeStart_result__isset;

class Clang_clang_getRangeStart_result {
 public:

  Clang_clang_getRangeStart_result() {
  }

  virtual ~Clang_clang_getRangeStart_result() throw() {}

   ::clang::thrift::CXSourceLocation success;

  _Clang_clang_getRangeStart_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourceLocation& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getRangeStart_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getRangeStart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getRangeStart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getRangeStart_presult__isset {
  _Clang_clang_getRangeStart_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getRangeStart_presult__isset;

class Clang_clang_getRangeStart_presult {
 public:


  virtual ~Clang_clang_getRangeStart_presult() throw() {}

   ::clang::thrift::CXSourceLocation* success;

  _Clang_clang_getRangeStart_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getRangeEnd_args__isset {
  _Clang_clang_getRangeEnd_args__isset() : range(false) {}
  bool range;
} _Clang_clang_getRangeEnd_args__isset;

class Clang_clang_getRangeEnd_args {
 public:

  Clang_clang_getRangeEnd_args() {
  }

  virtual ~Clang_clang_getRangeEnd_args() throw() {}

   ::clang::thrift::CXSourceRange range;

  _Clang_clang_getRangeEnd_args__isset __isset;

  void __set_range(const  ::clang::thrift::CXSourceRange& val) {
    range = val;
  }

  bool operator == (const Clang_clang_getRangeEnd_args & rhs) const
  {
    if (!(range == rhs.range))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getRangeEnd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getRangeEnd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getRangeEnd_pargs {
 public:


  virtual ~Clang_clang_getRangeEnd_pargs() throw() {}

  const  ::clang::thrift::CXSourceRange* range;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getRangeEnd_result__isset {
  _Clang_clang_getRangeEnd_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getRangeEnd_result__isset;

class Clang_clang_getRangeEnd_result {
 public:

  Clang_clang_getRangeEnd_result() {
  }

  virtual ~Clang_clang_getRangeEnd_result() throw() {}

   ::clang::thrift::CXSourceLocation success;

  _Clang_clang_getRangeEnd_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourceLocation& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getRangeEnd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getRangeEnd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getRangeEnd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getRangeEnd_presult__isset {
  _Clang_clang_getRangeEnd_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getRangeEnd_presult__isset;

class Clang_clang_getRangeEnd_presult {
 public:


  virtual ~Clang_clang_getRangeEnd_presult() throw() {}

   ::clang::thrift::CXSourceLocation* success;

  _Clang_clang_getRangeEnd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getNumDiagnosticsInSet_args__isset {
  _Clang_clang_getNumDiagnosticsInSet_args__isset() : diags(false) {}
  bool diags;
} _Clang_clang_getNumDiagnosticsInSet_args__isset;

class Clang_clang_getNumDiagnosticsInSet_args {
 public:

  Clang_clang_getNumDiagnosticsInSet_args() : diags(0) {
  }

  virtual ~Clang_clang_getNumDiagnosticsInSet_args() throw() {}

   ::clang::thrift::CXDiagnosticSet diags;

  _Clang_clang_getNumDiagnosticsInSet_args__isset __isset;

  void __set_diags(const  ::clang::thrift::CXDiagnosticSet val) {
    diags = val;
  }

  bool operator == (const Clang_clang_getNumDiagnosticsInSet_args & rhs) const
  {
    if (!(diags == rhs.diags))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getNumDiagnosticsInSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getNumDiagnosticsInSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getNumDiagnosticsInSet_pargs {
 public:


  virtual ~Clang_clang_getNumDiagnosticsInSet_pargs() throw() {}

  const  ::clang::thrift::CXDiagnosticSet* diags;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getNumDiagnosticsInSet_result__isset {
  _Clang_clang_getNumDiagnosticsInSet_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getNumDiagnosticsInSet_result__isset;

class Clang_clang_getNumDiagnosticsInSet_result {
 public:

  Clang_clang_getNumDiagnosticsInSet_result() : success(0) {
  }

  virtual ~Clang_clang_getNumDiagnosticsInSet_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_getNumDiagnosticsInSet_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_getNumDiagnosticsInSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getNumDiagnosticsInSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getNumDiagnosticsInSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getNumDiagnosticsInSet_presult__isset {
  _Clang_clang_getNumDiagnosticsInSet_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getNumDiagnosticsInSet_presult__isset;

class Clang_clang_getNumDiagnosticsInSet_presult {
 public:


  virtual ~Clang_clang_getNumDiagnosticsInSet_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_getNumDiagnosticsInSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticInSet_args__isset {
  _Clang_clang_getDiagnosticInSet_args__isset() : diags(false), index(false) {}
  bool diags;
  bool index;
} _Clang_clang_getDiagnosticInSet_args__isset;

class Clang_clang_getDiagnosticInSet_args {
 public:

  Clang_clang_getDiagnosticInSet_args() : diags(0), index(0) {
  }

  virtual ~Clang_clang_getDiagnosticInSet_args() throw() {}

   ::clang::thrift::CXDiagnosticSet diags;
   ::clang::thrift::u32 index;

  _Clang_clang_getDiagnosticInSet_args__isset __isset;

  void __set_diags(const  ::clang::thrift::CXDiagnosticSet val) {
    diags = val;
  }

  void __set_index(const  ::clang::thrift::u32 val) {
    index = val;
  }

  bool operator == (const Clang_clang_getDiagnosticInSet_args & rhs) const
  {
    if (!(diags == rhs.diags))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticInSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticInSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticInSet_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticInSet_pargs() throw() {}

  const  ::clang::thrift::CXDiagnosticSet* diags;
  const  ::clang::thrift::u32* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticInSet_result__isset {
  _Clang_clang_getDiagnosticInSet_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticInSet_result__isset;

class Clang_clang_getDiagnosticInSet_result {
 public:

  Clang_clang_getDiagnosticInSet_result() : success(0) {
  }

  virtual ~Clang_clang_getDiagnosticInSet_result() throw() {}

   ::clang::thrift::CXDiagnostic success;

  _Clang_clang_getDiagnosticInSet_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXDiagnostic val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticInSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticInSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticInSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticInSet_presult__isset {
  _Clang_clang_getDiagnosticInSet_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticInSet_presult__isset;

class Clang_clang_getDiagnosticInSet_presult {
 public:


  virtual ~Clang_clang_getDiagnosticInSet_presult() throw() {}

   ::clang::thrift::CXDiagnostic* success;

  _Clang_clang_getDiagnosticInSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_loadDiagnostics_args__isset {
  _Clang_clang_loadDiagnostics_args__isset() : filename(false) {}
  bool filename;
} _Clang_clang_loadDiagnostics_args__isset;

class Clang_clang_loadDiagnostics_args {
 public:

  Clang_clang_loadDiagnostics_args() : filename() {
  }

  virtual ~Clang_clang_loadDiagnostics_args() throw() {}

  std::string filename;

  _Clang_clang_loadDiagnostics_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  bool operator == (const Clang_clang_loadDiagnostics_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_loadDiagnostics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_loadDiagnostics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_loadDiagnostics_pargs {
 public:


  virtual ~Clang_clang_loadDiagnostics_pargs() throw() {}

  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_loadDiagnostics_result__isset {
  _Clang_clang_loadDiagnostics_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _Clang_clang_loadDiagnostics_result__isset;

class Clang_clang_loadDiagnostics_result {
 public:

  Clang_clang_loadDiagnostics_result() : success(0) {
  }

  virtual ~Clang_clang_loadDiagnostics_result() throw() {}

   ::clang::thrift::CXDiagnosticSet success;
   ::clang::thrift::CXLoadDiagException e;

  _Clang_clang_loadDiagnostics_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXDiagnosticSet val) {
    success = val;
  }

  void __set_e(const  ::clang::thrift::CXLoadDiagException& val) {
    e = val;
  }

  bool operator == (const Clang_clang_loadDiagnostics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_loadDiagnostics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_loadDiagnostics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_loadDiagnostics_presult__isset {
  _Clang_clang_loadDiagnostics_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _Clang_clang_loadDiagnostics_presult__isset;

class Clang_clang_loadDiagnostics_presult {
 public:


  virtual ~Clang_clang_loadDiagnostics_presult() throw() {}

   ::clang::thrift::CXDiagnosticSet* success;
   ::clang::thrift::CXLoadDiagException e;

  _Clang_clang_loadDiagnostics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_disposeDiagnosticSet_args__isset {
  _Clang_clang_disposeDiagnosticSet_args__isset() : diagnosticSet(false) {}
  bool diagnosticSet;
} _Clang_clang_disposeDiagnosticSet_args__isset;

class Clang_clang_disposeDiagnosticSet_args {
 public:

  Clang_clang_disposeDiagnosticSet_args() : diagnosticSet(0) {
  }

  virtual ~Clang_clang_disposeDiagnosticSet_args() throw() {}

   ::clang::thrift::CXDiagnosticSet diagnosticSet;

  _Clang_clang_disposeDiagnosticSet_args__isset __isset;

  void __set_diagnosticSet(const  ::clang::thrift::CXDiagnosticSet val) {
    diagnosticSet = val;
  }

  bool operator == (const Clang_clang_disposeDiagnosticSet_args & rhs) const
  {
    if (!(diagnosticSet == rhs.diagnosticSet))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_disposeDiagnosticSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_disposeDiagnosticSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeDiagnosticSet_pargs {
 public:


  virtual ~Clang_clang_disposeDiagnosticSet_pargs() throw() {}

  const  ::clang::thrift::CXDiagnosticSet* diagnosticSet;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeDiagnosticSet_result {
 public:

  Clang_clang_disposeDiagnosticSet_result() {
  }

  virtual ~Clang_clang_disposeDiagnosticSet_result() throw() {}


  bool operator == (const Clang_clang_disposeDiagnosticSet_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Clang_clang_disposeDiagnosticSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_disposeDiagnosticSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeDiagnosticSet_presult {
 public:


  virtual ~Clang_clang_disposeDiagnosticSet_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getChildDiagnostics_args__isset {
  _Clang_clang_getChildDiagnostics_args__isset() : diagnostic(false) {}
  bool diagnostic;
} _Clang_clang_getChildDiagnostics_args__isset;

class Clang_clang_getChildDiagnostics_args {
 public:

  Clang_clang_getChildDiagnostics_args() : diagnostic(0) {
  }

  virtual ~Clang_clang_getChildDiagnostics_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;

  _Clang_clang_getChildDiagnostics_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  bool operator == (const Clang_clang_getChildDiagnostics_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getChildDiagnostics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getChildDiagnostics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getChildDiagnostics_pargs {
 public:


  virtual ~Clang_clang_getChildDiagnostics_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getChildDiagnostics_result__isset {
  _Clang_clang_getChildDiagnostics_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getChildDiagnostics_result__isset;

class Clang_clang_getChildDiagnostics_result {
 public:

  Clang_clang_getChildDiagnostics_result() : success(0) {
  }

  virtual ~Clang_clang_getChildDiagnostics_result() throw() {}

   ::clang::thrift::CXDiagnosticSet success;

  _Clang_clang_getChildDiagnostics_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXDiagnosticSet val) {
    success = val;
  }

  bool operator == (const Clang_clang_getChildDiagnostics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getChildDiagnostics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getChildDiagnostics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getChildDiagnostics_presult__isset {
  _Clang_clang_getChildDiagnostics_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getChildDiagnostics_presult__isset;

class Clang_clang_getChildDiagnostics_presult {
 public:


  virtual ~Clang_clang_getChildDiagnostics_presult() throw() {}

   ::clang::thrift::CXDiagnosticSet* success;

  _Clang_clang_getChildDiagnostics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getNumDiagnostics_args__isset {
  _Clang_clang_getNumDiagnostics_args__isset() : unit(false) {}
  bool unit;
} _Clang_clang_getNumDiagnostics_args__isset;

class Clang_clang_getNumDiagnostics_args {
 public:

  Clang_clang_getNumDiagnostics_args() : unit(0) {
  }

  virtual ~Clang_clang_getNumDiagnostics_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;

  _Clang_clang_getNumDiagnostics_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  bool operator == (const Clang_clang_getNumDiagnostics_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getNumDiagnostics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getNumDiagnostics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getNumDiagnostics_pargs {
 public:


  virtual ~Clang_clang_getNumDiagnostics_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getNumDiagnostics_result__isset {
  _Clang_clang_getNumDiagnostics_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getNumDiagnostics_result__isset;

class Clang_clang_getNumDiagnostics_result {
 public:

  Clang_clang_getNumDiagnostics_result() : success(0) {
  }

  virtual ~Clang_clang_getNumDiagnostics_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_getNumDiagnostics_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_getNumDiagnostics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getNumDiagnostics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getNumDiagnostics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getNumDiagnostics_presult__isset {
  _Clang_clang_getNumDiagnostics_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getNumDiagnostics_presult__isset;

class Clang_clang_getNumDiagnostics_presult {
 public:


  virtual ~Clang_clang_getNumDiagnostics_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_getNumDiagnostics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnostic_args__isset {
  _Clang_clang_getDiagnostic_args__isset() : unit(false), index(false) {}
  bool unit;
  bool index;
} _Clang_clang_getDiagnostic_args__isset;

class Clang_clang_getDiagnostic_args {
 public:

  Clang_clang_getDiagnostic_args() : unit(0), index(0) {
  }

  virtual ~Clang_clang_getDiagnostic_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;
   ::clang::thrift::u32 index;

  _Clang_clang_getDiagnostic_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  void __set_index(const  ::clang::thrift::u32 val) {
    index = val;
  }

  bool operator == (const Clang_clang_getDiagnostic_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnostic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnostic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnostic_pargs {
 public:


  virtual ~Clang_clang_getDiagnostic_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;
  const  ::clang::thrift::u32* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnostic_result__isset {
  _Clang_clang_getDiagnostic_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnostic_result__isset;

class Clang_clang_getDiagnostic_result {
 public:

  Clang_clang_getDiagnostic_result() : success(0) {
  }

  virtual ~Clang_clang_getDiagnostic_result() throw() {}

   ::clang::thrift::CXDiagnostic success;

  _Clang_clang_getDiagnostic_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXDiagnostic val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnostic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnostic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnostic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnostic_presult__isset {
  _Clang_clang_getDiagnostic_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnostic_presult__isset;

class Clang_clang_getDiagnostic_presult {
 public:


  virtual ~Clang_clang_getDiagnostic_presult() throw() {}

   ::clang::thrift::CXDiagnostic* success;

  _Clang_clang_getDiagnostic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticSetFromTU_args__isset {
  _Clang_clang_getDiagnosticSetFromTU_args__isset() : unit(false) {}
  bool unit;
} _Clang_clang_getDiagnosticSetFromTU_args__isset;

class Clang_clang_getDiagnosticSetFromTU_args {
 public:

  Clang_clang_getDiagnosticSetFromTU_args() : unit(0) {
  }

  virtual ~Clang_clang_getDiagnosticSetFromTU_args() throw() {}

   ::clang::thrift::CXTranslationUnit unit;

  _Clang_clang_getDiagnosticSetFromTU_args__isset __isset;

  void __set_unit(const  ::clang::thrift::CXTranslationUnit val) {
    unit = val;
  }

  bool operator == (const Clang_clang_getDiagnosticSetFromTU_args & rhs) const
  {
    if (!(unit == rhs.unit))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticSetFromTU_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticSetFromTU_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticSetFromTU_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticSetFromTU_pargs() throw() {}

  const  ::clang::thrift::CXTranslationUnit* unit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticSetFromTU_result__isset {
  _Clang_clang_getDiagnosticSetFromTU_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticSetFromTU_result__isset;

class Clang_clang_getDiagnosticSetFromTU_result {
 public:

  Clang_clang_getDiagnosticSetFromTU_result() : success(0) {
  }

  virtual ~Clang_clang_getDiagnosticSetFromTU_result() throw() {}

   ::clang::thrift::CXDiagnosticSet success;

  _Clang_clang_getDiagnosticSetFromTU_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXDiagnosticSet val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticSetFromTU_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticSetFromTU_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticSetFromTU_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticSetFromTU_presult__isset {
  _Clang_clang_getDiagnosticSetFromTU_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticSetFromTU_presult__isset;

class Clang_clang_getDiagnosticSetFromTU_presult {
 public:


  virtual ~Clang_clang_getDiagnosticSetFromTU_presult() throw() {}

   ::clang::thrift::CXDiagnosticSet* success;

  _Clang_clang_getDiagnosticSetFromTU_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_disposeDiagnostic_args__isset {
  _Clang_clang_disposeDiagnostic_args__isset() : diagnostic(false) {}
  bool diagnostic;
} _Clang_clang_disposeDiagnostic_args__isset;

class Clang_clang_disposeDiagnostic_args {
 public:

  Clang_clang_disposeDiagnostic_args() : diagnostic(0) {
  }

  virtual ~Clang_clang_disposeDiagnostic_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;

  _Clang_clang_disposeDiagnostic_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  bool operator == (const Clang_clang_disposeDiagnostic_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_disposeDiagnostic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_disposeDiagnostic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeDiagnostic_pargs {
 public:


  virtual ~Clang_clang_disposeDiagnostic_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeDiagnostic_result {
 public:

  Clang_clang_disposeDiagnostic_result() {
  }

  virtual ~Clang_clang_disposeDiagnostic_result() throw() {}


  bool operator == (const Clang_clang_disposeDiagnostic_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Clang_clang_disposeDiagnostic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_disposeDiagnostic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_disposeDiagnostic_presult {
 public:


  virtual ~Clang_clang_disposeDiagnostic_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_formatDiagnostic_args__isset {
  _Clang_clang_formatDiagnostic_args__isset() : diagnostic(false), options(false) {}
  bool diagnostic;
  bool options;
} _Clang_clang_formatDiagnostic_args__isset;

class Clang_clang_formatDiagnostic_args {
 public:

  Clang_clang_formatDiagnostic_args() : diagnostic(0), options(0) {
  }

  virtual ~Clang_clang_formatDiagnostic_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;
   ::clang::thrift::u32 options;

  _Clang_clang_formatDiagnostic_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  void __set_options(const  ::clang::thrift::u32 val) {
    options = val;
  }

  bool operator == (const Clang_clang_formatDiagnostic_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_formatDiagnostic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_formatDiagnostic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_formatDiagnostic_pargs {
 public:


  virtual ~Clang_clang_formatDiagnostic_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;
  const  ::clang::thrift::u32* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_formatDiagnostic_result__isset {
  _Clang_clang_formatDiagnostic_result__isset() : success(false) {}
  bool success;
} _Clang_clang_formatDiagnostic_result__isset;

class Clang_clang_formatDiagnostic_result {
 public:

  Clang_clang_formatDiagnostic_result() : success() {
  }

  virtual ~Clang_clang_formatDiagnostic_result() throw() {}

  std::string success;

  _Clang_clang_formatDiagnostic_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Clang_clang_formatDiagnostic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_formatDiagnostic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_formatDiagnostic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_formatDiagnostic_presult__isset {
  _Clang_clang_formatDiagnostic_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_formatDiagnostic_presult__isset;

class Clang_clang_formatDiagnostic_presult {
 public:


  virtual ~Clang_clang_formatDiagnostic_presult() throw() {}

  std::string* success;

  _Clang_clang_formatDiagnostic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Clang_clang_defaultDiagnosticDisplayOptions_args {
 public:

  Clang_clang_defaultDiagnosticDisplayOptions_args() {
  }

  virtual ~Clang_clang_defaultDiagnosticDisplayOptions_args() throw() {}


  bool operator == (const Clang_clang_defaultDiagnosticDisplayOptions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Clang_clang_defaultDiagnosticDisplayOptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_defaultDiagnosticDisplayOptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_defaultDiagnosticDisplayOptions_pargs {
 public:


  virtual ~Clang_clang_defaultDiagnosticDisplayOptions_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_defaultDiagnosticDisplayOptions_result__isset {
  _Clang_clang_defaultDiagnosticDisplayOptions_result__isset() : success(false) {}
  bool success;
} _Clang_clang_defaultDiagnosticDisplayOptions_result__isset;

class Clang_clang_defaultDiagnosticDisplayOptions_result {
 public:

  Clang_clang_defaultDiagnosticDisplayOptions_result() : success(0) {
  }

  virtual ~Clang_clang_defaultDiagnosticDisplayOptions_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_defaultDiagnosticDisplayOptions_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_defaultDiagnosticDisplayOptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_defaultDiagnosticDisplayOptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_defaultDiagnosticDisplayOptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_defaultDiagnosticDisplayOptions_presult__isset {
  _Clang_clang_defaultDiagnosticDisplayOptions_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_defaultDiagnosticDisplayOptions_presult__isset;

class Clang_clang_defaultDiagnosticDisplayOptions_presult {
 public:


  virtual ~Clang_clang_defaultDiagnosticDisplayOptions_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_defaultDiagnosticDisplayOptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticSeverity_args__isset {
  _Clang_clang_getDiagnosticSeverity_args__isset() : diagnostic(false) {}
  bool diagnostic;
} _Clang_clang_getDiagnosticSeverity_args__isset;

class Clang_clang_getDiagnosticSeverity_args {
 public:

  Clang_clang_getDiagnosticSeverity_args() : diagnostic(0) {
  }

  virtual ~Clang_clang_getDiagnosticSeverity_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;

  _Clang_clang_getDiagnosticSeverity_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  bool operator == (const Clang_clang_getDiagnosticSeverity_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticSeverity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticSeverity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticSeverity_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticSeverity_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticSeverity_result__isset {
  _Clang_clang_getDiagnosticSeverity_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticSeverity_result__isset;

class Clang_clang_getDiagnosticSeverity_result {
 public:

  Clang_clang_getDiagnosticSeverity_result() : success(( ::clang::thrift::CXDiagnosticSeverity::type)0) {
  }

  virtual ~Clang_clang_getDiagnosticSeverity_result() throw() {}

   ::clang::thrift::CXDiagnosticSeverity::type success;

  _Clang_clang_getDiagnosticSeverity_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXDiagnosticSeverity::type val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticSeverity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticSeverity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticSeverity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticSeverity_presult__isset {
  _Clang_clang_getDiagnosticSeverity_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticSeverity_presult__isset;

class Clang_clang_getDiagnosticSeverity_presult {
 public:


  virtual ~Clang_clang_getDiagnosticSeverity_presult() throw() {}

   ::clang::thrift::CXDiagnosticSeverity::type* success;

  _Clang_clang_getDiagnosticSeverity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticLocation_args__isset {
  _Clang_clang_getDiagnosticLocation_args__isset() : diagnostic(false) {}
  bool diagnostic;
} _Clang_clang_getDiagnosticLocation_args__isset;

class Clang_clang_getDiagnosticLocation_args {
 public:

  Clang_clang_getDiagnosticLocation_args() : diagnostic(0) {
  }

  virtual ~Clang_clang_getDiagnosticLocation_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;

  _Clang_clang_getDiagnosticLocation_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  bool operator == (const Clang_clang_getDiagnosticLocation_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticLocation_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticLocation_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticLocation_result__isset {
  _Clang_clang_getDiagnosticLocation_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticLocation_result__isset;

class Clang_clang_getDiagnosticLocation_result {
 public:

  Clang_clang_getDiagnosticLocation_result() {
  }

  virtual ~Clang_clang_getDiagnosticLocation_result() throw() {}

   ::clang::thrift::CXSourceLocation success;

  _Clang_clang_getDiagnosticLocation_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourceLocation& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticLocation_presult__isset {
  _Clang_clang_getDiagnosticLocation_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticLocation_presult__isset;

class Clang_clang_getDiagnosticLocation_presult {
 public:


  virtual ~Clang_clang_getDiagnosticLocation_presult() throw() {}

   ::clang::thrift::CXSourceLocation* success;

  _Clang_clang_getDiagnosticLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticSpelling_args__isset {
  _Clang_clang_getDiagnosticSpelling_args__isset() : diagnostic(false) {}
  bool diagnostic;
} _Clang_clang_getDiagnosticSpelling_args__isset;

class Clang_clang_getDiagnosticSpelling_args {
 public:

  Clang_clang_getDiagnosticSpelling_args() : diagnostic(0) {
  }

  virtual ~Clang_clang_getDiagnosticSpelling_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;

  _Clang_clang_getDiagnosticSpelling_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  bool operator == (const Clang_clang_getDiagnosticSpelling_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticSpelling_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticSpelling_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticSpelling_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticSpelling_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticSpelling_result__isset {
  _Clang_clang_getDiagnosticSpelling_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticSpelling_result__isset;

class Clang_clang_getDiagnosticSpelling_result {
 public:

  Clang_clang_getDiagnosticSpelling_result() : success() {
  }

  virtual ~Clang_clang_getDiagnosticSpelling_result() throw() {}

  std::string success;

  _Clang_clang_getDiagnosticSpelling_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticSpelling_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticSpelling_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticSpelling_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticSpelling_presult__isset {
  _Clang_clang_getDiagnosticSpelling_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticSpelling_presult__isset;

class Clang_clang_getDiagnosticSpelling_presult {
 public:


  virtual ~Clang_clang_getDiagnosticSpelling_presult() throw() {}

  std::string* success;

  _Clang_clang_getDiagnosticSpelling_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticOption_args__isset {
  _Clang_clang_getDiagnosticOption_args__isset() : diagnostic(false) {}
  bool diagnostic;
} _Clang_clang_getDiagnosticOption_args__isset;

class Clang_clang_getDiagnosticOption_args {
 public:

  Clang_clang_getDiagnosticOption_args() : diagnostic(0) {
  }

  virtual ~Clang_clang_getDiagnosticOption_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;

  _Clang_clang_getDiagnosticOption_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  bool operator == (const Clang_clang_getDiagnosticOption_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticOption_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticOption_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticOption_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticOption_result__isset {
  _Clang_clang_getDiagnosticOption_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticOption_result__isset;

class Clang_clang_getDiagnosticOption_result {
 public:

  Clang_clang_getDiagnosticOption_result() {
  }

  virtual ~Clang_clang_getDiagnosticOption_result() throw() {}

   ::clang::thrift::CXDiagnosticOption success;

  _Clang_clang_getDiagnosticOption_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXDiagnosticOption& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticOption_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticOption_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticOption_presult__isset {
  _Clang_clang_getDiagnosticOption_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticOption_presult__isset;

class Clang_clang_getDiagnosticOption_presult {
 public:


  virtual ~Clang_clang_getDiagnosticOption_presult() throw() {}

   ::clang::thrift::CXDiagnosticOption* success;

  _Clang_clang_getDiagnosticOption_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticCategory_args__isset {
  _Clang_clang_getDiagnosticCategory_args__isset() : diagnostic(false) {}
  bool diagnostic;
} _Clang_clang_getDiagnosticCategory_args__isset;

class Clang_clang_getDiagnosticCategory_args {
 public:

  Clang_clang_getDiagnosticCategory_args() : diagnostic(0) {
  }

  virtual ~Clang_clang_getDiagnosticCategory_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;

  _Clang_clang_getDiagnosticCategory_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  bool operator == (const Clang_clang_getDiagnosticCategory_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticCategory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticCategory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticCategory_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticCategory_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticCategory_result__isset {
  _Clang_clang_getDiagnosticCategory_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticCategory_result__isset;

class Clang_clang_getDiagnosticCategory_result {
 public:

  Clang_clang_getDiagnosticCategory_result() : success(0) {
  }

  virtual ~Clang_clang_getDiagnosticCategory_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_getDiagnosticCategory_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticCategory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticCategory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticCategory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticCategory_presult__isset {
  _Clang_clang_getDiagnosticCategory_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticCategory_presult__isset;

class Clang_clang_getDiagnosticCategory_presult {
 public:


  virtual ~Clang_clang_getDiagnosticCategory_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_getDiagnosticCategory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticCategoryName_args__isset {
  _Clang_clang_getDiagnosticCategoryName_args__isset() : category(false) {}
  bool category;
} _Clang_clang_getDiagnosticCategoryName_args__isset;

class Clang_clang_getDiagnosticCategoryName_args {
 public:

  Clang_clang_getDiagnosticCategoryName_args() : category(0) {
  }

  virtual ~Clang_clang_getDiagnosticCategoryName_args() throw() {}

   ::clang::thrift::u32 category;

  _Clang_clang_getDiagnosticCategoryName_args__isset __isset;

  void __set_category(const  ::clang::thrift::u32 val) {
    category = val;
  }

  bool operator == (const Clang_clang_getDiagnosticCategoryName_args & rhs) const
  {
    if (!(category == rhs.category))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticCategoryName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticCategoryName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticCategoryName_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticCategoryName_pargs() throw() {}

  const  ::clang::thrift::u32* category;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticCategoryName_result__isset {
  _Clang_clang_getDiagnosticCategoryName_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticCategoryName_result__isset;

class Clang_clang_getDiagnosticCategoryName_result {
 public:

  Clang_clang_getDiagnosticCategoryName_result() : success() {
  }

  virtual ~Clang_clang_getDiagnosticCategoryName_result() throw() {}

  std::string success;

  _Clang_clang_getDiagnosticCategoryName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticCategoryName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticCategoryName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticCategoryName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticCategoryName_presult__isset {
  _Clang_clang_getDiagnosticCategoryName_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticCategoryName_presult__isset;

class Clang_clang_getDiagnosticCategoryName_presult {
 public:


  virtual ~Clang_clang_getDiagnosticCategoryName_presult() throw() {}

  std::string* success;

  _Clang_clang_getDiagnosticCategoryName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticCategoryText_args__isset {
  _Clang_clang_getDiagnosticCategoryText_args__isset() : diagnostic(false) {}
  bool diagnostic;
} _Clang_clang_getDiagnosticCategoryText_args__isset;

class Clang_clang_getDiagnosticCategoryText_args {
 public:

  Clang_clang_getDiagnosticCategoryText_args() : diagnostic(0) {
  }

  virtual ~Clang_clang_getDiagnosticCategoryText_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;

  _Clang_clang_getDiagnosticCategoryText_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  bool operator == (const Clang_clang_getDiagnosticCategoryText_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticCategoryText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticCategoryText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticCategoryText_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticCategoryText_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticCategoryText_result__isset {
  _Clang_clang_getDiagnosticCategoryText_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticCategoryText_result__isset;

class Clang_clang_getDiagnosticCategoryText_result {
 public:

  Clang_clang_getDiagnosticCategoryText_result() : success() {
  }

  virtual ~Clang_clang_getDiagnosticCategoryText_result() throw() {}

  std::string success;

  _Clang_clang_getDiagnosticCategoryText_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticCategoryText_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticCategoryText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticCategoryText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticCategoryText_presult__isset {
  _Clang_clang_getDiagnosticCategoryText_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticCategoryText_presult__isset;

class Clang_clang_getDiagnosticCategoryText_presult {
 public:


  virtual ~Clang_clang_getDiagnosticCategoryText_presult() throw() {}

  std::string* success;

  _Clang_clang_getDiagnosticCategoryText_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticNumRanges_args__isset {
  _Clang_clang_getDiagnosticNumRanges_args__isset() : diagnostic(false) {}
  bool diagnostic;
} _Clang_clang_getDiagnosticNumRanges_args__isset;

class Clang_clang_getDiagnosticNumRanges_args {
 public:

  Clang_clang_getDiagnosticNumRanges_args() : diagnostic(0) {
  }

  virtual ~Clang_clang_getDiagnosticNumRanges_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;

  _Clang_clang_getDiagnosticNumRanges_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  bool operator == (const Clang_clang_getDiagnosticNumRanges_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticNumRanges_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticNumRanges_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticNumRanges_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticNumRanges_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticNumRanges_result__isset {
  _Clang_clang_getDiagnosticNumRanges_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticNumRanges_result__isset;

class Clang_clang_getDiagnosticNumRanges_result {
 public:

  Clang_clang_getDiagnosticNumRanges_result() : success(0) {
  }

  virtual ~Clang_clang_getDiagnosticNumRanges_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_getDiagnosticNumRanges_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticNumRanges_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticNumRanges_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticNumRanges_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticNumRanges_presult__isset {
  _Clang_clang_getDiagnosticNumRanges_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticNumRanges_presult__isset;

class Clang_clang_getDiagnosticNumRanges_presult {
 public:


  virtual ~Clang_clang_getDiagnosticNumRanges_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_getDiagnosticNumRanges_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticRange_args__isset {
  _Clang_clang_getDiagnosticRange_args__isset() : diagnostic(false), range(false) {}
  bool diagnostic;
  bool range;
} _Clang_clang_getDiagnosticRange_args__isset;

class Clang_clang_getDiagnosticRange_args {
 public:

  Clang_clang_getDiagnosticRange_args() : diagnostic(0), range(0) {
  }

  virtual ~Clang_clang_getDiagnosticRange_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;
   ::clang::thrift::u32 range;

  _Clang_clang_getDiagnosticRange_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  void __set_range(const  ::clang::thrift::u32 val) {
    range = val;
  }

  bool operator == (const Clang_clang_getDiagnosticRange_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    if (!(range == rhs.range))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticRange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticRange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticRange_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticRange_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;
  const  ::clang::thrift::u32* range;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticRange_result__isset {
  _Clang_clang_getDiagnosticRange_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticRange_result__isset;

class Clang_clang_getDiagnosticRange_result {
 public:

  Clang_clang_getDiagnosticRange_result() {
  }

  virtual ~Clang_clang_getDiagnosticRange_result() throw() {}

   ::clang::thrift::CXSourceRange success;

  _Clang_clang_getDiagnosticRange_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXSourceRange& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticRange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticRange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticRange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticRange_presult__isset {
  _Clang_clang_getDiagnosticRange_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticRange_presult__isset;

class Clang_clang_getDiagnosticRange_presult {
 public:


  virtual ~Clang_clang_getDiagnosticRange_presult() throw() {}

   ::clang::thrift::CXSourceRange* success;

  _Clang_clang_getDiagnosticRange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticNumFixIts_args__isset {
  _Clang_clang_getDiagnosticNumFixIts_args__isset() : diagnostic(false) {}
  bool diagnostic;
} _Clang_clang_getDiagnosticNumFixIts_args__isset;

class Clang_clang_getDiagnosticNumFixIts_args {
 public:

  Clang_clang_getDiagnosticNumFixIts_args() : diagnostic(0) {
  }

  virtual ~Clang_clang_getDiagnosticNumFixIts_args() throw() {}

   ::clang::thrift::CXDiagnostic diagnostic;

  _Clang_clang_getDiagnosticNumFixIts_args__isset __isset;

  void __set_diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    diagnostic = val;
  }

  bool operator == (const Clang_clang_getDiagnosticNumFixIts_args & rhs) const
  {
    if (!(diagnostic == rhs.diagnostic))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticNumFixIts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticNumFixIts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticNumFixIts_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticNumFixIts_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* diagnostic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticNumFixIts_result__isset {
  _Clang_clang_getDiagnosticNumFixIts_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticNumFixIts_result__isset;

class Clang_clang_getDiagnosticNumFixIts_result {
 public:

  Clang_clang_getDiagnosticNumFixIts_result() : success(0) {
  }

  virtual ~Clang_clang_getDiagnosticNumFixIts_result() throw() {}

   ::clang::thrift::u32 success;

  _Clang_clang_getDiagnosticNumFixIts_result__isset __isset;

  void __set_success(const  ::clang::thrift::u32 val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticNumFixIts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticNumFixIts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticNumFixIts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticNumFixIts_presult__isset {
  _Clang_clang_getDiagnosticNumFixIts_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticNumFixIts_presult__isset;

class Clang_clang_getDiagnosticNumFixIts_presult {
 public:


  virtual ~Clang_clang_getDiagnosticNumFixIts_presult() throw() {}

   ::clang::thrift::u32* success;

  _Clang_clang_getDiagnosticNumFixIts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Clang_clang_getDiagnosticFixIt_args__isset {
  _Clang_clang_getDiagnosticFixIt_args__isset() : Diagnostic(false), FixIt(false) {}
  bool Diagnostic;
  bool FixIt;
} _Clang_clang_getDiagnosticFixIt_args__isset;

class Clang_clang_getDiagnosticFixIt_args {
 public:

  Clang_clang_getDiagnosticFixIt_args() : Diagnostic(0), FixIt(0) {
  }

  virtual ~Clang_clang_getDiagnosticFixIt_args() throw() {}

   ::clang::thrift::CXDiagnostic Diagnostic;
   ::clang::thrift::u32 FixIt;

  _Clang_clang_getDiagnosticFixIt_args__isset __isset;

  void __set_Diagnostic(const  ::clang::thrift::CXDiagnostic val) {
    Diagnostic = val;
  }

  void __set_FixIt(const  ::clang::thrift::u32 val) {
    FixIt = val;
  }

  bool operator == (const Clang_clang_getDiagnosticFixIt_args & rhs) const
  {
    if (!(Diagnostic == rhs.Diagnostic))
      return false;
    if (!(FixIt == rhs.FixIt))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticFixIt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticFixIt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Clang_clang_getDiagnosticFixIt_pargs {
 public:


  virtual ~Clang_clang_getDiagnosticFixIt_pargs() throw() {}

  const  ::clang::thrift::CXDiagnostic* Diagnostic;
  const  ::clang::thrift::u32* FixIt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticFixIt_result__isset {
  _Clang_clang_getDiagnosticFixIt_result__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticFixIt_result__isset;

class Clang_clang_getDiagnosticFixIt_result {
 public:

  Clang_clang_getDiagnosticFixIt_result() {
  }

  virtual ~Clang_clang_getDiagnosticFixIt_result() throw() {}

   ::clang::thrift::CXDiagnosticFixIt success;

  _Clang_clang_getDiagnosticFixIt_result__isset __isset;

  void __set_success(const  ::clang::thrift::CXDiagnosticFixIt& val) {
    success = val;
  }

  bool operator == (const Clang_clang_getDiagnosticFixIt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Clang_clang_getDiagnosticFixIt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Clang_clang_getDiagnosticFixIt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Clang_clang_getDiagnosticFixIt_presult__isset {
  _Clang_clang_getDiagnosticFixIt_presult__isset() : success(false) {}
  bool success;
} _Clang_clang_getDiagnosticFixIt_presult__isset;

class Clang_clang_getDiagnosticFixIt_presult {
 public:


  virtual ~Clang_clang_getDiagnosticFixIt_presult() throw() {}

   ::clang::thrift::CXDiagnosticFixIt* success;

  _Clang_clang_getDiagnosticFixIt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClangClient : virtual public ClangIf {
 public:
  ClangClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ClangClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::clang::thrift::CXIndex clang_createIndex(const int32_t excludeDeclarationsFromPCH, const int32_t displayDiagnostics);
  void send_clang_createIndex(const int32_t excludeDeclarationsFromPCH, const int32_t displayDiagnostics);
   ::clang::thrift::CXIndex recv_clang_createIndex();
  void clang_disposeIndex(const  ::clang::thrift::CXIndex index);
  void send_clang_disposeIndex(const  ::clang::thrift::CXIndex index);
  void recv_clang_disposeIndex();
  void clang_CXIndex_setGlobalOptions(const  ::clang::thrift::CXIndex index, const  ::clang::thrift::CXGlobalOptFlags::type options);
  void send_clang_CXIndex_setGlobalOptions(const  ::clang::thrift::CXIndex index, const  ::clang::thrift::CXGlobalOptFlags::type options);
  void recv_clang_CXIndex_setGlobalOptions();
   ::clang::thrift::CXGlobalOptFlags::type clang_CXIndex_getGlobalOptions(const  ::clang::thrift::CXIndex index);
  void send_clang_CXIndex_getGlobalOptions(const  ::clang::thrift::CXIndex index);
   ::clang::thrift::CXGlobalOptFlags::type recv_clang_CXIndex_getGlobalOptions();
  void clang_getTranslationUnitSpelling(std::string& _return, const  ::clang::thrift::CXTranslationUnit unit);
  void send_clang_getTranslationUnitSpelling(const  ::clang::thrift::CXTranslationUnit unit);
  void recv_clang_getTranslationUnitSpelling(std::string& _return);
   ::clang::thrift::CXTranslationUnit clang_createTranslationUnitFromSourceFile(const  ::clang::thrift::CXIndex idx, const std::string& source_filename, const std::vector<std::string> & clang_command_line_args, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files);
  void send_clang_createTranslationUnitFromSourceFile(const  ::clang::thrift::CXIndex idx, const std::string& source_filename, const std::vector<std::string> & clang_command_line_args, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files);
   ::clang::thrift::CXTranslationUnit recv_clang_createTranslationUnitFromSourceFile();
   ::clang::thrift::CXTranslationUnit clang_createTranslationUnit(const  ::clang::thrift::CXIndex idx, const std::string& ast_filename);
  void send_clang_createTranslationUnit(const  ::clang::thrift::CXIndex idx, const std::string& ast_filename);
   ::clang::thrift::CXTranslationUnit recv_clang_createTranslationUnit();
   ::clang::thrift::u32 clang_defaultEditingTranslationUnitOptions();
  void send_clang_defaultEditingTranslationUnitOptions();
   ::clang::thrift::u32 recv_clang_defaultEditingTranslationUnitOptions();
   ::clang::thrift::CXTranslationUnit clang_parseTranslationUnit(const  ::clang::thrift::CXIndex idx, const std::string& source_filename, const std::vector<std::string> & command_line_args, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files, const  ::clang::thrift::u32 options);
  void send_clang_parseTranslationUnit(const  ::clang::thrift::CXIndex idx, const std::string& source_filename, const std::vector<std::string> & command_line_args, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files, const  ::clang::thrift::u32 options);
   ::clang::thrift::CXTranslationUnit recv_clang_parseTranslationUnit();
   ::clang::thrift::u32 clang_defaultSaveOptions(const  ::clang::thrift::CXTranslationUnit unit);
  void send_clang_defaultSaveOptions(const  ::clang::thrift::CXTranslationUnit unit);
   ::clang::thrift::u32 recv_clang_defaultSaveOptions();
   ::clang::thrift::CXSaveError::type clang_saveTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit, const std::string& filename, const  ::clang::thrift::u32 options);
  void send_clang_saveTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit, const std::string& filename, const  ::clang::thrift::u32 options);
   ::clang::thrift::CXSaveError::type recv_clang_saveTranslationUnit();
  void clang_disposeTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit);
  void send_clang_disposeTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit);
  void recv_clang_disposeTranslationUnit();
   ::clang::thrift::u32 clang_defaultReparseOptions(const  ::clang::thrift::CXTranslationUnit unit);
  void send_clang_defaultReparseOptions(const  ::clang::thrift::CXTranslationUnit unit);
   ::clang::thrift::u32 recv_clang_defaultReparseOptions();
  int32_t clang_reparseTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files, const  ::clang::thrift::u32 options);
  void send_clang_reparseTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files, const  ::clang::thrift::u32 options);
  int32_t recv_clang_reparseTranslationUnit();
  void clang_getTUResourceUsageName(std::string& _return, const  ::clang::thrift::CXTUResourceUsageKind::type kind);
  void send_clang_getTUResourceUsageName(const  ::clang::thrift::CXTUResourceUsageKind::type kind);
  void recv_clang_getTUResourceUsageName(std::string& _return);
  void clang_getCXTUResourceUsage( ::clang::thrift::CXTUResourceUsage& _return, const  ::clang::thrift::CXTranslationUnit unit);
  void send_clang_getCXTUResourceUsage(const  ::clang::thrift::CXTranslationUnit unit);
  void recv_clang_getCXTUResourceUsage( ::clang::thrift::CXTUResourceUsage& _return);
  void clang_disposeCXTUResourceUsage(const  ::clang::thrift::CXTUResourceUsage& usage);
  void send_clang_disposeCXTUResourceUsage(const  ::clang::thrift::CXTUResourceUsage& usage);
  void recv_clang_disposeCXTUResourceUsage();
  void clang_getFileName(std::string& _return, const  ::clang::thrift::CXFile file);
  void send_clang_getFileName(const  ::clang::thrift::CXFile file);
  void recv_clang_getFileName(std::string& _return);
   ::clang::thrift::t64 clang_getFileTime(const  ::clang::thrift::CXFile file);
  void send_clang_getFileTime(const  ::clang::thrift::CXFile file);
   ::clang::thrift::t64 recv_clang_getFileTime();
   ::clang::thrift::u32 clang_isFileMultipleIncludeGuarded(const  ::clang::thrift::CXTranslationUnit unit, const  ::clang::thrift::CXFile file);
  void send_clang_isFileMultipleIncludeGuarded(const  ::clang::thrift::CXTranslationUnit unit, const  ::clang::thrift::CXFile file);
   ::clang::thrift::u32 recv_clang_isFileMultipleIncludeGuarded();
   ::clang::thrift::CXFile clang_getFile(const  ::clang::thrift::CXTranslationUnit unit, const std::string& filename);
  void send_clang_getFile(const  ::clang::thrift::CXTranslationUnit unit, const std::string& filename);
   ::clang::thrift::CXFile recv_clang_getFile();
  void clang_getNullLocation( ::clang::thrift::CXSourceLocation& _return);
  void send_clang_getNullLocation();
  void recv_clang_getNullLocation( ::clang::thrift::CXSourceLocation& _return);
   ::clang::thrift::u32 clang_equalLocations(const  ::clang::thrift::CXSourceLocation& loc1, const  ::clang::thrift::CXSourceLocation& loc2);
  void send_clang_equalLocations(const  ::clang::thrift::CXSourceLocation& loc1, const  ::clang::thrift::CXSourceLocation& loc2);
   ::clang::thrift::u32 recv_clang_equalLocations();
  void clang_getLocation( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXTranslationUnit tu, const  ::clang::thrift::CXFile file, const  ::clang::thrift::u32 line, const  ::clang::thrift::u32 column);
  void send_clang_getLocation(const  ::clang::thrift::CXTranslationUnit tu, const  ::clang::thrift::CXFile file, const  ::clang::thrift::u32 line, const  ::clang::thrift::u32 column);
  void recv_clang_getLocation( ::clang::thrift::CXSourceLocation& _return);
  void clang_getLocationForOffset( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXTranslationUnit tu, const  ::clang::thrift::CXFile file, const  ::clang::thrift::u32 offset);
  void send_clang_getLocationForOffset(const  ::clang::thrift::CXTranslationUnit tu, const  ::clang::thrift::CXFile file, const  ::clang::thrift::u32 offset);
  void recv_clang_getLocationForOffset( ::clang::thrift::CXSourceLocation& _return);
  void clang_getNullRange( ::clang::thrift::CXSourceRange& _return);
  void send_clang_getNullRange();
  void recv_clang_getNullRange( ::clang::thrift::CXSourceRange& _return);
  void clang_getRange( ::clang::thrift::CXSourceRange& _return, const  ::clang::thrift::CXSourceLocation& sourceBegin, const  ::clang::thrift::CXSourceLocation& sourceEnd);
  void send_clang_getRange(const  ::clang::thrift::CXSourceLocation& sourceBegin, const  ::clang::thrift::CXSourceLocation& sourceEnd);
  void recv_clang_getRange( ::clang::thrift::CXSourceRange& _return);
   ::clang::thrift::u32 clang_equalRanges(const  ::clang::thrift::CXSourceRange& range1, const  ::clang::thrift::CXSourceRange& range2);
  void send_clang_equalRanges(const  ::clang::thrift::CXSourceRange& range1, const  ::clang::thrift::CXSourceRange& range2);
   ::clang::thrift::u32 recv_clang_equalRanges();
  int32_t clang_Range_isNull(const  ::clang::thrift::CXSourceRange& range);
  void send_clang_Range_isNull(const  ::clang::thrift::CXSourceRange& range);
  int32_t recv_clang_Range_isNull();
  void clang_getExpansionLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location);
  void send_clang_getExpansionLocation(const  ::clang::thrift::CXSourceLocation& location);
  void recv_clang_getExpansionLocation( ::clang::thrift::CXSourcePosition& _return);
  void clang_getPresumedLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location);
  void send_clang_getPresumedLocation(const  ::clang::thrift::CXSourceLocation& location);
  void recv_clang_getPresumedLocation( ::clang::thrift::CXSourcePosition& _return);
  void clang_getInstantiationLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location);
  void send_clang_getInstantiationLocation(const  ::clang::thrift::CXSourceLocation& location);
  void recv_clang_getInstantiationLocation( ::clang::thrift::CXSourcePosition& _return);
  void clang_getSpellingLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location);
  void send_clang_getSpellingLocation(const  ::clang::thrift::CXSourceLocation& location);
  void recv_clang_getSpellingLocation( ::clang::thrift::CXSourcePosition& _return);
  void clang_getRangeStart( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXSourceRange& range);
  void send_clang_getRangeStart(const  ::clang::thrift::CXSourceRange& range);
  void recv_clang_getRangeStart( ::clang::thrift::CXSourceLocation& _return);
  void clang_getRangeEnd( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXSourceRange& range);
  void send_clang_getRangeEnd(const  ::clang::thrift::CXSourceRange& range);
  void recv_clang_getRangeEnd( ::clang::thrift::CXSourceLocation& _return);
   ::clang::thrift::u32 clang_getNumDiagnosticsInSet(const  ::clang::thrift::CXDiagnosticSet diags);
  void send_clang_getNumDiagnosticsInSet(const  ::clang::thrift::CXDiagnosticSet diags);
   ::clang::thrift::u32 recv_clang_getNumDiagnosticsInSet();
   ::clang::thrift::CXDiagnostic clang_getDiagnosticInSet(const  ::clang::thrift::CXDiagnosticSet diags, const  ::clang::thrift::u32 index);
  void send_clang_getDiagnosticInSet(const  ::clang::thrift::CXDiagnosticSet diags, const  ::clang::thrift::u32 index);
   ::clang::thrift::CXDiagnostic recv_clang_getDiagnosticInSet();
   ::clang::thrift::CXDiagnosticSet clang_loadDiagnostics(const std::string& filename);
  void send_clang_loadDiagnostics(const std::string& filename);
   ::clang::thrift::CXDiagnosticSet recv_clang_loadDiagnostics();
  void clang_disposeDiagnosticSet(const  ::clang::thrift::CXDiagnosticSet diagnosticSet);
  void send_clang_disposeDiagnosticSet(const  ::clang::thrift::CXDiagnosticSet diagnosticSet);
  void recv_clang_disposeDiagnosticSet();
   ::clang::thrift::CXDiagnosticSet clang_getChildDiagnostics(const  ::clang::thrift::CXDiagnostic diagnostic);
  void send_clang_getChildDiagnostics(const  ::clang::thrift::CXDiagnostic diagnostic);
   ::clang::thrift::CXDiagnosticSet recv_clang_getChildDiagnostics();
   ::clang::thrift::u32 clang_getNumDiagnostics(const  ::clang::thrift::CXTranslationUnit unit);
  void send_clang_getNumDiagnostics(const  ::clang::thrift::CXTranslationUnit unit);
   ::clang::thrift::u32 recv_clang_getNumDiagnostics();
   ::clang::thrift::CXDiagnostic clang_getDiagnostic(const  ::clang::thrift::CXTranslationUnit unit, const  ::clang::thrift::u32 index);
  void send_clang_getDiagnostic(const  ::clang::thrift::CXTranslationUnit unit, const  ::clang::thrift::u32 index);
   ::clang::thrift::CXDiagnostic recv_clang_getDiagnostic();
   ::clang::thrift::CXDiagnosticSet clang_getDiagnosticSetFromTU(const  ::clang::thrift::CXTranslationUnit unit);
  void send_clang_getDiagnosticSetFromTU(const  ::clang::thrift::CXTranslationUnit unit);
   ::clang::thrift::CXDiagnosticSet recv_clang_getDiagnosticSetFromTU();
  void clang_disposeDiagnostic(const  ::clang::thrift::CXDiagnostic diagnostic);
  void send_clang_disposeDiagnostic(const  ::clang::thrift::CXDiagnostic diagnostic);
  void recv_clang_disposeDiagnostic();
  void clang_formatDiagnostic(std::string& _return, const  ::clang::thrift::CXDiagnostic diagnostic, const  ::clang::thrift::u32 options);
  void send_clang_formatDiagnostic(const  ::clang::thrift::CXDiagnostic diagnostic, const  ::clang::thrift::u32 options);
  void recv_clang_formatDiagnostic(std::string& _return);
   ::clang::thrift::u32 clang_defaultDiagnosticDisplayOptions();
  void send_clang_defaultDiagnosticDisplayOptions();
   ::clang::thrift::u32 recv_clang_defaultDiagnosticDisplayOptions();
   ::clang::thrift::CXDiagnosticSeverity::type clang_getDiagnosticSeverity(const  ::clang::thrift::CXDiagnostic diagnostic);
  void send_clang_getDiagnosticSeverity(const  ::clang::thrift::CXDiagnostic diagnostic);
   ::clang::thrift::CXDiagnosticSeverity::type recv_clang_getDiagnosticSeverity();
  void clang_getDiagnosticLocation( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXDiagnostic diagnostic);
  void send_clang_getDiagnosticLocation(const  ::clang::thrift::CXDiagnostic diagnostic);
  void recv_clang_getDiagnosticLocation( ::clang::thrift::CXSourceLocation& _return);
  void clang_getDiagnosticSpelling(std::string& _return, const  ::clang::thrift::CXDiagnostic diagnostic);
  void send_clang_getDiagnosticSpelling(const  ::clang::thrift::CXDiagnostic diagnostic);
  void recv_clang_getDiagnosticSpelling(std::string& _return);
  void clang_getDiagnosticOption( ::clang::thrift::CXDiagnosticOption& _return, const  ::clang::thrift::CXDiagnostic diagnostic);
  void send_clang_getDiagnosticOption(const  ::clang::thrift::CXDiagnostic diagnostic);
  void recv_clang_getDiagnosticOption( ::clang::thrift::CXDiagnosticOption& _return);
   ::clang::thrift::u32 clang_getDiagnosticCategory(const  ::clang::thrift::CXDiagnostic diagnostic);
  void send_clang_getDiagnosticCategory(const  ::clang::thrift::CXDiagnostic diagnostic);
   ::clang::thrift::u32 recv_clang_getDiagnosticCategory();
  void clang_getDiagnosticCategoryName(std::string& _return, const  ::clang::thrift::u32 category);
  void send_clang_getDiagnosticCategoryName(const  ::clang::thrift::u32 category);
  void recv_clang_getDiagnosticCategoryName(std::string& _return);
  void clang_getDiagnosticCategoryText(std::string& _return, const  ::clang::thrift::CXDiagnostic diagnostic);
  void send_clang_getDiagnosticCategoryText(const  ::clang::thrift::CXDiagnostic diagnostic);
  void recv_clang_getDiagnosticCategoryText(std::string& _return);
   ::clang::thrift::u32 clang_getDiagnosticNumRanges(const  ::clang::thrift::CXDiagnostic diagnostic);
  void send_clang_getDiagnosticNumRanges(const  ::clang::thrift::CXDiagnostic diagnostic);
   ::clang::thrift::u32 recv_clang_getDiagnosticNumRanges();
  void clang_getDiagnosticRange( ::clang::thrift::CXSourceRange& _return, const  ::clang::thrift::CXDiagnostic diagnostic, const  ::clang::thrift::u32 range);
  void send_clang_getDiagnosticRange(const  ::clang::thrift::CXDiagnostic diagnostic, const  ::clang::thrift::u32 range);
  void recv_clang_getDiagnosticRange( ::clang::thrift::CXSourceRange& _return);
   ::clang::thrift::u32 clang_getDiagnosticNumFixIts(const  ::clang::thrift::CXDiagnostic diagnostic);
  void send_clang_getDiagnosticNumFixIts(const  ::clang::thrift::CXDiagnostic diagnostic);
   ::clang::thrift::u32 recv_clang_getDiagnosticNumFixIts();
  void clang_getDiagnosticFixIt( ::clang::thrift::CXDiagnosticFixIt& _return, const  ::clang::thrift::CXDiagnostic Diagnostic, const  ::clang::thrift::u32 FixIt);
  void send_clang_getDiagnosticFixIt(const  ::clang::thrift::CXDiagnostic Diagnostic, const  ::clang::thrift::u32 FixIt);
  void recv_clang_getDiagnosticFixIt( ::clang::thrift::CXDiagnosticFixIt& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClangProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ClangIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ClangProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_clang_createIndex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_disposeIndex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_CXIndex_setGlobalOptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_CXIndex_getGlobalOptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getTranslationUnitSpelling(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_createTranslationUnitFromSourceFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_createTranslationUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_defaultEditingTranslationUnitOptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_parseTranslationUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_defaultSaveOptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_saveTranslationUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_disposeTranslationUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_defaultReparseOptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_reparseTranslationUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getTUResourceUsageName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getCXTUResourceUsage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_disposeCXTUResourceUsage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getFileName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getFileTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_isFileMultipleIncludeGuarded(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getNullLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_equalLocations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getLocationForOffset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getNullRange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getRange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_equalRanges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_Range_isNull(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getExpansionLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getPresumedLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getInstantiationLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getSpellingLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getRangeStart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getRangeEnd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getNumDiagnosticsInSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticInSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_loadDiagnostics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_disposeDiagnosticSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getChildDiagnostics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getNumDiagnostics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnostic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticSetFromTU(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_disposeDiagnostic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_formatDiagnostic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_defaultDiagnosticDisplayOptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticSeverity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticSpelling(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticOption(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticCategory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticCategoryName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticCategoryText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticNumRanges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticRange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticNumFixIts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clang_getDiagnosticFixIt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClangProcessor(boost::shared_ptr<ClangIf> iface) :
    iface_(iface) {
    processMap_["clang_createIndex"] = &ClangProcessor::process_clang_createIndex;
    processMap_["clang_disposeIndex"] = &ClangProcessor::process_clang_disposeIndex;
    processMap_["clang_CXIndex_setGlobalOptions"] = &ClangProcessor::process_clang_CXIndex_setGlobalOptions;
    processMap_["clang_CXIndex_getGlobalOptions"] = &ClangProcessor::process_clang_CXIndex_getGlobalOptions;
    processMap_["clang_getTranslationUnitSpelling"] = &ClangProcessor::process_clang_getTranslationUnitSpelling;
    processMap_["clang_createTranslationUnitFromSourceFile"] = &ClangProcessor::process_clang_createTranslationUnitFromSourceFile;
    processMap_["clang_createTranslationUnit"] = &ClangProcessor::process_clang_createTranslationUnit;
    processMap_["clang_defaultEditingTranslationUnitOptions"] = &ClangProcessor::process_clang_defaultEditingTranslationUnitOptions;
    processMap_["clang_parseTranslationUnit"] = &ClangProcessor::process_clang_parseTranslationUnit;
    processMap_["clang_defaultSaveOptions"] = &ClangProcessor::process_clang_defaultSaveOptions;
    processMap_["clang_saveTranslationUnit"] = &ClangProcessor::process_clang_saveTranslationUnit;
    processMap_["clang_disposeTranslationUnit"] = &ClangProcessor::process_clang_disposeTranslationUnit;
    processMap_["clang_defaultReparseOptions"] = &ClangProcessor::process_clang_defaultReparseOptions;
    processMap_["clang_reparseTranslationUnit"] = &ClangProcessor::process_clang_reparseTranslationUnit;
    processMap_["clang_getTUResourceUsageName"] = &ClangProcessor::process_clang_getTUResourceUsageName;
    processMap_["clang_getCXTUResourceUsage"] = &ClangProcessor::process_clang_getCXTUResourceUsage;
    processMap_["clang_disposeCXTUResourceUsage"] = &ClangProcessor::process_clang_disposeCXTUResourceUsage;
    processMap_["clang_getFileName"] = &ClangProcessor::process_clang_getFileName;
    processMap_["clang_getFileTime"] = &ClangProcessor::process_clang_getFileTime;
    processMap_["clang_isFileMultipleIncludeGuarded"] = &ClangProcessor::process_clang_isFileMultipleIncludeGuarded;
    processMap_["clang_getFile"] = &ClangProcessor::process_clang_getFile;
    processMap_["clang_getNullLocation"] = &ClangProcessor::process_clang_getNullLocation;
    processMap_["clang_equalLocations"] = &ClangProcessor::process_clang_equalLocations;
    processMap_["clang_getLocation"] = &ClangProcessor::process_clang_getLocation;
    processMap_["clang_getLocationForOffset"] = &ClangProcessor::process_clang_getLocationForOffset;
    processMap_["clang_getNullRange"] = &ClangProcessor::process_clang_getNullRange;
    processMap_["clang_getRange"] = &ClangProcessor::process_clang_getRange;
    processMap_["clang_equalRanges"] = &ClangProcessor::process_clang_equalRanges;
    processMap_["clang_Range_isNull"] = &ClangProcessor::process_clang_Range_isNull;
    processMap_["clang_getExpansionLocation"] = &ClangProcessor::process_clang_getExpansionLocation;
    processMap_["clang_getPresumedLocation"] = &ClangProcessor::process_clang_getPresumedLocation;
    processMap_["clang_getInstantiationLocation"] = &ClangProcessor::process_clang_getInstantiationLocation;
    processMap_["clang_getSpellingLocation"] = &ClangProcessor::process_clang_getSpellingLocation;
    processMap_["clang_getRangeStart"] = &ClangProcessor::process_clang_getRangeStart;
    processMap_["clang_getRangeEnd"] = &ClangProcessor::process_clang_getRangeEnd;
    processMap_["clang_getNumDiagnosticsInSet"] = &ClangProcessor::process_clang_getNumDiagnosticsInSet;
    processMap_["clang_getDiagnosticInSet"] = &ClangProcessor::process_clang_getDiagnosticInSet;
    processMap_["clang_loadDiagnostics"] = &ClangProcessor::process_clang_loadDiagnostics;
    processMap_["clang_disposeDiagnosticSet"] = &ClangProcessor::process_clang_disposeDiagnosticSet;
    processMap_["clang_getChildDiagnostics"] = &ClangProcessor::process_clang_getChildDiagnostics;
    processMap_["clang_getNumDiagnostics"] = &ClangProcessor::process_clang_getNumDiagnostics;
    processMap_["clang_getDiagnostic"] = &ClangProcessor::process_clang_getDiagnostic;
    processMap_["clang_getDiagnosticSetFromTU"] = &ClangProcessor::process_clang_getDiagnosticSetFromTU;
    processMap_["clang_disposeDiagnostic"] = &ClangProcessor::process_clang_disposeDiagnostic;
    processMap_["clang_formatDiagnostic"] = &ClangProcessor::process_clang_formatDiagnostic;
    processMap_["clang_defaultDiagnosticDisplayOptions"] = &ClangProcessor::process_clang_defaultDiagnosticDisplayOptions;
    processMap_["clang_getDiagnosticSeverity"] = &ClangProcessor::process_clang_getDiagnosticSeverity;
    processMap_["clang_getDiagnosticLocation"] = &ClangProcessor::process_clang_getDiagnosticLocation;
    processMap_["clang_getDiagnosticSpelling"] = &ClangProcessor::process_clang_getDiagnosticSpelling;
    processMap_["clang_getDiagnosticOption"] = &ClangProcessor::process_clang_getDiagnosticOption;
    processMap_["clang_getDiagnosticCategory"] = &ClangProcessor::process_clang_getDiagnosticCategory;
    processMap_["clang_getDiagnosticCategoryName"] = &ClangProcessor::process_clang_getDiagnosticCategoryName;
    processMap_["clang_getDiagnosticCategoryText"] = &ClangProcessor::process_clang_getDiagnosticCategoryText;
    processMap_["clang_getDiagnosticNumRanges"] = &ClangProcessor::process_clang_getDiagnosticNumRanges;
    processMap_["clang_getDiagnosticRange"] = &ClangProcessor::process_clang_getDiagnosticRange;
    processMap_["clang_getDiagnosticNumFixIts"] = &ClangProcessor::process_clang_getDiagnosticNumFixIts;
    processMap_["clang_getDiagnosticFixIt"] = &ClangProcessor::process_clang_getDiagnosticFixIt;
  }

  virtual ~ClangProcessor() {}
};

class ClangProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClangProcessorFactory(const ::boost::shared_ptr< ClangIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ClangIfFactory > handlerFactory_;
};

class ClangMultiface : virtual public ClangIf {
 public:
  ClangMultiface(std::vector<boost::shared_ptr<ClangIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClangMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClangIf> > ifaces_;
  ClangMultiface() {}
  void add(boost::shared_ptr<ClangIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::clang::thrift::CXIndex clang_createIndex(const int32_t excludeDeclarationsFromPCH, const int32_t displayDiagnostics) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_createIndex(excludeDeclarationsFromPCH, displayDiagnostics);
    }
    return ifaces_[i]->clang_createIndex(excludeDeclarationsFromPCH, displayDiagnostics);
  }

  void clang_disposeIndex(const  ::clang::thrift::CXIndex index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_disposeIndex(index);
    }
    ifaces_[i]->clang_disposeIndex(index);
  }

  void clang_CXIndex_setGlobalOptions(const  ::clang::thrift::CXIndex index, const  ::clang::thrift::CXGlobalOptFlags::type options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_CXIndex_setGlobalOptions(index, options);
    }
    ifaces_[i]->clang_CXIndex_setGlobalOptions(index, options);
  }

   ::clang::thrift::CXGlobalOptFlags::type clang_CXIndex_getGlobalOptions(const  ::clang::thrift::CXIndex index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_CXIndex_getGlobalOptions(index);
    }
    return ifaces_[i]->clang_CXIndex_getGlobalOptions(index);
  }

  void clang_getTranslationUnitSpelling(std::string& _return, const  ::clang::thrift::CXTranslationUnit unit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getTranslationUnitSpelling(_return, unit);
    }
    ifaces_[i]->clang_getTranslationUnitSpelling(_return, unit);
    return;
  }

   ::clang::thrift::CXTranslationUnit clang_createTranslationUnitFromSourceFile(const  ::clang::thrift::CXIndex idx, const std::string& source_filename, const std::vector<std::string> & clang_command_line_args, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_createTranslationUnitFromSourceFile(idx, source_filename, clang_command_line_args, unsaved_files);
    }
    return ifaces_[i]->clang_createTranslationUnitFromSourceFile(idx, source_filename, clang_command_line_args, unsaved_files);
  }

   ::clang::thrift::CXTranslationUnit clang_createTranslationUnit(const  ::clang::thrift::CXIndex idx, const std::string& ast_filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_createTranslationUnit(idx, ast_filename);
    }
    return ifaces_[i]->clang_createTranslationUnit(idx, ast_filename);
  }

   ::clang::thrift::u32 clang_defaultEditingTranslationUnitOptions() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_defaultEditingTranslationUnitOptions();
    }
    return ifaces_[i]->clang_defaultEditingTranslationUnitOptions();
  }

   ::clang::thrift::CXTranslationUnit clang_parseTranslationUnit(const  ::clang::thrift::CXIndex idx, const std::string& source_filename, const std::vector<std::string> & command_line_args, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files, const  ::clang::thrift::u32 options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_parseTranslationUnit(idx, source_filename, command_line_args, unsaved_files, options);
    }
    return ifaces_[i]->clang_parseTranslationUnit(idx, source_filename, command_line_args, unsaved_files, options);
  }

   ::clang::thrift::u32 clang_defaultSaveOptions(const  ::clang::thrift::CXTranslationUnit unit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_defaultSaveOptions(unit);
    }
    return ifaces_[i]->clang_defaultSaveOptions(unit);
  }

   ::clang::thrift::CXSaveError::type clang_saveTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit, const std::string& filename, const  ::clang::thrift::u32 options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_saveTranslationUnit(unit, filename, options);
    }
    return ifaces_[i]->clang_saveTranslationUnit(unit, filename, options);
  }

  void clang_disposeTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_disposeTranslationUnit(unit);
    }
    ifaces_[i]->clang_disposeTranslationUnit(unit);
  }

   ::clang::thrift::u32 clang_defaultReparseOptions(const  ::clang::thrift::CXTranslationUnit unit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_defaultReparseOptions(unit);
    }
    return ifaces_[i]->clang_defaultReparseOptions(unit);
  }

  int32_t clang_reparseTranslationUnit(const  ::clang::thrift::CXTranslationUnit unit, const std::vector< ::clang::thrift::CXUnsavedFile> & unsaved_files, const  ::clang::thrift::u32 options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_reparseTranslationUnit(unit, unsaved_files, options);
    }
    return ifaces_[i]->clang_reparseTranslationUnit(unit, unsaved_files, options);
  }

  void clang_getTUResourceUsageName(std::string& _return, const  ::clang::thrift::CXTUResourceUsageKind::type kind) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getTUResourceUsageName(_return, kind);
    }
    ifaces_[i]->clang_getTUResourceUsageName(_return, kind);
    return;
  }

  void clang_getCXTUResourceUsage( ::clang::thrift::CXTUResourceUsage& _return, const  ::clang::thrift::CXTranslationUnit unit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getCXTUResourceUsage(_return, unit);
    }
    ifaces_[i]->clang_getCXTUResourceUsage(_return, unit);
    return;
  }

  void clang_disposeCXTUResourceUsage(const  ::clang::thrift::CXTUResourceUsage& usage) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_disposeCXTUResourceUsage(usage);
    }
    ifaces_[i]->clang_disposeCXTUResourceUsage(usage);
  }

  void clang_getFileName(std::string& _return, const  ::clang::thrift::CXFile file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getFileName(_return, file);
    }
    ifaces_[i]->clang_getFileName(_return, file);
    return;
  }

   ::clang::thrift::t64 clang_getFileTime(const  ::clang::thrift::CXFile file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getFileTime(file);
    }
    return ifaces_[i]->clang_getFileTime(file);
  }

   ::clang::thrift::u32 clang_isFileMultipleIncludeGuarded(const  ::clang::thrift::CXTranslationUnit unit, const  ::clang::thrift::CXFile file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_isFileMultipleIncludeGuarded(unit, file);
    }
    return ifaces_[i]->clang_isFileMultipleIncludeGuarded(unit, file);
  }

   ::clang::thrift::CXFile clang_getFile(const  ::clang::thrift::CXTranslationUnit unit, const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getFile(unit, filename);
    }
    return ifaces_[i]->clang_getFile(unit, filename);
  }

  void clang_getNullLocation( ::clang::thrift::CXSourceLocation& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getNullLocation(_return);
    }
    ifaces_[i]->clang_getNullLocation(_return);
    return;
  }

   ::clang::thrift::u32 clang_equalLocations(const  ::clang::thrift::CXSourceLocation& loc1, const  ::clang::thrift::CXSourceLocation& loc2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_equalLocations(loc1, loc2);
    }
    return ifaces_[i]->clang_equalLocations(loc1, loc2);
  }

  void clang_getLocation( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXTranslationUnit tu, const  ::clang::thrift::CXFile file, const  ::clang::thrift::u32 line, const  ::clang::thrift::u32 column) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getLocation(_return, tu, file, line, column);
    }
    ifaces_[i]->clang_getLocation(_return, tu, file, line, column);
    return;
  }

  void clang_getLocationForOffset( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXTranslationUnit tu, const  ::clang::thrift::CXFile file, const  ::clang::thrift::u32 offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getLocationForOffset(_return, tu, file, offset);
    }
    ifaces_[i]->clang_getLocationForOffset(_return, tu, file, offset);
    return;
  }

  void clang_getNullRange( ::clang::thrift::CXSourceRange& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getNullRange(_return);
    }
    ifaces_[i]->clang_getNullRange(_return);
    return;
  }

  void clang_getRange( ::clang::thrift::CXSourceRange& _return, const  ::clang::thrift::CXSourceLocation& sourceBegin, const  ::clang::thrift::CXSourceLocation& sourceEnd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getRange(_return, sourceBegin, sourceEnd);
    }
    ifaces_[i]->clang_getRange(_return, sourceBegin, sourceEnd);
    return;
  }

   ::clang::thrift::u32 clang_equalRanges(const  ::clang::thrift::CXSourceRange& range1, const  ::clang::thrift::CXSourceRange& range2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_equalRanges(range1, range2);
    }
    return ifaces_[i]->clang_equalRanges(range1, range2);
  }

  int32_t clang_Range_isNull(const  ::clang::thrift::CXSourceRange& range) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_Range_isNull(range);
    }
    return ifaces_[i]->clang_Range_isNull(range);
  }

  void clang_getExpansionLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getExpansionLocation(_return, location);
    }
    ifaces_[i]->clang_getExpansionLocation(_return, location);
    return;
  }

  void clang_getPresumedLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getPresumedLocation(_return, location);
    }
    ifaces_[i]->clang_getPresumedLocation(_return, location);
    return;
  }

  void clang_getInstantiationLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getInstantiationLocation(_return, location);
    }
    ifaces_[i]->clang_getInstantiationLocation(_return, location);
    return;
  }

  void clang_getSpellingLocation( ::clang::thrift::CXSourcePosition& _return, const  ::clang::thrift::CXSourceLocation& location) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getSpellingLocation(_return, location);
    }
    ifaces_[i]->clang_getSpellingLocation(_return, location);
    return;
  }

  void clang_getRangeStart( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXSourceRange& range) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getRangeStart(_return, range);
    }
    ifaces_[i]->clang_getRangeStart(_return, range);
    return;
  }

  void clang_getRangeEnd( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXSourceRange& range) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getRangeEnd(_return, range);
    }
    ifaces_[i]->clang_getRangeEnd(_return, range);
    return;
  }

   ::clang::thrift::u32 clang_getNumDiagnosticsInSet(const  ::clang::thrift::CXDiagnosticSet diags) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getNumDiagnosticsInSet(diags);
    }
    return ifaces_[i]->clang_getNumDiagnosticsInSet(diags);
  }

   ::clang::thrift::CXDiagnostic clang_getDiagnosticInSet(const  ::clang::thrift::CXDiagnosticSet diags, const  ::clang::thrift::u32 index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticInSet(diags, index);
    }
    return ifaces_[i]->clang_getDiagnosticInSet(diags, index);
  }

   ::clang::thrift::CXDiagnosticSet clang_loadDiagnostics(const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_loadDiagnostics(filename);
    }
    return ifaces_[i]->clang_loadDiagnostics(filename);
  }

  void clang_disposeDiagnosticSet(const  ::clang::thrift::CXDiagnosticSet diagnosticSet) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_disposeDiagnosticSet(diagnosticSet);
    }
    ifaces_[i]->clang_disposeDiagnosticSet(diagnosticSet);
  }

   ::clang::thrift::CXDiagnosticSet clang_getChildDiagnostics(const  ::clang::thrift::CXDiagnostic diagnostic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getChildDiagnostics(diagnostic);
    }
    return ifaces_[i]->clang_getChildDiagnostics(diagnostic);
  }

   ::clang::thrift::u32 clang_getNumDiagnostics(const  ::clang::thrift::CXTranslationUnit unit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getNumDiagnostics(unit);
    }
    return ifaces_[i]->clang_getNumDiagnostics(unit);
  }

   ::clang::thrift::CXDiagnostic clang_getDiagnostic(const  ::clang::thrift::CXTranslationUnit unit, const  ::clang::thrift::u32 index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnostic(unit, index);
    }
    return ifaces_[i]->clang_getDiagnostic(unit, index);
  }

   ::clang::thrift::CXDiagnosticSet clang_getDiagnosticSetFromTU(const  ::clang::thrift::CXTranslationUnit unit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticSetFromTU(unit);
    }
    return ifaces_[i]->clang_getDiagnosticSetFromTU(unit);
  }

  void clang_disposeDiagnostic(const  ::clang::thrift::CXDiagnostic diagnostic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_disposeDiagnostic(diagnostic);
    }
    ifaces_[i]->clang_disposeDiagnostic(diagnostic);
  }

  void clang_formatDiagnostic(std::string& _return, const  ::clang::thrift::CXDiagnostic diagnostic, const  ::clang::thrift::u32 options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_formatDiagnostic(_return, diagnostic, options);
    }
    ifaces_[i]->clang_formatDiagnostic(_return, diagnostic, options);
    return;
  }

   ::clang::thrift::u32 clang_defaultDiagnosticDisplayOptions() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_defaultDiagnosticDisplayOptions();
    }
    return ifaces_[i]->clang_defaultDiagnosticDisplayOptions();
  }

   ::clang::thrift::CXDiagnosticSeverity::type clang_getDiagnosticSeverity(const  ::clang::thrift::CXDiagnostic diagnostic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticSeverity(diagnostic);
    }
    return ifaces_[i]->clang_getDiagnosticSeverity(diagnostic);
  }

  void clang_getDiagnosticLocation( ::clang::thrift::CXSourceLocation& _return, const  ::clang::thrift::CXDiagnostic diagnostic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticLocation(_return, diagnostic);
    }
    ifaces_[i]->clang_getDiagnosticLocation(_return, diagnostic);
    return;
  }

  void clang_getDiagnosticSpelling(std::string& _return, const  ::clang::thrift::CXDiagnostic diagnostic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticSpelling(_return, diagnostic);
    }
    ifaces_[i]->clang_getDiagnosticSpelling(_return, diagnostic);
    return;
  }

  void clang_getDiagnosticOption( ::clang::thrift::CXDiagnosticOption& _return, const  ::clang::thrift::CXDiagnostic diagnostic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticOption(_return, diagnostic);
    }
    ifaces_[i]->clang_getDiagnosticOption(_return, diagnostic);
    return;
  }

   ::clang::thrift::u32 clang_getDiagnosticCategory(const  ::clang::thrift::CXDiagnostic diagnostic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticCategory(diagnostic);
    }
    return ifaces_[i]->clang_getDiagnosticCategory(diagnostic);
  }

  void clang_getDiagnosticCategoryName(std::string& _return, const  ::clang::thrift::u32 category) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticCategoryName(_return, category);
    }
    ifaces_[i]->clang_getDiagnosticCategoryName(_return, category);
    return;
  }

  void clang_getDiagnosticCategoryText(std::string& _return, const  ::clang::thrift::CXDiagnostic diagnostic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticCategoryText(_return, diagnostic);
    }
    ifaces_[i]->clang_getDiagnosticCategoryText(_return, diagnostic);
    return;
  }

   ::clang::thrift::u32 clang_getDiagnosticNumRanges(const  ::clang::thrift::CXDiagnostic diagnostic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticNumRanges(diagnostic);
    }
    return ifaces_[i]->clang_getDiagnosticNumRanges(diagnostic);
  }

  void clang_getDiagnosticRange( ::clang::thrift::CXSourceRange& _return, const  ::clang::thrift::CXDiagnostic diagnostic, const  ::clang::thrift::u32 range) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticRange(_return, diagnostic, range);
    }
    ifaces_[i]->clang_getDiagnosticRange(_return, diagnostic, range);
    return;
  }

   ::clang::thrift::u32 clang_getDiagnosticNumFixIts(const  ::clang::thrift::CXDiagnostic diagnostic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticNumFixIts(diagnostic);
    }
    return ifaces_[i]->clang_getDiagnosticNumFixIts(diagnostic);
  }

  void clang_getDiagnosticFixIt( ::clang::thrift::CXDiagnosticFixIt& _return, const  ::clang::thrift::CXDiagnostic Diagnostic, const  ::clang::thrift::u32 FixIt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clang_getDiagnosticFixIt(_return, Diagnostic, FixIt);
    }
    ifaces_[i]->clang_getDiagnosticFixIt(_return, Diagnostic, FixIt);
    return;
  }

};

}} // namespace

#endif
