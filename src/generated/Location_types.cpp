/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Location_types.h"

#include <algorithm>

namespace clang { namespace thrift {

const char* CXSourceLocation::ascii_fingerprint = "CCD847ED8F9380F935E4ECB1C10F3559";
const uint8_t CXSourceLocation::binary_fingerprint[16] = {0xCC,0xD8,0x47,0xED,0x8F,0x93,0x80,0xF9,0x35,0xE4,0xEC,0xB1,0xC1,0x0F,0x35,0x59};

uint32_t CXSourceLocation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ptr_data.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->ptr_data.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->ptr_data[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ptr_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->int_data);
          this->__isset.int_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CXSourceLocation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CXSourceLocation");

  xfer += oprot->writeFieldBegin("ptr_data", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->ptr_data.size()));
    std::vector< ::clang::thrift::ResourceId> ::const_iterator _iter5;
    for (_iter5 = this->ptr_data.begin(); _iter5 != this->ptr_data.end(); ++_iter5)
    {
      xfer += oprot->writeI64((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("int_data", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->int_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CXSourceLocation &a, CXSourceLocation &b) {
  using ::std::swap;
  swap(a.ptr_data, b.ptr_data);
  swap(a.int_data, b.int_data);
  swap(a.__isset, b.__isset);
}

const char* CXSourceRange::ascii_fingerprint = "8C9B1A52DF178D7BCD3BAAF3162A3D80";
const uint8_t CXSourceRange::binary_fingerprint[16] = {0x8C,0x9B,0x1A,0x52,0xDF,0x17,0x8D,0x7B,0xCD,0x3B,0xAA,0xF3,0x16,0x2A,0x3D,0x80};

uint32_t CXSourceRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ptr_data.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->ptr_data.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readI64(this->ptr_data[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ptr_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->begin_int_data);
          this->__isset.begin_int_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_int_data);
          this->__isset.end_int_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CXSourceRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CXSourceRange");

  xfer += oprot->writeFieldBegin("ptr_data", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->ptr_data.size()));
    std::vector< ::clang::thrift::ResourceId> ::const_iterator _iter11;
    for (_iter11 = this->ptr_data.begin(); _iter11 != this->ptr_data.end(); ++_iter11)
    {
      xfer += oprot->writeI64((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("begin_int_data", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->begin_int_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_int_data", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->end_int_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CXSourceRange &a, CXSourceRange &b) {
  using ::std::swap;
  swap(a.ptr_data, b.ptr_data);
  swap(a.begin_int_data, b.begin_int_data);
  swap(a.end_int_data, b.end_int_data);
  swap(a.__isset, b.__isset);
}

const char* CXSourcePosition::ascii_fingerprint = "3490AC639D1D7CD0933B17E89E84AD32";
const uint8_t CXSourcePosition::binary_fingerprint[16] = {0x34,0x90,0xAC,0x63,0x9D,0x1D,0x7C,0xD0,0x93,0x3B,0x17,0xE8,0x9E,0x84,0xAD,0x32};

uint32_t CXSourcePosition::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->file);
          this->__isset.file = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filename);
          this->__isset.filename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->line);
          this->__isset.line = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->column);
          this->__isset.column = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offset);
          this->__isset.offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CXSourcePosition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CXSourcePosition");

  xfer += oprot->writeFieldBegin("file", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->file);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filename", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->filename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("line", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->line);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->column);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CXSourcePosition &a, CXSourcePosition &b) {
  using ::std::swap;
  swap(a.file, b.file);
  swap(a.filename, b.filename);
  swap(a.line, b.line);
  swap(a.column, b.column);
  swap(a.offset, b.offset);
  swap(a.__isset, b.__isset);
}

}} // namespace
