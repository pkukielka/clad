/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Index_types.h"

#include <algorithm>

namespace clad {

int _kCXAvailabilityKindValues[] = {
  CXAvailabilityKind::CXAvailability_Available,
  CXAvailabilityKind::CXAvailability_Deprecated,
  CXAvailabilityKind::CXAvailability_NotAvailable,
  CXAvailabilityKind::CXAvailability_NotAccessible
};
const char* _kCXAvailabilityKindNames[] = {
  "CXAvailability_Available",
  "CXAvailability_Deprecated",
  "CXAvailability_NotAvailable",
  "CXAvailability_NotAccessible"
};
const std::map<int, const char*> _CXAvailabilityKind_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kCXAvailabilityKindValues, _kCXAvailabilityKindNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCXGlobalOptFlagsValues[] = {
  CXGlobalOptFlags::CXGlobalOpt_None,
  CXGlobalOptFlags::CXGlobalOpt_ThreadBackgroundPriorityForIndexing,
  CXGlobalOptFlags::CXGlobalOpt_ThreadBackgroundPriorityForEditing,
  CXGlobalOptFlags::CXGlobalOpt_ThreadBackgroundPriorityForAll
};
const char* _kCXGlobalOptFlagsNames[] = {
  "CXGlobalOpt_None",
  "CXGlobalOpt_ThreadBackgroundPriorityForIndexing",
  "CXGlobalOpt_ThreadBackgroundPriorityForEditing",
  "CXGlobalOpt_ThreadBackgroundPriorityForAll"
};
const std::map<int, const char*> _CXGlobalOptFlags_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kCXGlobalOptFlagsValues, _kCXGlobalOptFlagsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* CXVersion::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t CXVersion::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t CXVersion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Major);
          this->__isset.Major = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Minor);
          this->__isset.Minor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Subminor);
          this->__isset.Subminor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CXVersion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CXVersion");

  xfer += oprot->writeFieldBegin("Major", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->Major);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Minor", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Minor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Subminor", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Subminor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CXVersion &a, CXVersion &b) {
  using ::std::swap;
  swap(a.Major, b.Major);
  swap(a.Minor, b.Minor);
  swap(a.Subminor, b.Subminor);
  swap(a.__isset, b.__isset);
}

} // namespace
