/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TranslationUnit_types.h"

#include <algorithm>

namespace clad {

int _kCXTranslationUnit_FlagsValues[] = {
  CXTranslationUnit_Flags::CXTranslationUnit_None,
  CXTranslationUnit_Flags::CXTranslationUnit_DetailedPreprocessingRecord,
  CXTranslationUnit_Flags::CXTranslationUnit_Incomplete,
  CXTranslationUnit_Flags::CXTranslationUnit_PrecompiledPreamble,
  CXTranslationUnit_Flags::CXTranslationUnit_CacheCompletionResults,
  CXTranslationUnit_Flags::CXTranslationUnit_ForSerialization,
  CXTranslationUnit_Flags::CXTranslationUnit_CXXChainedPCH,
  CXTranslationUnit_Flags::CXTranslationUnit_SkipFunctionBodies,
  CXTranslationUnit_Flags::CXTranslationUnit_IncludeBriefCommentsInCodeCompletion
};
const char* _kCXTranslationUnit_FlagsNames[] = {
  "CXTranslationUnit_None",
  "CXTranslationUnit_DetailedPreprocessingRecord",
  "CXTranslationUnit_Incomplete",
  "CXTranslationUnit_PrecompiledPreamble",
  "CXTranslationUnit_CacheCompletionResults",
  "CXTranslationUnit_ForSerialization",
  "CXTranslationUnit_CXXChainedPCH",
  "CXTranslationUnit_SkipFunctionBodies",
  "CXTranslationUnit_IncludeBriefCommentsInCodeCompletion"
};
const std::map<int, const char*> _CXTranslationUnit_Flags_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kCXTranslationUnit_FlagsValues, _kCXTranslationUnit_FlagsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCXSaveTranslationUnit_FlagsValues[] = {
  CXSaveTranslationUnit_Flags::CXSaveTranslationUnit_None
};
const char* _kCXSaveTranslationUnit_FlagsNames[] = {
  "CXSaveTranslationUnit_None"
};
const std::map<int, const char*> _CXSaveTranslationUnit_Flags_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kCXSaveTranslationUnit_FlagsValues, _kCXSaveTranslationUnit_FlagsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCXSaveErrorValues[] = {
  CXSaveError::CXSaveError_None,
  CXSaveError::CXSaveError_Unknown,
  CXSaveError::CXSaveError_TranslationErrors,
  CXSaveError::CXSaveError_InvalidTU
};
const char* _kCXSaveErrorNames[] = {
  "CXSaveError_None",
  "CXSaveError_Unknown",
  "CXSaveError_TranslationErrors",
  "CXSaveError_InvalidTU"
};
const std::map<int, const char*> _CXSaveError_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kCXSaveErrorValues, _kCXSaveErrorNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCXReparse_FlagsValues[] = {
  CXReparse_Flags::CXReparse_None
};
const char* _kCXReparse_FlagsNames[] = {
  "CXReparse_None"
};
const std::map<int, const char*> _CXReparse_Flags_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kCXReparse_FlagsValues, _kCXReparse_FlagsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCXTUResourceUsageKindValues[] = {
  CXTUResourceUsageKind::CXTUResourceUsage_AST,
  CXTUResourceUsageKind::CXTUResourceUsage_Identifiers,
  CXTUResourceUsageKind::CXTUResourceUsage_Selectors,
  CXTUResourceUsageKind::CXTUResourceUsage_GlobalCompletionResults,
  CXTUResourceUsageKind::CXTUResourceUsage_SourceManagerContentCache,
  CXTUResourceUsageKind::CXTUResourceUsage_AST_SideTables,
  CXTUResourceUsageKind::CXTUResourceUsage_SourceManager_Membuffer_Malloc,
  CXTUResourceUsageKind::CXTUResourceUsage_SourceManager_Membuffer_MMap,
  CXTUResourceUsageKind::CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc,
  CXTUResourceUsageKind::CXTUResourceUsage_ExternalASTSource_Membuffer_MMap,
  CXTUResourceUsageKind::CXTUResourceUsage_Preprocessor,
  CXTUResourceUsageKind::CXTUResourceUsage_PreprocessingRecord,
  CXTUResourceUsageKind::CXTUResourceUsage_SourceManager_DataStructures,
  CXTUResourceUsageKind::CXTUResourceUsage_Preprocessor_HeaderSearch,
  CXTUResourceUsageKind::CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN,
  CXTUResourceUsageKind::CXTUResourceUsage_MEMORY_IN_BYTES_END,
  CXTUResourceUsageKind::CXTUResourceUsage_First,
  CXTUResourceUsageKind::CXTUResourceUsage_Last
};
const char* _kCXTUResourceUsageKindNames[] = {
  "CXTUResourceUsage_AST",
  "CXTUResourceUsage_Identifiers",
  "CXTUResourceUsage_Selectors",
  "CXTUResourceUsage_GlobalCompletionResults",
  "CXTUResourceUsage_SourceManagerContentCache",
  "CXTUResourceUsage_AST_SideTables",
  "CXTUResourceUsage_SourceManager_Membuffer_Malloc",
  "CXTUResourceUsage_SourceManager_Membuffer_MMap",
  "CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc",
  "CXTUResourceUsage_ExternalASTSource_Membuffer_MMap",
  "CXTUResourceUsage_Preprocessor",
  "CXTUResourceUsage_PreprocessingRecord",
  "CXTUResourceUsage_SourceManager_DataStructures",
  "CXTUResourceUsage_Preprocessor_HeaderSearch",
  "CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN",
  "CXTUResourceUsage_MEMORY_IN_BYTES_END",
  "CXTUResourceUsage_First",
  "CXTUResourceUsage_Last"
};
const std::map<int, const char*> _CXTUResourceUsageKind_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(18, _kCXTUResourceUsageKindValues, _kCXTUResourceUsageKindNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* CXUnsavedFile::ascii_fingerprint = "343DA57F446177400B333DC49B037B0C";
const uint8_t CXUnsavedFile::binary_fingerprint[16] = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

uint32_t CXUnsavedFile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Filename);
          this->__isset.Filename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Contents);
          this->__isset.Contents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Length);
          this->__isset.Length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CXUnsavedFile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CXUnsavedFile");

  xfer += oprot->writeFieldBegin("Filename", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Filename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Contents", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Contents);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Length", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CXUnsavedFile &a, CXUnsavedFile &b) {
  using ::std::swap;
  swap(a.Filename, b.Filename);
  swap(a.Contents, b.Contents);
  swap(a.Length, b.Length);
  swap(a.__isset, b.__isset);
}

const char* CXTUResourceUsageEntry::ascii_fingerprint = "6E7DD25E88B43484CFC93FCB15DCA1AF";
const uint8_t CXTUResourceUsageEntry::binary_fingerprint[16] = {0x6E,0x7D,0xD2,0x5E,0x88,0xB4,0x34,0x84,0xCF,0xC9,0x3F,0xCB,0x15,0xDC,0xA1,0xAF};

uint32_t CXTUResourceUsageEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->kind = (CXTUResourceUsageKind::type)ecast0;
          this->__isset.kind = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->amount);
          this->__isset.amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CXTUResourceUsageEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CXTUResourceUsageEntry");

  xfer += oprot->writeFieldBegin("kind", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->kind);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("amount", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CXTUResourceUsageEntry &a, CXTUResourceUsageEntry &b) {
  using ::std::swap;
  swap(a.kind, b.kind);
  swap(a.amount, b.amount);
  swap(a.__isset, b.__isset);
}

const char* CXTUResourceUsage::ascii_fingerprint = "458A44B0FD0112BE746A8E4B68F24C77";
const uint8_t CXTUResourceUsage::binary_fingerprint[16] = {0x45,0x8A,0x44,0xB0,0xFD,0x01,0x12,0xBE,0x74,0x6A,0x8E,0x4B,0x68,0xF2,0x4C,0x77};

uint32_t CXTUResourceUsage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->entries.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->entries.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->entries[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.entries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CXTUResourceUsage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CXTUResourceUsage");

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entries", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->entries.size()));
    std::vector<CXTUResourceUsageEntry> ::const_iterator _iter6;
    for (_iter6 = this->entries.begin(); _iter6 != this->entries.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CXTUResourceUsage &a, CXTUResourceUsage &b) {
  using ::std::swap;
  swap(a.data, b.data);
  swap(a.entries, b.entries);
  swap(a.__isset, b.__isset);
}

} // namespace
